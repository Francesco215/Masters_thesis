%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fig_BZbands.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: McCann, Edward
%%CreationDate: 5/20/2012
%%BoundingBox: 0 0 564 578
%%HiResBoundingBox: 0 0 563.0352 577.6788
%%CropBox: 0 0 563.0352 577.6788
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.2
%AI9_PrintingDataBegin
%ADO_BuildNumber: Adobe Illustrator(R) 15.0.2 x399 R agm 4.5189 ct 5.1875
%ADO_ContainsXMP: MainFirst
%AI7_Thumbnail: 128 128 8
%%BeginData: 11353 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD5CFFA87DA87DA87DA87DA87DA8FD047D52A87D7D27527D7DA852
%525227A87DA87DA87DA8FD5DFF7DA8FD0AFF7DFFA852FF52A85252A87DA8
%7D7DA87D7DFD05FF7DFD3EFFA852FD1DFFA8277DFD09FF7D7DA87DFF7DFF
%52A87D7DF8A852A8FF7DFFFFFF7D7DA8FD3EFF7DF87DFD1CFFA852277DFD
%08FFA8FFA8FFFFA8A8FD057DFD04A87DFFFF7D52A87DFD3EFFF8F827FD1C
%FFA8A87D277DFD0CFF7DFFFFFFA8FD05FFA8FFFF527DFFA8A8FD3DFF27F8
%F8F852FD1BFF7DFFFF52527DFD0BFF7DFD0AFFA8527DFFFFFF7DFD3DFFA8
%7D7D7DA8FD1BFFA8A8FFA87D7D52FD08FFA8FF7DFD09FF7D52A8FFFFFFA8
%A8FD1CFFA8527D527DFFFF7DFFFFFFA85252FFA85252A8FD0CFFA87D5252
%2752527DA8FD19FF7DA8FFFFA8527D52A8FFFFFF52A87D52A87DFD08FF7D
%52A8FFFFFF527DA8FD1DFF277DFFA8FF7D7DFD04FF2752FFFF52A852A8FD
%0AFF52527DFFA87DA8FF7D5252FD18FFA8A8FFFFFF7D7DA852A8FFFF7D7D
%7D52FF7DFD07FF7D7DFD04FF52A8FFA8FD1DFF277DA8FFA852FFFF7D7DFF
%A827FFA8A8FFA852FD08FF7D277DFFFFFFA852FD04FF7D27A8FD16FF7DA8
%FD04FF7D7DA8527DFFA8FFA8FFFFA8FD06FF527DFFFFFFA852A8FFFF7DFD
%1DFF525252A8A852FF5252F8A8FF527DA8A8FFA852A8FD06FF7D52FD06FF
%7DFD06FF277DFD15FFA8A8FD05FF7D7DFF7D7DFD05FF7DFD05FF52A8FFFF
%FF7D52FFFFFFA8A8FD1DFF27A8FFFF527DFF527DFFA8FF7D2752FFFFFF27
%FD06FF5227FD07FF52FD07FF277DFD14FF7DA8FD06FF527DFF7D52FFFFFF
%A87DFFFFFFA827A8FFFFA85252FD04FFA87DFD1CFFA827527D52A852FF7D
%527DFFFFFF27A8FFFFA852FD05FF7D52FD07FFA87DFD08FF527DFD13FFA8
%A8FD07FF52A8FF5252A87DFF7DFFFF7D52FFFFFFA8527DFD05FFA8A8FD1D
%FFA8A8A8FFFF7D52FFA8A8FD06FFA852A8FD04FF7D52FD09FF52FD09FF27
%7DFD12FF7DA8FD08FF527D7D522727A87DA87D52FFFFFFA852A8FD06FFA8
%7DFD23FFA8FD0AFFA8FD04FF7D27FD09FFA87DFD0AFF27A8FD11FFA8A8FD
%09FF527DA8A8527D527DA8FFFFFF7D52FD08FFA8A8FD32FFA827FD0BFF7D
%FD0BFF27FD11FF7DA8FD0AFF52A8FFFFA87DFD04FF5252FD0AFF7DFD32FF
%27A8FD08FFA8A87D7D7DA8A8FD08FFA827FD10FFA8A8FD0BFF52A8FFFF7D
%FFFFFF527DFD0AFFA8A8FD31FF527DFD07FF7D5252527D527D5252527DFD
%07FF5252FD0FFF7DFD0DFF527DFFA8FFA852A8FD0CFF7DFD30FF7D52FD06
%FF7D5252A8FFFFFFA8FFFFFFA852527DFD06FF52A8FD0EFFA87DFD0DA852
%52527D27FD0CA87D52A8FD2FFFA852A8FD05FF2752A87D27A8FFFF7DFD05
%FFA85252FD05FFA852FD0EFF7D7D7DA87D7D7DA87DA87D7D7DA87D5227FD
%0452A87DA87DA87DA87D7D52A852527DFD2FFF7D7DFD05FF277DFFFF5252
%A8FFA8A8FD07FF7D27FD05FF527DFD0DFFA8A8FD0BFFA87DA8FFA8FFFF7D
%52FD07FFA8527DFFFFA8FD2EFFA827FD04FFA827A8FFFFFF7D27A8FFA87D
%FD08FFA827A8FD04FF27FD0DFF7DA8FD0AFF7D52A8FFFFA8FFFFFFA827A8
%FD06FF527DFFA87DFD2EFF52A8FFFFFFA827FD05FF52527DFFFFA8FD0AFF
%27A8FFFFFFA852FD0CFFA8A8FD09FF7D7DFFFFFFA852FD05FF527DFD04FF
%A852A87DA8A8FD2DFF7D52FFFFFFA827FD07FFA8FFFFFFA8FD0AFFA827A8
%FFFFFF527DFD0BFF7DA8FD08FF7D5252FF7D27527D527DFD04FF7D52A8FF
%FFFFA8FF52A87DFD2DFF52FD04FF27FD0CFFA8FD0BFFA827FFFFFFA852FD
%0BFFA8A8FD07FF7D527D7D525252FF7DFF7D7DFD04FFA852A8FD05FFA8A8
%FD2CFF7D52FFFFFF27A8FD0CFFA8FD0CFFA827FFFFFF527DFD0AFF7DA8FD
%06FF7D7DFFFF27527DA8FFA8FFFF7D52FD04FFA85252FD05FF7DFD2CFF27
%FFFFFF27A8FD0CFFA8A8FD0DFF7D52FFFFFF27FD0AFFA8A8FD05FF7D7DFF
%FF7D7DFD04FF7DFFFFFF7D52FD05FF7D52FFFFFFA8A8FD2BFF527DFFFF52
%7DFD0DFFA87DFD0EFF5252FFFF7D52FD09FF7DA8FD04FF7D7DFFFF527DFD
%05FF7DFD04FF7D52A8FFA8FFFFA827A8FFFF7DFD2AFFA852FFFF7D52FD0F
%FFA8FD0FFF52A8FFFF52A8FD08FFA8A8FFFFFF7D7DFFFF7D7DFD04FFA8FF
%7DFD05FFA852A8FD05FF527DA8A8FD2AFF527DFFA827A8FD0FFF7DFD0FFF
%A852A8FF7D7DFD08FF7DA8FFFF7D52FFFF527DFFFF52A87D7DA8A8FD06FF
%A852A8FD05FF7D7D7DFD29FFA852FFFF52A8FD0DFFA8FFFFA8FD10FF7D52
%FFFF27FD08FFA8A8FF7D52FFFF527DFFFFFD047D52FF7DFD07FFA852A8FD
%05FFA8A8FD29FF52A8FF7D52FD0CFFA852A8FFFFA8FD11FF277DFF7D52FD
%07FF7DFF7D52FFFF527DFD04FFA8FFA8FFFFA8FD08FFA8527DFD05FF7DFD
%28FFA852FFA827FD0DFF2752FFFFA8A8FD12FF27FFFF52A8FD06FFA87D52
%FFFF7D7DFD0AFF7DFD0AFF527DFFFFFFA8A8FD28FF527DFF27A8FD0CFFA8
%527D7DFFA87DFD12FFA827FF7D52FD06FF7D7DA8FF527DFD0AFFA8A8FD0B
%FF7D7DFFFFFF7DFD27FFA852FF527DFD0EFF7D52A8FFFFA8FD13FF7D7DFF
%27FD06FFA8A8FF527DFD07FF7DFFA87DFF7DFD0CFF7D7DFFA8A8FD27FF52
%A8A852FD10FFA8FFFFFF7DFD13FFA827FF7D52FD05FF7DFF7D7DFD06FFA8
%A852A87D52A87DFD0DFF7D52A87DFD26FFA852FF52A8FD14FFA8FD14FF7D
%52FF52A8FD04FFA8527DFD09FFFD04A8FF7DFD0EFFA87DA8FD26FF527DA8
%52FD15FF7DFD15FF27A87D7DFD04FF7D527DA87DA87DA87DA87DA87DA87D
%A87D7D7DA87DA87DA87DA87DA87DA87DA8A87D7DFD26FF52FF27FD16FFA8
%FD16FF27FF27FD04FFA87DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FF
%A8FFA8FFA8FFA8FFA8FFA8A8F8A8FD25FF52A8527DFD15FFA87DFD16FF7D
%7D7D52FFFFFFA8FD1FFF527DFD25FFA852A852FD17FFA8FD17FF52A852FD
%04FFA8FD1DFFA8FD27FF7D7D527DFD17FFA8FD17FFFD047DFFFFFF7DA8FD
%1BFFA8A8FD27FF527D52FD14FFA8A8FFFFA8FD18FF527D52FFFFFF7DFD1C
%FFA8FD27FF527D52A8FD14FF27A8FFFF7DFD18FFA852527DFFFFFFA8FD19
%FFA852A8FD27FF7D527DFD14FF7D52A8FFA8A8FD19FF7D527DFFFFA8A8FD
%19FF5252FD27FF7D2752FD14FFA87DF87DFFA87DFD19FFA85227A8FFA87D
%FD18FF5227FD28FF52527DFD16FFA8A8FFFFA8FD1AFF7D2752FFFFA8FD17
%FFA827FD28FF7D2752FD1BFFA8FD1BFF2727A8FFA8FD17FF7DFD0BFFA852
%7D7DFD1AFF5227FD1CFFA8FD1BFFA8F87DFF7DA8FD15FFA8A87D7D52A8FD
%09FF7D7D2752A8FD16FFA8F87DFD1CFFA8FD1CFF52F8FFA8A8FD14FF7D52
%527DA8FD0EFF7D527DFD15FF52F8FD1CFFA8A8FD1CFFA8F852FFA8FD13FF
%52277DFFFFFFA8FD08FF7D52527D7DFFFF5227FD13FFA8F852FD1DFF7DFD
%1DFF52F8A8A8FD12FF2727FFFF7D7D52527DFD0AFF7D5252A8FF7D27FD12
%FF7D27FD1EFFA8FD1EFFF87D7DFD11FF2727FFA8277D7DFD0FFFA82752FF
%A827FD11FFF8A8FD1EFF7DFD1EFF7DF8A8A8FD0FFF27F87D7D52A8FD13FF
%7D52A8A827FD0FFF5227FD1AFF7D7DFFFFFFA8FD1FFF2752FD0FFF277D52
%527DFD16FFA827A8A827FD0DFFA827A8FD19FFA8A8527DFFFFA8FD1FFF7D
%F87DFD0DFF277D7D52A8FD18FFA852A87D52FD0CFF7D52FD1CFFA8A8FFA8
%A8FD20FF277DFD0CFF527D7D52FD1BFFA852A8527DFD0BFF27FD1CFFA87D
%FFFFA87DFD20FFA827FD0BFF52527D27A8FD1CFFA852A852A8FD09FF527D
%FD1CFF7D7DA8FFFFA8FD21FF527DFD09FFA8522727FD1FFF7D527D52FD08
%FFA827A8FD21FF7DFD21FF52F87DFFFFA8527DA8FFA82727F8A8FD20FFFD
%047DFD07FF5252FD22FFA8FD21FFA8F852FFFFA8A8A8FFFF527D277DFD22
%FF527D52A8FD05FFA8F8FD23FFA8FD21FF7D7DF8A8FD05FF7D527D27FD24
%FF527D52FD05FFF852FD22FFA8A8FD23FF5227FD05FF527D52FD25FFA827
%7D52FFFFFF52F8A8FD23FF7DFD23FFA8F852FFFFFF527D27FD27FF7D5252
%A8FFA8F852FD24FFA8FD24FF2727A8FF7D7D52A8FD28FF525252A852F8FD
%25FFA8FD24FFA8F8527D525252FD29FFA8527D52527DFD25FFA8FD21FFA8
%A8FFFF7D52527D52FFFFFF7DA8FD09FF7DFD1CFF7D7DFF52A8FD25FFA8FD
%21FF7DA8FFFFA852FF527DFFFFFF7DFD0AFF27F87DFD09FFFD11A8FF2727
%52FFFD08A87DFD13A87DFD07A87D7DFD12A87DFD0EA87D7DFFA8A8522752
%FFA8A8A87D7DA87DA87DA87DA87DA8F8F8F827A8FD06FFA8FFA87DA8FFA8
%FFA8FFA8FF7DFFA8FFA8FFA85252527DFFA8FFA8FFA8FFA8A8A8FFA8FFA8
%FFA8FFA87DA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8A852FFA8FFA8FFA8
%FFA8A8A8FFA8FFA8FFA8FFA87DA8FFA8FFA8FFA8FFA8A8A8FFA8FF527DA8
%FF7D275252A8FFA8FF52A8A8FFA8A8A8FFA8FFA827F8F852FD0AFFA8FD0E
%FF52A8A8527DFD12FFA8FD12FFA8FD12FFA8FD0EFFA8A8FFFF7D52A87D52
%FFFFFFA8FD0AFF2752FD1AFF527D7D275227FD25FFA8FD24FFA82752277D
%527DFD0AFFA8FFA8FD1BFF7D52A852FF52527DFD24FFA8FD24FF52527DFF
%52A852A8FD08FFA827A8FD1BFFA827FF27FFFFFF2752A8FD23FFA8FD23FF
%A82727FFFFA827FF27FD09FF27A8A8FD1AFF27FF7D7DFFFFFF7D277DFD22
%FFA8A8FD23FF7D27A8FFFFFF7D7DFF27A8FD07FF527D52A8FD18FF27A8A8
%52FD05FF5227A8FD22FF7DFD21FF7D7D2752FD04FFA827FFA8F8FD07FF27
%F8A8FD18FF527DFF52A8FD05FF7D2752FD22FFA8FD21FFA8F827A8FFA87D
%7DFF7D527D2752FD06FF275252FD17FF527DFF7D52A852A87D52A8FF5227
%A8FD21FF7DFFFF7D527D527DFD1AFF7DF852FF52527D5252FF277DFF5252
%FD04FFA852A8527D7DA8FD13FF5252FFFF27FFA827FF7D27FFFFA8F87DFD
%1CFFA8FD04FFA8FFFF5252A8A87DFD1AFF5227FFFF5252FF277DFFFF27FF
%FF5252FD08FF527DFD12FF5252FFFF27A8FFA827A87DFD04FF52F8A8FD1A
%FFA87D27FFFFFFA8FFFF7D52FD1CFFA8F87DFFFF52527DA8FFFFFF7D52FF
%FF5252FD07FF5227A8FD10FF277DFFFF7D52FFFFA82727A8FD04FFA82752
%FD1CFF7DA8FFA8A8FFFF7D52FD1CFF5227A8FFFFA8F852FD05FF527DFFFF
%7D52FD17FFA827A8FFFFA827A8FFFFA827A8277DFD04FF5227A8FD18FF7D
%7DFF7DFFFFFF7DFFFFA852FD1BFFA8F852FFFFFF7D7D7D277DFFFFFFA852
%A8FFFF7D27A8FD13FFA85252FD04FF52A8FFFFFF7D27A8A8F852FD04FFF8
%52FD18FFA8FF527DA8FFFFA8FFFF5227A8FD1AFF5227FD04FF5227FF52F8
%A8FFFFFF7D52FD04FF5252A8FD0CFFA8FFA87D27527DFD04FF5252FD05FF
%A8FFA8FFA8A8A8FFFF7DF8A8FD19FFA8A8FFFFFF7DFFFFA8A8FD1AFFA8F8
%7DFD04FFA8FFA8FFA8A82752A8FF5252FD04FF7D52527DA8FFA8FD07FFA8
%527D7DA8FD05FF7D52FD0BFF7DA8FFFFA82752FD1EFFA8FD1EFF2727FD0B
%FFA8A8FFFFFF527DFD05FFA87D7D52A8FD10FF7D52FD11FF52F8A8FD1DFF
%A8FD1DFF7DF87DFD11FF277DFD18FF7D52FD13FFF852FD1CFFA8A8FD1DFF
%5227FD13FF277DFD15FFA85252FD14FF7DF8A8FD1CFF7DFD1CFFA8F8A8FD
%14FF5252FD13FF7D527DFD16FF2752FD1CFFA8FD1CFF2727FD16FF7D52A8
%FD0EFFA8A85252A8FD17FF7DF8A8FD1BFFA8FD1BFF7DF87DFD17FFA85252
%A8A8FD09FFA8525252A8FD1AFFF852FD16FFA852FFFFFFA8FD1BFF2727FD
%1AFFA8525252A8FD07FFA8FD1EFF7DF8A8FD15FFA827FFFFFF7DFD1AFFA8
%F8A8FD1DFFA8A8FD27FF2727FD13FF7D7D5227A8FF7DA8FD1AFF2727FD47
%FF7DF8A8FD13FFA8A827FFFFFF7DFD19FF7DF87DFD48FFF852FD19FFA8FD
%19FF2727FD49FF7DF8A8FD18FFA8FD18FF7DF8A8FD4AFF2727FD18FFA8FD
%18FFF852FD4BFF7DF87DFD17FFA8FD17FF7DF8A8FD4CFF2727FD16FFA8A8
%FD17FF2752FD4DFFA8F8A8FD16FF7DFD16FF7DF8FD4FFF5227FD16FFA8FD
%16FFF87DFD4FFFA8F87DFD11FFA8FFFFFF7DFD15FF52F8A8FD50FF5227FD
%10FFA852A8FFFFA8FD14FFA8F87DFD52FFF87DFD0FFF2752FFFFFF7DFD14
%FF52F8FD53FF7DF8FD0DFF7D7D527D7DFFA8A8FD14FFF8A8FD54FF2727FD
%0CFFA8A87D52A8FFFFA8FD13FF2727FD55FF7DF8A8FD12FFA8FD12FF7DF8
%A8FD56FF2727FD12FF7DFD12FFF827FD58FFF87DFD11FFA8FD11FF7DF8FD
%59FF7DF8FD11FF7DFD11FFF87DFD5AFF2752FD0FFFA8A8FD10FF2727FD5B
%FFA8F87DFD0FFF7DFD0FFF7DF8A8FD5CFF5227FD0FFFA8FD0FFFF87DFD5E
%FFF852FD0AFFA8FFFFFFA8FD0EFF2727FD60FFF87DFD08FF5252A8FFFFA8
%FD0DFF7DF8FD61FF7DF8A8FD07FF5252FFFFA87DFD0CFFA8F8A8FD62FF52
%F8FD05FF7DA87D52A8FF7DA8FD0CFFF852FD64FF2727FD05FFA85252A8FF
%FFA8FD0BFFF827FD66FFF852FD0AFFA8FD0AFF2727FD67FFA8F852FD09FF
%A8FD09FF27F8A8FD68FFA8F852FD08FFA8FD08FF27F8A8FD6AFFA8F827FD
%07FF7DFD07FF27F8A8FD6CFFA827F8A8FD04FFA8A8FD05FFA8F827FD70FF
%52F852A8FFFFFFA8FFFFFFA852F852FD72FFA8272727FD057D272727FD76
%FFA87D2727F827277DA8FDFCFFFD40FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where
{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse
{ userdict /AI11_PDFMark5 /cleartomark load put
userdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}
{ userdict /AI11_PDFMark5 /pdfmark load put
userdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse
[/NamespacePush AI11_PDFMark5
[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5
[{ai_metadata_stream_123}
currentfile 0 (%  &&end XMP packet marker&&)
/SubFileDecode filter AI11_ReadMetadata_PDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:CreateDate>2012-05-20T20:36:43+01:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>252</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYqwryr+bHljzL538x+ULCSuoeXmUO/IFZxss5j2/wB0TH039+mKs1xV2Kux&#xA;V2KuxV2Ksd/MGKKXyneRyxLNG724eFwGVgbmP4SCDUHFWLflvqP5c+dNL9QeWtO0/WIFBv8ASpLa&#xA;BnjqxTmjGNS8ZZGWvEFWBRwrqyhVmP8AgjyX/wBWDTf+kSD/AJoxVIPOnkbRzpdo2i+X7M3aalpr&#xA;zLBaWoLWgvYTeBuagcfq3qVpvirGNe8mTJa+ddUtdHs7G3Ok89HF5Y2n+iXEUDF/SSFpA9RR+b0K&#xA;vt8S7BViPmnybHpXnPVNQXTpbqbS9Kjljji0jVhp15qMen3FWi9Bn0yKMyiBpI5FZa1+MMH5Kq9/&#xA;5audWGtaBp/lUvpegWltqvl7X4YHhfVWg9GX0TfRScbr68jyqY1RRHt1NOKrLfLXkjyzbeaLG4/R&#xA;KkeZIr/ULvSdQiEn1WFZo2tWSCYMbUqkojeJaDk1KfDsqyLUbf8ALu11608v2vlqy1HWLgo9xa2t&#xA;nbN9UtmNDc3TsFSJNjxBPJzsitQ0VXcE/wCVKcOI4f4bpxptT6hSlMVZtirsVdirsVdirsVQ2pan&#xA;pul2Mt/qd3DY2MABnu7mRYYkBIUF5HKqu5A3OKpLY/mV+XN/eQ2Vj5q0e7vLhxHb20F/aySyOxoF&#xA;RFkLMT4AYqnpvbMXi2JnjF60ZnW15r6piVgrSBK8uIZgC1KVOKoLXPNPljQEhfXtXstJS4LCBr64&#xA;ithIVoWCGVk5UqK0xVT1Dzh5S062srrUNbsLO21IBtOnuLqGKO4DAMDCzsBICGB+GvUYqmVpeWl7&#xA;bRXdnPHc2syh4Z4WWSN1PRlZSQR8sVVcVdirGPzF8w2uj+V74fp6w8v6jcwvFYX+oyKkccjfD6iq&#xA;SC7IDVQK70rir5K/Lnydp3lPz9Dr1r+YulQTaXcR+pNdRXUMF1HMv76MyyKq0ZWKkk7HfwxV9q2N&#xA;/Y39rHd2FzFd2sorFcQOskbDxV0JU4qr4q7FXYq7FXYqkXnf/lG5/wDjLa/9RMeKsE/MnyOdL1T/&#xA;ABtobzWRiZp9VezUNLbuVHLUI4h/fJxQC7t+kyAMP3iAlVlvk3zymssNM1NIbPzBHCtx6EMglt7u&#xA;2anC9sJf93W71/1kPwt2JVTzWtbsdHtoLi85+lcXVrYo0aF6S3s6W8PKn2VMkqgk4qxvzZ5u0O70&#xA;TzZo8UxF3Y6ZeGYupWNuEFJODnZvTaVFfwJpirM8VUrW0tbO3S2tIY7e3jFI4YlCIorWiqoAGKsM&#xA;1XXLvWNcu9J8lpCupRqtprnmpolkisljLMtuh2+s3C+oxEXLjEW5P14sqmWm23lHyVFaaYs/C+1m&#xA;54rJMzT31/duBzmlKhpJGoKu9OKL/Ko2VQH/AJRb/wAFv/sRxVmuKuxV2KuxV2KuxVCawAdIvgdw&#xA;beWo/wBgcVeTfk1e+al/LnySmo6VpSeVI7WOS41OS9aWeMRIz28rW8sFvHE3rqm6yyEH/ggqp6B5&#xA;yu9M/L6588pZC/8ANPmjXJdPiRuAKH9JSWFpBWWSEelDHHVUMiAsTVl5FsVTW70bzt+YHkPzL5c8&#xA;5aRFpepbPoV2noIXdR6ltO0EV3qPoMk0dG/fnkvTviqr5J81wfmMvlm6mhT1NIt/0nrNu6isGqgy&#xA;WMcXE9OLpcv4jih74qjfKJXR/wA0fNHleyjWLSJrOz1y3t46iOC4upJoblVXoolaBZOK0HLkerHF&#xA;XoOKsA1Tzdr/AJm1W78u+RHjhSxkMGt+a5UEtvaSj7VvaRn4bi5Ffir8Ef7VT8OKpt5c/LXytoU5&#xA;v0hfUddkA9fX9Rb63fuw7+tKD6Y8EjCoP5cVQvlG1ePzh5yguJ3veUliHknWLkwNoPhIiSNKf7HF&#xA;VHU/yusba6k1fyVcf4V15jzkNqv+4+6Yfs3liCsUnL+dAsg68sVRnlDzzJqd/P5d160GkebrGMS3&#xA;WncucU8JPEXdlKaerAx/2SH4XAPVVluKuxV2KuxVIvO//KNz/wDGW1/6iY8VT3FXlHmryrp/lyaM&#xA;zPJaeT5bn17LUbYhLjy9qMzAetA55cbO4dyJEI4ISeQ9NjwVTmPUzfzW3lDz4gg1X6xb3Wl6hbM8&#xA;Fnqb2UqXUTwMGqkyPErSW7Gu1V5LuFUX5h8o6HpXl3zRqdpFJ9dutLu0mmllkl2+rnmVDswUyGNW&#xA;cj7RFTvirMmZVUsxCqoqzHYADucVYLLq2qeepGtPL1zJYeUlYpe+YoSUmveJo8OmsKcY+zXQPtHv&#xA;8aqoi+1qx8upbeTPJemxXOtRwj6vpyEpa2cJ6XF9KKlEJqabySnp3YKpj5Z8mwaVdTavqFy2reZb&#xA;xAl7q8yhTwBqILaMErbwKekanfq5ZvixVLP/ACi3/gt/9iOKs1xV2KuxV2KuxV2KoTVtLtNV06fT&#xA;rz1fqtyvCb0JpraQrWtFlgeOVa9+LDbbFWL2H5QeRbCGxt7e3vjZabJFNZWEuq6pNaRvbuJIiLWW&#xA;5eAhHUEApTFVtv8Alzaqda0S9it7/wAlazLJfnT5eazW95NKJZViK0HpNJylUgqyP0qCOKrI9C8v&#xA;aXods1vYLMVYgvLdXFxeTNTZQ09y80pVf2VLUHbFVPQvKnl7QZ9Tn0iyS0m1i6e/1J1LEy3EgAZz&#xA;yLca0+ytBWppUnFUB5Q8sX2nXeqa5rMsM/mHXHia9a2DCCGG3ThBbQl/jZI+TMXYAszMaAUUKpN5&#xA;v1fVPMeut5D8uXD2vBEk8161CaPZWsoqltA4+zdXC/ZP7CfH1K4qzDQtC0nQdJtdI0i1Sz06zQR2&#xA;9vGKBQN6mu5JO7MdydzviqOxVi/lqJ/8YebLgqwjmls1QsrISYrYIxHILUV6MNjirKMVY3538lW3&#xA;maygeKY6fr2mubjQ9ZiFZbW4pSvbnE4+GWM/C67HsQqp+Q/OE+vWl1ZarbrYeaNGkFtrmnAkqkhF&#xA;UmhJ3aCdfjibw26g4qyjFXYq7FUi87/8o3P/AMZbX/qJjxVPcVWTwQXEEkE8aywSqUlicBkdGFGV&#xA;lOxBGxBxV4h+YnlHWbHTrLyi1yp8mXE7Jo2o3Ujr+jriW3lhtoLiVQzMlvcSxy2rNsSvps3L0yyq&#xA;pqHlj80fLln5vvppE13SdS0t4EN1ecr61SG2YBuTQpHMoBo32GYjkeTcmZVnMvlnzJ5qkH+L2hst&#xA;CUhh5bsZWlFxTcfX7krEZE/4ojUIf2mcbYq7UfMWo6tey+WfJBjiNmfq+q6/wD2mn8AAbeBPsT3Q&#xA;Xb0/sx9X7IyrIPLfljSfLtg1ppyNylczXl3MxkuLmd/tzXErfFJI3ie2woABiqa4qwr/AMot/wCC&#xA;3/2I4qzXFXYq7FXYq7FXYq7FXYq7FXYq7FWM+f8AzXcaBpMUWmxLd+YtXmFhoNix2kupATzfwihQ&#xA;GWU/yr4kYqr+SPKVv5X0FLBZmu76Z2utW1GT+8u72b4p53/1m+yP2VovbFUH5n/MKw0nUBoemWk2&#xA;veaJE9SPRLHjzRD9mW6lYiO2iO3xyHf9kN0xViOgax5l87apc2Fz5xXRpYBIz6ToFmwrHDKYZGj1&#xA;PUYHS5Ecw4O1tGFU7V3xVMbH8tpv0xqgh83eYoJ09D/SBeRyMxZCfiSaGSLbt8GKoyV/zW8tVmdo&#xA;PO2koKyRpHHp+rqB1KBSLO4NP2aQnwr0xVkXlXzjoHmiykutIuC7W7mG9tJVaG5tph1iuIHAeNx4&#xA;MN+1RiqQ/mDo2oWV3a+evL8DT65osZjv7KP7WoaWW5z23vJH/ewf5Y4/tHFWWaNrGm61pVpq2mTr&#xA;c6ffRJPbTp0ZHFQfb3B6YqjMVdiqQ+emCeWLliCQslsSACTtcx9AOuKqH+O7HiG/RWscWpT/AHG3&#xA;Xfp+xirZ89WYIB0rWPiNB/uOufCv8mKqF95s0bULSewvdD1S5tLiMx3NvLplw8bxuCpVlKUII7Yq&#xA;8v1n8yZPLthrPk4Wmq65p0um3R08fVJzqenwtE6AXqyAepbL0S4LcqCjBvt4qmmofmjP5r11/LJt&#xA;tX8s2KgPc2ps501u9iqAwgRFP1eA1o0qMzntw64qznS/Mug6TYW+maboOqWllbJwt7aLTLlUVQew&#xA;CeJqfHriqKHnqzJIGlax8Jof9x1z4V/kxVA6n+ZtrZGz4aBrl19buktSItOnBTmGrIQ6rVV4/F7b&#xA;4qs/8ot/4Lf/AGI4qzXFXYq7FXYq7FXYq7FXYq7FXYq07oiM7sFRQSzE0AA3JJOKvP8AyGj+a/MF&#xA;3+YV2CbBlfT/AChCw+xYK/768Cno95IlQaV9NV8Tiqt5n81a3quuyeTPJjKmpRKra9rrpzg0uGQV&#xA;UKD8Mt3Iu8cfQfafbYqsg8p+T9E8r6cbPTI2MkzerfX07GW6upz9qa4mb4pHY+PToKDbFWDflt5T&#xA;826R521e8vtNax068juvVdpbaWAXD3zSwnS0jeSWGCSJy86SqtZOJod8VZxoNtNb6xrEct1LeNW3&#xA;PqzCINT0+n7pIlp9GKp5irEfN/kM6jfR+YvL9yuj+cbRQsGpBSYrmIGv1W+jUj1oGp/rJ1QjoVUR&#xA;5J85/wCIIbm0v7Q6V5k0txDrGjyMHaJyKpLGwp6kEo3jkAofmDiqRaAD5K89TeWGPDy35laa/wDL&#xA;nULb3w/eXtivYLJvcRDb/dg8MVeh4q7FUi87/wDKNz/8ZbX/AKiY8VT3FXYqwPzn58Meor5b0S9g&#xA;s7+SRINR1q4HOCwMq8lRV+zLdunxJGfhVfjk+GgdVJte1nyD5W8ueZfKukvPqHmD6jcSaskEU17e&#xA;vLNbsfrN/OqlVLKa8pGApsu1BirKvU8k/mBp8trIpmmsJFMkEqS2eoWFxSqOFYRXFvJ/K4pUdCRi&#xA;qBXzBrvk1xb+bJW1Hy7XjbealRQ8AP2U1OOMBU8PrCLwP7YTuqzYSRSwCRCJopF5KVIZXVhUUPQg&#xA;jFXkX5VaHqfkY6dZX2kNbXXmYtHPa28KRw2K2HP02uHtXvIZJZlkp6nqKCoReIK4qyv/AMot/wCC&#xA;3/2I4qzXFXYq7FXYq7FXYq7FXYq7FXYqwP8AMu6udXn0/wAgadK0d15h5Pq88RIe20eGn1p+Q+y0&#xA;5K26Hxcntiqr5x16804af5J8npHF5j1CHhZ0QNBpthF+7e9lTpwjA4RIftvQdA2Kp95S8qaV5W0S&#xA;LStODMqs0tzdStznubiQ8pbidzu8kjbsfoGwAxVOcVdiqTaROk2va1wDj03gjbmjpUrGa8eYXkv+&#xA;UNjiqc4q7FWH+fPKF/fTWvmXy00dt5y0dSLGZ/hju7cnlJYXR7wy9j1R6MtN6qoO9Nj+Z35ftNpc&#xA;j6dq8EoltDMONxpusWLVVJk6q0Uo4uP2kJpswxVPfIvmlfM/lm11R4fqt7V7fU7EmrW17bsYrmA/&#xA;6kimniKHviqf4qkXnf8A5Ruf/jLa/wDUTHiqe4qxDX9f1TVNUl8reVpRHfxhf01rXEPHp0bioVQa&#xA;rJdyKaxxnZR8b7cVdVg+veQ9I1W9HlHya11byWrcfMeuNcPc29usyN60RiuDLHJe3Syc5DGqtXi8&#xA;jfZVlWQSfltovlTyb5sltJ7i5u9Q0u4W8vJmAmmMcUz+pNJGEaSVnlYl23pRRQDFWSeafJ66tLDq&#xA;mm3P6K8zWSkWOrRoHPAmrQXEdVE0D90Y7faUq2+KteWPNkesSXOi6tbrYeZbFB+k9JY81aNyVFxb&#xA;swHrW0n7LgbfZYK1RiqVSeXtb8nSNd+UYTfeXyxe68plgpi5GrPpcjkLHvv9XciM/sGPuqyXy95l&#xA;0bzDYm80uf1FjcxXEDq0U8Ey/ainhcLJFIvdWAOKse/8ot/4Lf8A2I4qzXFXYq7FXYq7FXYq7FXY&#xA;q7FVO4uILa3luLiRYoIUaSaVzRVRBVmYnoABiry7y95ht9N0DWvzV1uKRrrzG8a6Fp9P9IawQmPS&#xA;7OFDU+pdM5mIHeTf7OKsp/L/AMq3+l293rOvMk/mzXXW51iZN0iAFIbOA/75tk+Ff5jVju2KssxV&#xA;2KpTZea9BvtdvdCsrk3Gpacoa/WOKVooSeNI5LgL6CykMD6ZfnTelAcVb07/AI72r/8ARv8A8mzi&#xA;qa4q7FXYq8783xP5J8wnz7ZK36EvPTg86WiAtSNfgh1NFH7dv9mb+aLf9gYqu9SLyt+ZMN3Cy/4c&#xA;8+BUZ0IMUeswR8opAR8NL22WlR1eMd2xV6FiqRed/wDlG5/+Mtr/ANRMeKpf5n8xapcamvlXyuy/&#xA;puVVfUtRKiSLS7V60mkU/C88lKQxHr9pvgBqqlEEAgD+RfIrtbC3ct5k8yMRLJBJN8cv7xgRNqE/&#xA;LkeVRGDyYfYRlUbfaNruiWmmaT5ZsFt9HtNQsG9a2uS9zNE89b5ruOaNRQqzM0nrO7tuRiqU3ree&#xA;X0vzvcarDJHpsumXTWUNw0QVS0chiWIRGVl4QFVm5bGT7Ndzir03FUi81eVINciguIJ20/XLBjJp&#xA;OrxKDLBIRQqwNBJDIPhkibZh4GhCqH8q+bLq/uZtE121XS/NFkvO4slbnDcQ14rd2choZIXPUH4o&#xA;z8L70JVRN/5P0u51621+3eXTtYgKrPd2jKhuoFP+890rK6TR+HIck/YZTiqTf+UW/wDBb/7EcVZr&#xA;irsVdirsVdirsVdirsVdirAvzMeXXbvSvy+tWYHX2afXZEJBi0a1ZTcgkfZNy7Jbr7M3hiqG0GGP&#xA;zr5x/T5Rf8J+VZJLPy1CoHpXF+gMN1fBaU4QbwQdq82HbFXo2KuxV2KvKvyx8lebfL/mOdbhLu10&#xA;0R6idSnmvFubbULy5vhNa3drbiSQwMsJcS8kSpKijU5YqznQbaa31jWI5bqW8atufVmEQanp9P3S&#xA;RLT6MVTzFXYq7FVs0MU0TwzIskUilJI3AZWVhQqwOxBGKvIl8tvHa6n+Ut9cvChiOpfl/qzkl4kt&#xA;5FkjhDncy6dOE71aIr74qz7yD5ofzL5Vs9TnjFvqI5W2q2g6wX1uxiuYiDuOMqGle1Diq/zyCfLN&#xA;wAaEy21CO3+kx+OKsUjtp7SV/JPkydzfySG583+aZSJJoHnALuWK8Hvp1p6aU4xJQlQoRSqzrQ9D&#xA;0vQ9Lh0zTIRBaQA8VqWZmYlnkkdiWd3YlndiSxNTiqX63500fTLyCxWWK71B7uztbmyimj9e3W+k&#xA;EUU0sVeYQsR237Yqk/mfzVFdab530Wa2ks20rS5JVnn+FbiKe3l/exAinpq6Mla/aHTpVVm+KuxV&#xA;JPNPlOw8w20Ild7TUbJzNpWq25C3FrPSnONjsQejo1VcbMCMVS/y35rvxqI8t+aYo7PzIqs9vNEG&#xA;Wz1CFKVmtGevxLUepCTzT3WjFVC/+UW/8Fv/ALEcVZrirsVdirsVdirsVdirsVad0jRpJGCIgLO7&#xA;GgAG5JJxV4ZFqeq+YZri70yR4df/ADGka30q4pSTTvKtiSpvADXg03qNInjJKn8uKvadH0nT9H0q&#xA;00rTYVt7CxhS3tYF6LHGoVR77DriqLxV2KuxV2KpNpE6Ta9rXAOPTeCNuaOlSsZrx5heS/5Q2OKp&#xA;zirsVdirsVYv+YXla713RUm0l1g8y6RKL/QLt+iXUQP7tz/vqdCYpB/K3tirDvJHmi0Tzjb6lbxm&#xA;10jz9GzTWbmjWXmLTUMd3bSDYK8sMe+27RV/axVnPn+11G58n6ommgG+jiE9urCoZ4HWYLu0f2uF&#xA;PtDFUF5d8p+YfL+kw6Xp2paesEVWeSSwuHlllc8pJppDfVeSRiWdj1OKpn9U86f9XXTf+4dP/wBl&#xA;2KoW/wBB8yagkKX17pVylvNHcwrJpk7BJoW5RyCt99pW3BxVAv5I1gaTqGmWd3pNjDqUD21w1vpc&#xA;qNwaMxin+m0+EMadq/M4qnH1Tzp/1ddN/wC4dP8A9l2Ku+qedP8Aq66b/wBw6f8A7LsVd9U86f8A&#xA;V103/uHT/wDZdirE/wAyr3zJpGgwX08ena9qSXkC6Dpq6VO7vqRJ+rlXN4wh40JaU/ZWvyKqffoD&#xA;WP8AlWP+Hqw/pn9Cfo+tW9D6z9U9H7VOXD1O9K0xVlGKuxV2KuxV2KuxV2KuxV57+c2txRaFB5bF&#xA;z9UfzC0kd/d8uJttJtk9bU7ivtbgxr/lOuKqn5VaJJJb3PnC+tjaXmuRxR6ZYNt9R0e3BFjahf2G&#xA;KEyyAfttTtirPsVdirsVdiqS2Pm7SL7zVqPlm2Mj6hpdvBdXb8R6QW4aRERWrUuPSPLag8a1AVVd&#xA;O/472r/9G/8AybOKprirsVdirsVdirxj8z/LV1petSyacwgtPNFxDc2E5HwWXmmyAexmPTjHfrF9&#xA;Xk/yqfznFXpPlnXLPzh5NtNUiVoYdVtiJ4dw8MhBjnhNafHFIGQ+4xVFeVjqP+GdJGpyCXU1s4Fv&#xA;5AeVblY1Wbc/8WBsVTTFXYq7FXYq7FUDrmu6RoOkXWsaxdJZabZp6lzcymiotQB0qSSSAANydhiq&#xA;zTY3uXGqXAIeZKWsJ/3TC1Gof8t6Av4bL2qVUxxV2KuxV2KuxV2KuxV2KuxV4BD/AMhQ/NbUI1Pq&#xA;+XbMrBduCCjaZY3B4wAqf+ljqETs3jDAvZsVe/gACg2A6DFXYq7FXYq7FWAeVfy11TQPPF3rJ166&#xA;1DS59MhskiuvqvrtMt1c3EhkMFrBVQbnmr8+bOz8+Xw4qyPQbT6rrGsRetLPvbnnM3Nt4+laDbFU&#xA;8xV2KuxV2KuxVKvNXlvT/Mvl6+0PUAfq17GU9RNnjcHlHLGezxuA6nsQMVeVfkv5kv8ATvN2ueTN&#xA;dKxanPLJePHuqHUYgi35iBA+C6R4r1AP9+P/ACnFXqPla0msra/spphO8Wo3svMV2W8na9RDX+RL&#xA;kL9GKpzirsVdirsVdirze70HVvPPnhLjWYDB5G8tTLJpdmxVv0pqCiv1qQAn/R7etIl/ab4jttir&#xA;0jFXYqxP8xz5GGk2584NMlh637h7dr1GWXg2/KxIkWi13Jp9OKsV0G1W4ja5/K/z8up+j/e6Fq90&#xA;dVtqDohkYm/tSK9ebAfyHFWVeVfP8WqajJoGtWMmg+a4EMkmk3DB1miBp69nOtEuIvEijL+0oxVl&#xA;mKuxV2KuxV55+fPnuXyd+XV9c2RY61qZGm6PGm8hubmq8kG5rGnJxt1AHfFUT+TP5fjyT5ItLCdA&#xA;NXugtzqrA8qSmNUSEN3WCJEiXx416k4qzrFXYq7FXYq7FXYqk2kTerr2tfA6cHgT4xTlSM/Evipx&#xA;VOcVdirsVdirsVdirw7/AJyH0TU/L15pP5reX4TJfaBPB+mYE29W1Viqu3HfZJZIXP8AJJX9gYq9&#xA;J8p3elXmqX+q6Zei4tPMFtY6vDDsCBJCYBKBWtHjt4wajYjFWUYq7FXYq7FXmGq/mNqHm7Wbzyj+&#xA;XIhvJLMhdd8yTljp1oGJBgiMZ53E7UPwoVAH7YO6qpXqdr+W2n3QsvO3nu81rVF+1pMF5LbRR02C&#xA;ppukmMqoGw9QMffFXqfl39FfoKw/RHL9F+gn1Ln6vL0qfDX1v3tafz74qmGKuxVjvmb8vvKXmR0u&#xA;NRsVXUod7XVrUm2voG7NFdRFJV+XKh7g4q8/82aff6VbQ6d59nl1Py5BMsmiefbYCHUdIuRtE976&#xA;YCqB0+sKODdJVoa4qy7yV5xv59Ql8q+ZTGvmS0iE9teRUW21SyOy3tsATQ9BLH+w3T4SMVZpirsV&#xA;dirx9bA/mF+dr6hMPU8q/l1W2tVO6T65KA8zDx+rLwBr0cCnU4q9gxV2KuxV2KuxV2Kse0bzpaal&#xA;r91oUmn3unX0EAvIBexxotzbGQxetD6ckjABwAVkCOKj4cVRmnf8d7V/+jf/AJNnFU1xV2KuxV2K&#xA;uxV2KqGoWFnqNhc2F9CtxZXcTwXMDiqvHIpV1b2KmmKvEvyfgTyf57n/AC91i4f65o8d1F5XmkP+&#xA;9ml3zpeRilKlrc2soJqAKkeGKvdMVdirsVeE/nN551bXtH1PTPLWpx6VoFmxtdT1uQuBezlljktL&#xA;Rog7skXKkpQcnekSdWOKo38uPyp1Q+V7TSbo3PlnyhGvNdDtnMGp6g7gc7jVbmI84jJ/yzwsOI+E&#xA;seNMVer6D5a8v+X7JbLRNOt9OtVAHpW0axg07sVFWPud8VTLFXYq7FXYqsngguIJIJ41lglUpLE4&#xA;DI6MKMrKdiCNiDirxLzb5Qk8qPZadFdtZ+XRdCbyfrzku2gam/wpaTsa8tOua+mOX2a8D+wQq9N8&#xA;i+bv8SaQ8l1b/UNb0+VrLXNMJq1teRAc1B/ajcEPG/7SEHFWR4qxT8zPObeVPLD3VpGLjW7+WPTt&#xA;Bsupnv7o8IFp/Kp+Nv8AJBxVGeRPKVp5S8rWOhwOZpIFL3l21S9xdSkvPO5O5aSRi2/y7Yqn+Kux&#xA;V2KuxV2KuxVifl3TfN3+JdR1TX7PT4hcRGC1ubO8nuJUgjk5QwiKS1tljFHZ5H9Riz06KFAVTDQb&#xA;T6rrGsRetLPvbnnM3Nt4+laDbFU8xV2KuxV2KuxV2KuxV5h+d0VpoFvpH5nJEH1DyddIZgBVprC/&#xA;YWd1CP8AKCz80J6Ee+Ks90PzL5f13TxqOj6jb39kQGae3lSRVqoej8SeJ4mpDb4qt0vzV5Y1a4a2&#xA;0rWLLULhEMjw2tzFM4QEKWKxsx41YCvviryv8+vzk0rQtPn8t6bqax6nLEz6vPayJ9YtbaoT0Yft&#xA;cbq4ZuCbVjXlIRRcVRn5Vfl5NdppvmrzJpy6atpFGPK/lUHnFpsIWiTS8gDJcsGJqwqnIn+8Zjir&#xA;1zFXYq7FXYq7FXYq7FUJq2ladq+mXWl6lAt1YXsTQXNu4qrxuKMDirw365q35decTJeyS3J022Av&#xA;rhqs+reXI2IS6ag+O90hnpL+08Jr3xV7zb3NvcW8dzbyrLbzIskUyEMjIw5KysNiCDUHFXi/krUj&#xA;+aH5v3vmxP3vk7ySJNO8vMd0uNQmAFxdL2PGPZfYowoa4q9sxV2KuxV2KuxV2KuxV2KpNpErya9r&#xA;XOF4uDwKvMoeYEZo68Gb4T70Ptiqc4q7FXYq7FXYq7FXYqlHmzy7H5i0OXSZZBFFLNbSuzJ6gK29&#xA;xHOUKErUP6XHr379MVeVflDqY8keeta/J/Umpbxs+p+UJ36zWM9Xa3LH7bQ/FTxo/YDFXpHm/XtJ&#xA;8n6DPq6WSy3jFbXTrKBVWW6u52CwW6UHWR6V8BU9sVeT+Tfy/ufN+sx6jf3EU1jpOqLqOs6j6QkG&#xA;r63E1Jo4mJFLKwA9CKmxYE0NMVe+Yq7FXYq7FXYq7FXYq7FXYqxf8wvKEnmLR0awdLbzBpcn1zQ7&#xA;xxVUuFUgxSeMM6ExSr3U+IGKvFLrVPONv+V13o+jCODy7d3LadBZvM36WsriV/Sl8uxxBfib6weE&#xA;c3L4YCTTZTir2z8tfJNn5J8laZ5dtwpe1j5XcqCgluZDzmkHsXJ4+C0HbFWT4q7FXYq7FXYq7FXY&#xA;q7FUq07/AI72r/8ARv8A8mziqa4q7FXYq7FXYq7FXYqlfmXXE0PSW1F4TOqz20HphuJrdXEduDWh&#xA;+z6vLFXm/wDzkD5Ma807TvOunySWmreV5PVe8gXlMlmzAvKq/tm2cCbiftIHT9vFUh11PPvmrzHo&#xA;mnajNZ22uXdq36OXSZWubexsZFEd9rpkZU/ezo3oWSn7HInlWuKvWXfSvJukaHpGnWQTTzcW2lWk&#xA;KHiI1cEK5qDypxqe5O9cVZDirsVYXffm/wCRtN88yeS9WvhpuriOKW3e6pHbzCYVVUlJ4h+3FqV7&#xA;VxVmgIIqNwehxV2Koe+sIL2NY5mmRVPIGCea3atKbtC8ZI9jiqU2vlWJJ7xri6vXikmDWijUL6qR&#xA;ejGpU/vRv6qu3friqJ/wzp3+/r7/ALiF9/1WxVSk8q2TTRSLd6giR8ucQv72j1FBUmau2KoLzJH5&#xA;Z8uaHd61qt3fQ2NknOVhf3zMxJCoiL63xO7EKijqSBir541+0htdVuNfMuoW/wCYLXK3p0iJ7h7G&#xA;AyWjJDpsl3yqdV+pkyK3Pd/3Y+EgFV9HaRp/l7WNKtNV068vbiwvoUuLWZdQvqNHIoZTvNtscVRf&#xA;+GdO/wB/X3/cQvv+q2KqUXlWySSZnu9QkWVw0aG/vQI1CKvEUm3HJS2/jiqr/hnTv9/X3/cQvv8A&#xA;qtiqGuvKsTz2bW91epFHMWu1OoX1Xi9GRQo/enf1WRu3TFUT/hnTv9/X3/cQvv8Aqtirv8M6d/v6&#xA;+/7iF9/1WxVStfKtlFbRRS3eoTyRoqvM1/ehnZRQsQJqVbrtiqqfLOmkU9a+/wC4hff9VsVSHRPK&#xA;VrD5i11Wub9rYm1MCtqV+7r+6PPkzTFjU9Nziqff4Z07/f19/wBxC+/6rYqpS+VbJ5IWS71CNYnL&#xA;SIL+9IkUoy8TWbYcmDbeGKqv+GdO/wB/X3/cQvv+q2Ku/wAM6d/v6+/7iF9/1WxVDab5Vii061iv&#xA;bq9lvUhjW5lXUL7i0oUB2H71di1T0xVE/wCGdO/39ff9xC+/6rYqpL5VshcySm71AxuiKsP1+94q&#xA;ylizA+tWrcgD8sVSzzZ5Di1bRWsrO4uVnNxaTAz398Y+EF1FNJt6j/FwjPHb7VOnXFUi/Nya18ve&#xA;UnawubgazqE0VrpkdzqF76LMW9SZp6zbQx26SPKeyA4q8z/L4eTvKd5FqOnX2qXXlyWCysPMU981&#xA;1YXVm0gP6P1FFRov9x1zyKgHaPYj9oYq9p8x+RItSGlm0uLkCz1CC7mM1/fGsUXLkI/3j/Hvt0+e&#xA;KomPyDpPH9/favLKSS0g1jVI61P8qXKqPoGKrv8AAWh/8tWr/wDca1f/ALKsVeBfmR/zjN5j86fm&#xA;xNcWlw+n+V0t7ZZNUvria+ndwp5pCJ5JJWK/5TBR28MVe/8AkTyZYeTfLVroFjdXd5b2o+Ge9mae&#xA;QkgAgV+FE22RAFHh1xVkGKuxV2KuxVp3REZ3YKiglmJoABuSScVeLeZPNUmvunm9bc3eg6Zci08h&#xA;aS3TWNblJiivmH++Im5ej/kh5f5cVZnZflfp5/Lubypqc7XN5qAe61PVl2mfU5WEz3qHYh0mAaP+&#xA;UKo7Yqwv8ifMt9pms6t+XuthYb60lmuLSJQFRZVYNewxLsBExmjuoQo2SXj+xir2vFXYq7FXYq7F&#xA;XYq7FXYqk2kSvJr2tc4Xi4PAq8yh5gRmjrwZvhPvQ+2KpzirsVdirsVdirsVdiqB1vWbPRtPN/dh&#xA;zAJYISIwGblczJAmxI25yCvtirwu7r+bX5tvaLWbyloqtFM/WN7SKWk4FKiuoXcPpVqD6ELdpMVZ&#xA;/wDmpoiWscHnK2sxeDSoJLPzDpwUML3Qp/8AeuEp0dof76MezL+1iqA8pebI/KF5pnk/U55dR0XV&#xA;TF/gXXV/ercWk1ClrPIT/eW6svFv246HqGxV6liryb89tQ0fQtS8ieZ9UmkgttM1o/WZVaVkFubO&#xA;eWSsCEq7coVoeJbw6nFWfeUdX1/V9JTUNY0y30s3AWS0ggvPrrGFxVWkYQwIrHwQuP8AKxVO8Vdi&#xA;rsVdiriQoJJoBuSegGKvMb29uPzQvptJ012h/Lq0kMes6qjFG1aSM/FZ2jqQfqysKTzA/H9hduRx&#xA;VLxNqOurqfnzRvq1to/lazuLbyLDcQtLayeitLu+9GKW3PGVIzb25DjilXoQ1CqitF85/mX5h0Py&#xA;w2h3Giya1qVtBqPmFpLK7NpY2l5As8K1W85fWBzAEZb94Dy/dqPiVSP8+/L+p6LqGkfmRooX9I6f&#xA;Lbw6gQCiM6FhbStv8KOZXtZKt9iap+xir17y3r+neYdAsNc05+dlqMCXEJP2gHFSrDsyn4WHYjFU&#xA;yxV2KuxV2KuxV2KpJoPnPy3r15d2WmXTS3dkqSTwyQzQMYpSwjmj9dI/VifgeMkfJD2OKqun1/Tm&#xA;scTQ/wCj0J3FfTPyxVg/lTXfzW8wXvmO1/SuhWzaBqb6YG/RN5IJuEMUwl/46acK+tTj8XTrirP9&#xA;Bk1mTRLGTW44odYaCM6hFb19FZ+I9QR1Zzx5Vp8R+eKo/FXYq7FXYq7FXl//ADkX5msNI/Lq4sZm&#xA;b67rMiW1j6TMssbRMJ3uU9NkflAsfNKHd+K/tYqxq00HX/yj/JKXVtIS1i8wSvb3Gr22oC5ulAuZ&#xA;UtobWORLiB4/qkUiIGBavA7b1CrIPLekeaYfOcEegalHf6DaW4tvMuoahPrV7HJdCSs0FhHd6ncw&#xA;c6JxZireiajk55IFUjX8sPLNv5qufJWty6glhes+q+QrpNRvkhtJYlPq20Ft631ZZrNm9WE+mao3&#xA;fi2Ks48n+cNWttWHkzzmUj8zRoz6dqKL6dtq1tH1ngHRJkH99D+z9paqdlUx86eQLPzZdaRPeale&#xA;2a6NcfW7e3tRamKSbg0dZluILgsPTd141AoxqK0oqwPXZrr8m9E06003X1k8tu8gkj1uEXL2MRkX&#xA;95b/AFP6m7QpJOqtEebbrwoAcVexo6uiupqrAFT7HFW8VdirGfMf5keTfL8otb3UUl1Rzxh0izBu&#xA;r+V+ypawh5TU7VK08TirH5NF83+fmP8AiSKTy75Nb/pnkkH6Qv1Pa/miJWGFh1hiYsf2m/ZxV3mu&#xA;X9O36fll5aAs7CGGI+abu1pGtlpzCiWUPGgSe6UcV/kjq38uKsl806fLbeRNR0vQtMa6cWD2On6Z&#xA;amGLZ4/RRVM8kMSrGGqat9kbVNAVXkXlnyZ+ZnkPQvLeoeTdCvHvXjgtvN/lC7vLE2krwQLHLfW8&#xA;zXTiGWRl+HhUMPtqvGhVe13Njb+YfLktjrFg8Fvqls0N9p05jaRFmQq8bNC8sfIV6oxHgcVePfkP&#xA;q1/5W81a9+VeuSlrmzke90mVthKjUabh2/eq6XAA/aaQfs4q90xV2KuxV2KuxVL9Yh8wSpD+hry1&#xA;tGV63P1u1kuw8f8ALGI7i04N/lEsPbFWOeVk1m+81arrOseX7zSbiaBLO1muJbJ4xaQSM0cafVbm&#xA;4kMkjSvI7MqhfhUV48iqm2h2cVlq2sRQmWRa27fvppJ3J9I7B5mdvorTFWL/AJWWfmiz1zzfJrPl&#xA;670m21rVZNVsbieaxlX02hggETrbXM7rJ+6LdONP2q4q9FxV2KuxV2KuxV2KvAtKf/lan54XV8f3&#xA;vlLyYVjt26pPcRy8kp2IkuIjK1Oqwxfzbqs//PHRtf138ur/AEPQtKl1a/1CS3VYo5beFUWG4jnd&#xA;pHuJYdisRUceRqRtTcKsa0nSvzE8i69YweU9A1HVvId9D615oN3d6eJ9Jldv7q0mluzzA3LRFyn8&#xA;sm5oqyPVNU8ifmXZ3uhaJ5gs5db0qVLzTLyyube4mt7mBY5Ir2FY3ctGjziNyRQ/Eh64q7S5NK/M&#xA;by9daF5qs/qnmTRZli1W2hdo5rS8T4obyymFHVJAPUhkHb4TX4hiqyPzF5z8lAWvmq1n8w6BEKQ+&#xA;adOi9S5jQf8AVwso6vVR1mgVgepVcVZdoHmzyx5it/rGhara6lEBVjbSpIV9nVTyQ+zAHFU1xV2K&#xA;pT5j8qeXfMtrHaa7Yx39tE/qRxScuIehWvwkdiRireg+U/K/l6IxaFpFnpaMKOLOCOHl/rFFUt07&#xA;4qx3zd501KXUm8o+SxHd+apFU3l2452ulQPX/SLojYyEA+lDXkx3NFxVPPJ/lLTvK+jLp1mzzSyO&#xA;1xqF9MeU93dS7zXEzd3kb6AKAbAYqneKuxVBWWiaLY3t5fWVhbWt7qLK+oXUMMcctw0dQhmdQGkK&#xA;8jTkTSuKvHv+citA1HS59E/M/QUpq3lyeOO9A2ElszkR8yP2Q8jRN/kSse2KvXfLmvWHmDQdP1vT&#xA;2LWeowJcQ8tmAkWvFh2ZTsw7HFUxxV2KuxV2KuxV2KpNpErya9rXOF4uDwKvMoeYEZo68Gb4T70P&#xA;tiqc4q7FXYq7FXYq7FXmv5/+f5fKHkG4Fg7DXtab9HaQke8gklFJJUA3rGlSv+XxHfFU0/J7yBF5&#xA;H8jWWksijUZv9K1Rl3BuZFAKA91iRViU+CjFWbYq7FVG3s7a3luZYU4yXcgmuGqTykEaRA7nb4Il&#xA;G3hirFPO/lDU7u8t/NHlaaOz836bGYoWl/3nvrUnm1jd039Nm3RusbfEO9VUf5M876b5ntJQkcmn&#xA;6zYkRavolz8N1aTUrxdf2kbqki/C67jFWtc/LfyDrtwbrVvL9hd3hPI3jQILiv8AxmUCT/hsVTvT&#xA;tPstNsYLCyiEFnaosUEK1IVFFABWp2xVEYqlPmPVda061ik0jRJtcuJJAjQQz29v6a0JMjvcPGKb&#xA;UotT7YqxiXTvzV8y/utQurbydpL1EsOmSG+1R16FfrckcUFvXxSN2HZh1xVlHlryvoXlrTF03RbR&#xA;bW2DGSQgl5JZW+1LNI5Z5JGpu7kk4qmuKuxV2KuxVDanptjqmnXWm38K3FjexPb3UD/ZeKRSrqfm&#xA;DirxL8gtTv8Ayj5s8yflBrczSS6XM+oeXbiTrNZTtzYDtX4xJQdy/wDLir3bFXYq7FXYq7FWN6D5&#xA;1t9a8169oNvbMsWhxWkn14sOM7XT3EbhEpULE9oV5E/Ea7UALKo/Tv8Ajvav/wBG/wDybOKprirs&#xA;VdirsVdirsVeAaKrfml+f11rMg9Xyn5AP1bTwd45b4OfjHY/vUL1HaOP+bFXv+KuxV2KuxV2KsZ8&#xA;1+QdJ1+6g1OOabSfMVkpWx12wYR3Uanf035BkmiJ6xSqy/LFUqi1H83tG/cXukWHmqBRRNQsLgad&#xA;csB0MtpchoeR7lJ6e2Ksz065ubmxguLm0exuJUV5bOVo3eJiN0ZomkjJHirEYqiMVdirsVdirsVd&#xA;irsVdirsVeI/85G+X9T0qTQ/zX8vRctZ8oTL9fRdjNp0jUdWpuVUuwNP2XY9sVeveXtd07X9CsNb&#xA;02T1bDUYEubd+/GReVGHZh0I7HFUwxV2KuxVL9Z0Kx1dIUu5buJYH9RDZ3t3YknpR2tJYS6/5LVH&#xA;tirG/KX5WaL5X8yahq+m3N39WvLG0sLfT5ru9nWBLVpSTynuJuYIlUICv7qh4fbbFU40Gyhs9Y1i&#xA;KJpWWtu1ZppZ2qY/55Wdqe1cVTzFXYq7FXYq7FXnH59/mDN5N8g3DacS3mHWGGm6HDHvIbif4TIg&#xA;G9Y1qw/yuI74qmf5Pfl7b+QvIWnaEADf8frGrTA19S8lAMpr3CUCL/kqMVZpirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdiqjfWVpf2VxY3kSz2l1G8FxC+6vHIpV1b2ZTTFXiX5F3t15I8367&#xA;+TmrSs6WDPqfla5k29axmPJox2qpblQftc/DFXueKuxV2KuxV2KpNpDzNr2tepH6fF4FT4g3JRGa&#xA;Nt0r4YqnOKuxV2KuxV2KvBPLkY/NP8973zPKPW8oeQCbHRCd4ptSrWSZex4MOVR2EZxV73irsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirx//AJyH8r6ounab+Y3lxaeZvJUn1sBRvPYk&#xA;/wCkxPTcqq1Y/wCTz8cVek+UfM+meafLWneYdLfnY6lCs0Veqk7PG1P2kcFW9xiqb4q7FXYqw3yV&#xA;+ZNj5v1nVrbSltm0vTGMQufrcbXcsiuULmyRWeKAlG4SSOC9KheO+Kp7p3/He1f/AKN/+TZxVNcV&#xA;dirsVdirzH8/vPV75d8oJo+iAy+a/NUo0rRIIzSQNNRJJl/4xhgAezMuKsk/LDyJY+RfJGmeXLWj&#xA;PbR8r2cf7tuZPimk8aFtlr0Wg7YqyrFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;WnRJEaORQ6OCrowqCDsQQcVeG/lw7/lf+aWo/lreMU8seYmfVfJs7n4UkP8Af2XI13FPhFewPWTF&#xA;XueKuxVL9X0Oy1ZYFupLuMW8nqx/U7y6siWHZzaywmRf8l6r7YqxfyX+WQ8t6ml09+l3b2VlNpek&#xA;QJb+g8VnNc/WSlxJ6knrupVVVgqUFdqsTiqeaDY2tlrGsQ2yenHW3bjUtuY/8onFU8xV2KuxVZNN&#xA;FBDJNM6xwxKXkkYgKqqKliT0AGKvEPyvgl/Mr8zNS/NS+Rj5f0kvpXkqFwQGVarPd8TTdqkD/WI6&#xA;oMVe5Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqwD86Py6l86eVB+jH+re&#xA;aNGlGo+XL5SFeO7howTl2WTjTwB4t+ziqJ/KH8xYvPXk+DUZU+ra3ZsbPXdPIKvBew/DICh3VX+0&#xA;tegNOoOKs2xV2KuxVJtIeZte1r1I/T4vAqfEG5KIzRtulfDFU5xV2KuxV43+eWv6pr+pad+UfliY&#xA;prHmIerrt2m4s9KU/vWcjoZaUp3G37QxV6n5d0DS/L2h2OiaVCINP0+FYLeMdeKjqx7sx3Y9zviq&#xA;Y4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXh/5h2d3+Vvn5PzQ0iF38&#xA;rawyWnnqwhBPAs3GK/VBX4gzfF7/AOuSFXtVje2d/ZQX1lMlxZ3UazW88ZDI8cgDI6kdQwNRiqti&#xA;rCPIf5j3PmrVdRs20kWUNlzpMtx67o6XEkBgvIzFF9XuCIvUEYZ/gIPLFWRad/x3tX/6N/8Ak2cV&#xA;TXFXYqxb8yvzA0nyJ5Uute1D95Iv7qws1P7y5unB9KFB13O5PZanFWN/kn5A1fR7S/8AN3mz9955&#xA;80uLnVXYb20J3is0qTxEYpyA70XfiDir03FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FVC/sLPULG4sL6FLizuo2hubeQckeNxxZWB6gg4q8R8tanefkt5nj8m+YJ3k/Lr&#xA;WJmPlXXJ2qtjM5LNY3LfsqTurGg/a6cuCr2XVtEsdXSAXMt1GsDiWM2d5dWRJ/yzayw+ov8AkvVf&#xA;bFWLeSfy0m8t65e6pPqiX31qBrYolt9XkmVp2nE19J6sv1mdeZRZOKfDWoOKp7oNhY2OsaxDZW0V&#xA;rCTbt6UKLGvIx7nioArtiqeYqgNd13SNA0i61jWLpLLTbJDJcXEhoqqPxJJ2AG5Ow3xV5B5E0XV/&#xA;zR83W/5mearR7Ty3ppI8j6DP1IND+kJ03Xk9AU+QI2VWZV7dirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdiqU+avKuheatCutD1y1W7067XjJG3UH9l0bqrqd1YdMV&#xA;eQWPmHzj+SkqaR5rW58wflqpEeleZYkMt1p0ZNEgvUUVZF6Bh/seyKq9l0HzFoXmDTY9T0S/g1Gw&#xA;l+xcW7h1r/KafZYd1O4xVDaQ1wde1r1kRKPAI+Dl6p6ZozVVOLHw3+eKpd58/M/yV5GsTc+YNQSK&#xA;Zh/o+nxUku5z2WKEHkanbkaKO5GKvO9M8m+b/wA2dVtvMP5iWraT5MtH9fRPJbEiSZx9i41Doeh2&#xA;jPyoBXmq9tRERFRFCooAVQKAAbAADFW8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdiq2WKKWJ4pUWSKRSskbAMrKwoQQdiCMVeW6v8A845eSZNRl1Xyxd6j5N1S&#xA;Xd59CuWtomINfih+JOP+SnEYqgU/Irzq8031r809da3n4iQW6pbzlV2UGZWY147VpirJPJX5Hfl5&#xA;5Svv0pZ2T6hrleTa1qchu7stSnIM9ERvdFBxVn2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv&#xA;/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2012-05-20T20:36:43+01:00</xmp:MetadataDate>
         <xmp:ModifyDate>2012-05-20T20:36:43+01:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>210.001652</stDim:w>
            <stDim:h>297.000132</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPSMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.07</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>times.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>SymbolMT</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.00</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>symbol.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:DD783E4FAEA2E1119E5E984C666A8987</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:DD783E4FAEA2E1119E5E984C666A8987</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:DD783E4FAEA2E1119E5E984C666A8987</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:DD783E4FAEA2E1119E5E984C666A8987</stEvt:instanceID>
                  <stEvt:when>2012-05-20T20:36:43+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
%  &&end XMP packet marker&&
[{ai_metadata_stream_123}
<</Type /Metadata /Subtype /XML>>
/PUT AI11_PDFMark5
[/Document
1 dict begin /Metadata {ai_metadata_stream_123} def
currentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -577.679 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 577.679 li
563.035 577.679 li
563.035 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 22.6787 mo
555 22.6787 li
555 577.679 li
0 577.679 li
0 22.6787 li
0 22.6787 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
gsave
8.3252 569.354 mo
548.059 569.354 li
548.059 29.6201 li
8.3252 29.6201 li
8.3252 569.354 li
cp
clp
2.775 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
11.1001 219.12 mo
12.1655 219.134 li
13.231 219.174 li
14.2969 219.242 li
15.3623 219.338 li
16.4277 219.46 li
17.4937 219.609 li
18.5591 219.786 li
19.6245 219.99 li
20.6904 220.22 li
21.7559 220.478 li
22.8213 220.763 li
23.8872 221.073 li
24.9526 221.412 li
26.0181 221.778 li
27.084 222.169 li
28.1494 222.588 li
29.2148 223.034 li
30.2808 223.506 li
31.3462 224.005 li
32.4116 224.53 li
33.4775 225.081 li
34.543 225.658 li
35.6084 226.261 li
36.6743 226.891 li
37.7397 227.547 li
38.8052 228.229 li
39.8711 228.935 li
40.9365 229.667 li
42.002 230.427 li
43.0679 231.209 li
44.1333 232.018 li
45.1987 232.852 li
46.2646 233.711 li
47.3301 234.595 li
48.3955 235.502 li
49.4614 236.436 li
50.5269 237.392 li
51.5923 238.373 li
52.6582 239.379 li
53.7236 240.408 li
54.7891 241.46 li
55.855 242.537 li
56.9204 243.637 li
57.9858 244.759 li
59.0518 245.904 li
60.1172 247.072 li
61.1826 248.264 li
62.2485 249.477 li
63.314 250.712 li
64.3794 251.969 li
65.4453 253.247 li
66.5107 254.547 li
67.5762 255.868 li
68.6421 257.209 li
69.7075 258.572 li
70.7729 259.955 li
71.8389 261.358 li
72.9043 262.78 li
73.9702 264.222 li
75.0356 265.682 li
76.1011 267.161 li
77.1665 268.658 li
78.2324 270.173 li
79.2979 271.705 li
80.3633 273.254 li
81.4292 274.818 li
82.4946 276.398 li
83.5601 277.993 li
84.626 279.601 li
85.6914 281.222 li
86.7568 282.852 li
87.8228 284.492 li
88.8882 286.138 li
89.9536 287.784 li
91.0195 289.431 li
92.085 291.069 li
93.1509 292.685 li
94.2163 294.267 li
95.2817 295.785 li
96.3472 297.197 li
97.4131 298.424 li
98.4785 299.348 li
99.5439 299.813 li
100.61 299.72 li
101.675 299.11 li
102.741 298.128 li
103.807 296.902 li
104.872 295.522 li
105.938 294.042 li
107.003 292.492 li
108.069 290.893 li
109.134 289.255 li
110.2 287.587 li
111.266 285.896 li
112.332 284.183 li
113.397 282.452 li
114.462 280.706 li
115.528 278.945 li
116.594 277.17 li
117.659 275.386 li
118.725 273.589 li
119.791 271.784 li
120.856 269.968 li
121.921 268.145 li
122.987 266.313 li
124.053 264.473 li
125.118 262.627 li
126.184 260.774 li
127.25 258.654 li
128.315 256.349 li
129.381 254.039 li
130.446 251.722 li
131.512 249.4 li
132.578 247.075 li
133.643 244.744 li
134.708 242.409 li
135.774 240.071 li
136.84 237.729 li
137.905 235.384 li
140.037 230.688 li
149.626 209.513 li
151.758 204.817 li
152.823 202.473 li
153.889 200.13 li
154.955 197.792 li
156.02 195.458 li
157.086 193.128 li
158.151 190.801 li
159.217 188.479 li
160.283 186.163 li
161.348 183.853 li
162.414 181.546 li
163.479 179.249 li
164.545 176.955 li
165.611 174.67 li
166.676 172.393 li
167.742 170.122 li
168.808 167.86 li
169.873 165.606 li
170.938 163.361 li
172.004 161.125 li
173.07 158.898 li
174.135 156.682 li
175.201 154.475 li
176.267 152.279 li
177.332 150.094 li
178.398 147.92 li
179.463 145.758 li
180.529 143.607 li
181.595 141.469 li
182.66 139.343 li
183.726 137.23 li
184.792 135.131 li
185.857 133.045 li
186.922 130.973 li
187.988 128.916 li
189.054 126.872 li
190.12 124.844 li
191.185 122.831 li
192.25 120.833 li
193.316 118.852 li
194.382 116.886 li
195.447 114.938 li
196.513 113.005 li
197.579 111.09 li
198.644 109.192 li
199.71 107.312 li
200.775 105.45 li
201.841 103.606 li
202.907 101.781 li
203.972 99.9751 li
205.038 98.188 li
206.104 96.4199 li
207.169 94.6719 li
208.234 92.9438 li
209.3 91.2363 li
210.366 89.5488 li
211.432 87.8828 li
212.497 86.2373 li
213.563 84.6133 li
214.628 83.0107 li
215.694 81.4307 li
216.759 79.8721 li
217.825 78.3359 li
218.891 76.8223 li
219.956 75.3315 li
221.022 73.8633 li
222.087 72.4189 li
223.153 70.998 li
224.219 69.6011 li
225.284 68.2275 li
226.35 66.8789 li
227.414 65.5542 li
228.479 64.2539 li
229.545 62.9785 li
230.611 61.7285 li
231.676 60.5034 li
232.742 59.3037 li
233.808 58.1294 li
234.873 56.981 li
235.939 55.8589 li
237.004 54.7627 li
238.07 53.6924 li
239.136 52.6489 li
240.201 51.6323 li
241.267 50.6421 li
242.333 49.6792 li
243.398 48.7432 li
244.463 47.8345 li
245.529 46.9531 li
246.595 46.0991 li
247.661 45.2729 li
248.726 44.4746 li
249.792 43.7041 li
250.857 42.9619 li
251.923 42.248 li
252.988 41.562 li
254.054 40.9043 li
255.12 40.2754 li
256.185 39.6748 li
257.251 39.103 li
258.316 38.5601 li
259.382 38.0459 li
260.448 37.5605 li
261.513 37.1045 li
262.579 36.6777 li
263.645 36.2798 li
264.71 35.9111 li
265.776 35.5713 li
266.841 35.2617 li
267.907 34.981 li
268.973 34.7295 li
270.038 34.5078 li
271.104 34.3154 li
272.169 34.1528 li
273.235 34.0195 li
274.3 33.916 li
275.366 33.8418 li
276.432 33.7974 li
277.497 33.7827 li
278.563 33.7974 li
279.629 33.8418 li
280.693 33.916 li
281.76 34.0195 li
282.826 34.1528 li
283.891 34.3154 li
284.957 34.5078 li
286.021 34.7295 li
287.088 34.981 li
288.152 35.2617 li
289.219 35.5713 li
290.285 35.9111 li
291.35 36.2798 li
292.416 36.6777 li
293.48 37.1045 li
294.547 37.5605 li
295.613 38.0459 li
296.678 38.5601 li
297.744 39.103 li
298.809 39.6748 li
299.875 40.2754 li
300.939 40.9043 li
302.006 41.562 li
303.072 42.248 li
304.137 42.9619 li
305.203 43.7041 li
306.268 44.4746 li
307.334 45.2729 li
308.4 46.0991 li
309.465 46.9531 li
310.531 47.8345 li
311.596 48.7432 li
312.662 49.6792 li
313.729 50.6421 li
314.793 51.6323 li
315.859 52.6489 li
316.924 53.6924 li
317.99 54.7627 li
319.055 55.8589 li
320.121 56.981 li
321.188 58.1294 li
322.252 59.3037 li
323.318 60.5034 li
324.383 61.7285 li
325.449 62.9785 li
326.516 64.2539 li
327.58 65.5542 li
328.646 66.8789 li
329.711 68.2275 li
330.777 69.6011 li
331.844 70.998 li
332.908 72.4189 li
333.975 73.8633 li
335.039 75.3315 li
336.105 76.8223 li
337.17 78.3359 li
338.236 79.8721 li
339.303 81.4307 li
340.367 83.0107 li
341.434 84.6133 li
342.498 86.2373 li
343.564 87.8828 li
344.631 89.5488 li
345.695 91.2363 li
346.762 92.9438 li
347.826 94.6719 li
348.893 96.4199 li
349.959 98.188 li
351.023 99.9751 li
352.09 101.781 li
353.154 103.606 li
354.221 105.45 li
355.285 107.312 li
356.352 109.192 li
357.418 111.09 li
358.482 113.005 li
359.549 114.938 li
360.613 116.886 li
361.68 118.852 li
362.746 120.833 li
363.811 122.831 li
364.877 124.844 li
365.941 126.872 li
367.008 128.916 li
368.074 130.973 li
369.139 133.045 li
370.205 135.131 li
371.27 137.23 li
372.336 139.343 li
373.4 141.469 li
374.467 143.607 li
375.533 145.758 li
376.598 147.92 li
377.664 150.094 li
378.729 152.279 li
379.795 154.475 li
380.861 156.682 li
381.926 158.898 li
382.992 161.125 li
384.057 163.361 li
385.123 165.606 li
386.188 167.86 li
387.254 170.122 li
388.32 172.393 li
389.385 174.67 li
390.451 176.955 li
391.516 179.249 li
392.582 181.546 li
393.648 183.853 li
394.713 186.163 li
395.779 188.479 li
396.844 190.801 li
397.91 193.128 li
398.977 195.458 li
400.041 197.792 li
401.107 200.13 li
402.172 202.473 li
403.238 204.817 li
405.369 209.513 li
414.959 230.688 li
417.09 235.384 li
418.156 237.729 li
419.223 240.071 li
420.287 242.409 li
421.354 244.744 li
422.418 247.075 li
423.484 249.4 li
424.551 251.722 li
425.615 254.039 li
426.682 256.349 li
427.746 258.654 li
428.813 260.774 li
429.879 262.627 li
430.943 264.473 li
432.01 266.313 li
433.074 268.145 li
434.141 269.968 li
435.205 271.784 li
436.27 273.589 li
437.336 275.386 li
438.402 277.17 li
439.467 278.945 li
440.533 280.706 li
441.598 282.452 li
442.664 284.183 li
443.729 285.896 li
444.795 287.587 li
445.861 289.255 li
446.926 290.893 li
447.992 292.492 li
449.057 294.042 li
450.123 295.522 li
451.189 296.902 li
452.254 298.128 li
453.32 299.11 li
454.385 299.72 li
455.451 299.813 li
456.518 299.348 li
457.582 298.424 li
458.648 297.197 li
459.713 295.785 li
460.779 294.267 li
461.844 292.685 li
462.91 291.069 li
463.977 289.431 li
465.041 287.784 li
466.107 286.138 li
467.172 284.492 li
468.238 282.852 li
469.305 281.222 li
470.369 279.601 li
471.436 277.993 li
472.5 276.398 li
473.566 274.818 li
474.633 273.254 li
475.697 271.705 li
476.764 270.173 li
477.828 268.658 li
478.895 267.161 li
479.959 265.682 li
481.025 264.222 li
482.092 262.78 li
483.156 261.358 li
484.223 259.955 li
485.287 258.572 li
486.354 257.209 li
487.42 255.868 li
488.484 254.547 li
489.551 253.247 li
490.615 251.969 li
491.682 250.712 li
492.746 249.477 li
493.813 248.264 li
494.879 247.072 li
495.943 245.904 li
497.01 244.759 li
498.074 243.637 li
499.141 242.537 li
500.207 241.46 li
501.271 240.408 li
502.338 239.379 li
503.402 238.373 li
504.469 237.392 li
505.535 236.436 li
506.6 235.502 li
507.666 234.595 li
508.73 233.711 li
509.797 232.852 li
510.861 232.018 li
511.928 231.209 li
512.994 230.427 li
514.059 229.667 li
515.125 228.935 li
516.189 228.229 li
517.256 227.547 li
518.322 226.891 li
519.387 226.261 li
520.453 225.658 li
521.518 225.081 li
522.584 224.53 li
523.648 224.005 li
524.715 223.506 li
525.781 223.034 li
526.846 222.588 li
527.912 222.169 li
528.977 221.778 li
530.043 221.412 li
531.109 221.073 li
532.174 220.763 li
533.24 220.478 li
534.305 220.22 li
535.371 219.99 li
536.438 219.786 li
537.502 219.609 li
538.568 219.46 li
539.633 219.338 li
540.699 219.242 li
541.764 219.174 li
542.83 219.134 li
543.896 219.12 li
11.1001 232.026 mo
12.1655 232.039 li
13.231 232.079 li
14.2969 232.145 li
15.3623 232.237 li
16.4277 232.355 li
17.4937 232.501 li
18.5591 232.671 li
19.6245 232.869 li
20.6904 233.092 li
21.7559 233.342 li
22.8213 233.618 li
23.8872 233.92 li
24.9526 234.249 li
26.0181 234.603 li
27.084 234.983 li
28.1494 235.388 li
29.2148 235.82 li
30.2808 236.278 li
31.3462 236.761 li
32.4116 237.27 li
33.4775 237.804 li
34.543 238.364 li
35.6084 238.949 li
36.6743 239.559 li
37.7397 240.194 li
38.8052 240.855 li
39.8711 241.541 li
40.9365 242.251 li
42.002 242.986 li
43.0679 243.745 li
44.1333 244.529 li
45.1987 245.338 li
46.2646 246.17 li
47.3301 247.026 li
48.3955 247.908 li
49.4614 248.811 li
50.5269 249.739 li
51.5923 250.691 li
52.6582 251.665 li
53.7236 252.663 li
54.7891 253.684 li
55.855 254.727 li
56.9204 255.794 li
57.9858 256.882 li
59.0518 257.993 li
60.1172 259.127 li
61.1826 260.281 li
62.2485 261.458 li
63.314 262.657 li
64.3794 263.875 li
65.4453 265.115 li
66.5107 266.376 li
67.5762 267.659 li
68.6421 268.96 li
69.7075 270.283 li
70.7729 271.624 li
71.8389 272.987 li
72.9043 274.367 li
73.9702 275.766 li
75.0356 277.186 li
76.1011 278.622 li
77.1665 280.076 li
78.2324 281.548 li
79.2979 283.037 li
80.3633 284.543 li
81.4292 286.065 li
82.4946 287.603 li
83.5601 289.155 li
84.626 290.72 li
85.6914 292.301 li
86.7568 293.892 li
87.8228 295.493 li
88.8882 297.103 li
89.9536 298.719 li
91.0195 300.337 li
92.085 301.951 li
93.1509 303.552 li
94.2163 305.127 li
95.2817 306.654 li
96.3472 308.089 li
97.4131 309.354 li
98.4785 310.298 li
99.5439 310.616 li
100.61 310.343 li
101.675 309.334 li
102.741 307.891 li
103.807 306.198 li
104.872 304.361 li
105.938 302.433 li
107.003 300.441 li
108.069 298.406 li
109.134 296.335 li
110.2 294.239 li
111.266 292.118 li
112.332 289.977 li
113.397 287.818 li
114.462 285.644 li
115.528 283.454 li
116.594 281.25 li
117.659 279.036 li
118.725 276.809 li
119.791 274.571 li
120.856 272.324 li
121.921 270.066 li
122.987 267.799 li
124.053 265.525 li
125.118 263.241 li
126.184 260.952 li
127.25 258.915 li
128.315 257.05 li
129.381 255.18 li
130.446 253.305 li
131.512 251.425 li
132.578 249.542 li
133.643 247.654 li
134.708 245.763 li
135.774 243.869 li
136.84 241.971 li
137.905 240.071 li
140.037 236.265 li
149.626 219.102 li
151.758 215.294 li
152.823 213.394 li
153.889 211.496 li
154.955 209.6 li
156.02 207.706 li
157.086 205.816 li
158.151 203.931 li
159.217 202.048 li
160.283 200.169 li
161.348 198.295 li
162.414 196.426 li
163.479 194.561 li
164.545 192.703 li
165.611 190.85 li
166.676 189.001 li
167.742 187.16 li
168.808 185.326 li
169.873 183.497 li
170.938 181.677 li
172.004 179.863 li
173.07 178.058 li
174.135 176.26 li
175.201 174.47 li
176.267 172.688 li
177.332 170.917 li
178.398 169.153 li
179.463 167.4 li
180.529 165.656 li
181.595 163.921 li
182.66 162.197 li
183.726 160.483 li
184.792 158.781 li
185.857 157.089 li
186.922 155.408 li
187.988 153.739 li
189.054 152.082 li
190.12 150.437 li
191.185 148.804 li
192.25 147.184 li
193.316 145.576 li
194.382 143.981 li
195.447 142.401 li
196.513 140.833 li
197.579 139.28 li
198.644 137.741 li
199.71 136.216 li
200.775 134.705 li
201.841 133.209 li
202.907 131.729 li
203.972 130.264 li
205.038 128.814 li
206.104 127.38 li
207.169 125.962 li
208.234 124.561 li
209.3 123.175 li
210.366 121.807 li
211.432 120.455 li
212.497 119.12 li
213.563 117.803 li
214.628 116.503 li
215.694 115.221 li
216.759 113.956 li
217.825 112.71 li
218.891 111.482 li
219.956 110.273 li
221.022 109.083 li
222.087 107.911 li
223.153 106.758 li
224.219 105.625 li
225.284 104.511 li
226.35 103.416 li
227.414 102.341 li
228.479 101.287 li
229.545 100.252 li
230.611 99.2383 li
231.676 98.2441 li
232.742 97.271 li
233.808 96.3184 li
234.873 95.3872 li
235.939 94.4766 li
237.004 93.5869 li
238.07 92.7192 li
239.136 91.8726 li
240.201 91.0479 li
241.267 90.2446 li
242.333 89.4634 li
243.398 88.7041 li
244.463 87.9668 li
245.529 87.252 li
246.595 86.5591 li
247.661 85.8892 li
248.726 85.2412 li
249.792 84.6162 li
250.857 84.0142 li
251.923 83.4346 li
252.988 82.8784 li
254.054 82.3447 li
255.12 81.8345 li
256.185 81.3477 li
257.251 80.8838 li
258.316 80.4434 li
259.382 80.0264 li
260.448 79.6323 li
261.513 79.2627 li
262.579 78.916 li
263.645 78.5933 li
264.71 78.2939 li
265.776 78.0186 li
266.841 77.7671 li
267.907 77.5396 li
268.973 77.3354 li
270.038 77.1558 li
271.104 77 li
272.169 76.8677 li
273.235 76.7598 li
274.3 76.6758 li
275.366 76.6157 li
276.432 76.5796 li
277.497 76.5674 li
278.563 76.5796 li
279.629 76.6157 li
280.693 76.6758 li
281.76 76.7598 li
282.826 76.8677 li
283.891 77 li
284.957 77.1558 li
286.021 77.3354 li
287.088 77.5396 li
288.152 77.7671 li
289.219 78.0186 li
290.285 78.2939 li
291.35 78.5933 li
292.416 78.916 li
293.48 79.2627 li
294.547 79.6323 li
295.613 80.0264 li
296.678 80.4434 li
297.744 80.8838 li
298.809 81.3477 li
299.875 81.8345 li
300.939 82.3447 li
302.006 82.8784 li
303.072 83.4346 li
304.137 84.0142 li
305.203 84.6162 li
306.268 85.2412 li
307.334 85.8892 li
308.4 86.5591 li
309.465 87.252 li
310.531 87.9668 li
311.596 88.7041 li
312.662 89.4634 li
313.729 90.2446 li
314.793 91.0479 li
315.859 91.8726 li
316.924 92.7192 li
317.99 93.5869 li
319.055 94.4766 li
320.121 95.3872 li
321.188 96.3184 li
322.252 97.271 li
323.318 98.2441 li
324.383 99.2383 li
325.449 100.252 li
326.516 101.287 li
327.58 102.341 li
328.646 103.416 li
329.711 104.511 li
330.777 105.625 li
331.844 106.758 li
332.908 107.911 li
333.975 109.083 li
335.039 110.273 li
336.105 111.482 li
337.17 112.71 li
338.236 113.956 li
339.303 115.221 li
340.367 116.503 li
341.434 117.803 li
342.498 119.12 li
343.564 120.455 li
344.631 121.807 li
345.695 123.175 li
346.762 124.561 li
347.826 125.962 li
348.893 127.38 li
349.959 128.814 li
351.023 130.264 li
352.09 131.729 li
353.154 133.209 li
354.221 134.705 li
355.285 136.216 li
356.352 137.741 li
357.418 139.28 li
358.482 140.833 li
359.549 142.401 li
360.613 143.981 li
361.68 145.576 li
362.746 147.184 li
363.811 148.804 li
364.877 150.437 li
365.941 152.082 li
367.008 153.739 li
368.074 155.408 li
369.139 157.089 li
370.205 158.781 li
371.27 160.483 li
372.336 162.197 li
373.4 163.921 li
374.467 165.656 li
375.533 167.4 li
376.598 169.153 li
377.664 170.917 li
378.729 172.688 li
379.795 174.47 li
380.861 176.26 li
381.926 178.058 li
382.992 179.863 li
384.057 181.677 li
385.123 183.497 li
386.188 185.326 li
387.254 187.16 li
388.32 189.001 li
389.385 190.85 li
390.451 192.703 li
391.516 194.561 li
392.582 196.426 li
393.648 198.295 li
394.713 200.169 li
395.779 202.048 li
396.844 203.931 li
397.91 205.816 li
398.977 207.706 li
400.041 209.6 li
401.107 211.496 li
402.172 213.394 li
403.238 215.294 li
405.369 219.102 li
413.895 234.36 li
416.025 238.169 li
417.09 240.071 li
418.156 241.971 li
419.223 243.869 li
420.287 245.763 li
421.354 247.654 li
422.418 249.542 li
423.484 251.425 li
424.551 253.305 li
425.615 255.18 li
426.682 257.05 li
427.746 258.915 li
428.813 260.952 li
429.879 263.241 li
430.943 265.525 li
432.01 267.799 li
433.074 270.066 li
434.141 272.324 li
435.205 274.571 li
436.27 276.809 li
437.336 279.036 li
438.402 281.25 li
439.467 283.454 li
440.533 285.644 li
441.598 287.818 li
442.664 289.977 li
443.729 292.118 li
444.795 294.239 li
445.861 296.335 li
446.926 298.406 li
447.992 300.441 li
449.057 302.433 li
450.123 304.361 li
451.189 306.198 li
452.254 307.891 li
453.32 309.334 li
454.385 310.343 li
455.451 310.616 li
456.518 310.298 li
457.582 309.354 li
458.648 308.089 li
459.713 306.654 li
460.779 305.127 li
461.844 303.552 li
462.91 301.951 li
463.977 300.337 li
465.041 298.719 li
466.107 297.103 li
467.172 295.493 li
468.238 293.892 li
469.305 292.301 li
470.369 290.72 li
471.436 289.155 li
472.5 287.603 li
473.566 286.065 li
474.633 284.543 li
475.697 283.037 li
476.764 281.548 li
477.828 280.076 li
478.895 278.622 li
479.959 277.186 li
481.025 275.766 li
482.092 274.367 li
483.156 272.987 li
484.223 271.624 li
485.287 270.283 li
486.354 268.96 li
487.42 267.659 li
488.484 266.376 li
489.551 265.115 li
490.615 263.875 li
491.682 262.657 li
492.746 261.458 li
493.813 260.281 li
494.879 259.127 li
495.943 257.993 li
497.01 256.882 li
498.074 255.794 li
499.141 254.727 li
500.207 253.684 li
501.271 252.663 li
502.338 251.665 li
503.402 250.691 li
504.469 249.739 li
505.535 248.811 li
506.6 247.908 li
507.666 247.026 li
508.73 246.17 li
509.797 245.338 li
510.861 244.529 li
511.928 243.745 li
512.994 242.986 li
514.059 242.251 li
515.125 241.541 li
516.189 240.855 li
517.256 240.194 li
518.322 239.559 li
519.387 238.949 li
520.453 238.364 li
521.518 237.804 li
522.584 237.27 li
523.648 236.761 li
524.715 236.278 li
525.781 235.82 li
526.846 235.388 li
527.912 234.983 li
528.977 234.603 li
530.043 234.249 li
531.109 233.92 li
532.174 233.618 li
533.24 233.342 li
534.305 233.092 li
535.371 232.869 li
536.438 232.671 li
537.502 232.501 li
538.568 232.355 li
539.633 232.237 li
540.699 232.145 li
541.764 232.079 li
542.83 232.039 li
543.896 232.026 li
11.1001 381.187 mo
12.1655 381.174 li
13.231 381.14 li
14.2969 381.078 li
15.3623 380.995 li
16.4277 380.887 li
17.4937 380.755 li
18.5591 380.6 li
19.6245 380.421 li
20.6904 380.217 li
21.7559 379.989 li
22.8213 379.738 li
23.8872 379.464 li
24.9526 379.165 li
26.0181 378.844 li
27.084 378.498 li
28.1494 378.129 li
29.2148 377.736 li
30.2808 377.319 li
31.3462 376.88 li
32.4116 376.418 li
33.4775 375.933 li
34.543 375.423 li
35.6084 374.891 li
36.6743 374.335 li
37.7397 373.758 li
38.8052 373.157 li
39.8711 372.534 li
40.9365 371.888 li
42.002 371.221 li
43.0679 370.529 li
44.1333 369.816 li
45.1987 369.081 li
46.2646 368.324 li
47.3301 367.545 li
48.3955 366.744 li
49.4614 365.923 li
50.5269 365.079 li
51.5923 364.215 li
52.6582 363.328 li
53.7236 362.421 li
54.7891 361.494 li
55.855 360.545 li
56.9204 359.575 li
57.9858 358.586 li
59.0518 357.577 li
60.1172 356.548 li
61.1826 355.497 li
62.2485 354.429 li
63.314 353.34 li
64.3794 352.232 li
65.4453 351.105 li
66.5107 349.961 li
67.5762 348.797 li
68.6421 347.615 li
69.7075 346.415 li
70.7729 345.196 li
71.8389 343.96 li
72.9043 342.707 li
73.9702 341.438 li
75.0356 340.151 li
76.1011 338.85 li
77.1665 337.53 li
78.2324 336.197 li
79.2979 334.849 li
80.3633 333.486 li
81.4292 332.108 li
82.4946 330.72 li
83.5601 329.316 li
84.626 327.902 li
85.6914 326.479 li
86.7568 325.047 li
87.8228 323.608 li
89.9536 320.721 li
91.0195 319.282 li
92.085 317.853 li
93.1509 316.446 li
94.2163 315.076 li
95.2817 313.771 li
96.3472 312.576 li
97.4131 311.564 li
98.4785 310.861 li
99.5439 310.689 li
100.61 310.932 li
101.675 311.764 li
102.741 312.973 li
103.807 314.426 li
104.872 316.034 li
105.938 317.743 li
107.003 319.523 li
108.069 321.356 li
109.134 323.229 li
110.2 325.13 li
111.266 327.059 li
112.332 329.01 li
113.397 330.979 li
114.462 332.966 li
115.528 334.968 li
116.594 336.983 li
117.659 339.013 li
118.725 341.052 li
119.791 343.104 li
120.856 345.164 li
121.921 347.236 li
122.987 349.314 li
124.053 351.402 li
125.118 353.499 li
126.184 355.602 li
127.25 357.712 li
128.315 359.827 li
129.381 361.949 li
130.446 364.077 li
131.512 366.21 li
132.578 368.349 li
133.643 370.489 li
134.708 372.636 li
135.774 374.785 li
136.84 376.937 li
137.905 379.092 li
140.037 383.409 li
149.626 402.878 li
151.758 407.195 li
152.823 409.352 li
153.889 411.505 li
154.955 413.655 li
156.02 415.802 li
157.086 417.946 li
158.151 420.085 li
159.217 422.221 li
160.283 424.351 li
161.348 426.477 li
162.414 428.597 li
163.479 430.711 li
164.545 432.819 li
165.611 434.921 li
166.676 437.017 li
167.742 439.105 li
168.808 441.185 li
169.873 443.258 li
170.938 445.324 li
172.004 447.38 li
173.07 449.428 li
174.135 451.468 li
175.201 453.498 li
176.267 455.517 li
177.332 457.527 li
178.398 459.526 li
179.463 461.516 li
180.529 463.495 li
181.595 465.461 li
182.66 467.416 li
183.726 469.359 li
184.792 471.291 li
185.857 473.21 li
186.922 475.115 li
187.988 477.009 li
189.054 478.888 li
190.12 480.754 li
191.185 482.606 li
192.25 484.443 li
193.316 486.267 li
194.382 488.074 li
195.447 489.867 li
196.513 491.645 li
197.579 493.406 li
198.644 495.151 li
199.71 496.881 li
200.775 498.595 li
201.841 500.29 li
202.907 501.969 li
203.972 503.631 li
205.038 505.275 li
206.104 506.901 li
207.169 508.51 li
208.234 510.1 li
209.3 511.67 li
210.366 513.222 li
211.432 514.755 li
212.497 516.269 li
213.563 517.763 li
214.628 519.236 li
215.694 520.69 li
216.759 522.125 li
217.825 523.537 li
218.891 524.931 li
219.956 526.301 li
221.022 527.651 li
222.087 528.98 li
223.153 530.287 li
224.219 531.572 li
225.284 532.836 li
226.35 534.077 li
227.414 535.297 li
228.479 536.492 li
229.545 537.665 li
230.611 538.815 li
231.676 539.941 li
232.742 541.046 li
233.808 542.126 li
234.873 543.183 li
235.939 544.215 li
237.004 545.224 li
238.07 546.208 li
239.136 547.168 li
240.201 548.103 li
241.267 549.015 li
242.333 549.899 li
243.398 550.762 li
244.463 551.597 li
245.529 552.408 li
246.595 553.193 li
247.661 553.954 li
248.726 554.688 li
249.792 555.397 li
250.857 556.08 li
251.923 556.737 li
252.988 557.367 li
254.054 557.973 li
255.12 558.551 li
256.185 559.104 li
257.251 559.631 li
258.316 560.13 li
259.382 560.603 li
260.448 561.049 li
261.513 561.469 li
262.579 561.861 li
263.645 562.228 li
264.71 562.566 li
265.776 562.879 li
266.841 563.164 li
267.907 563.423 li
268.973 563.652 li
270.038 563.858 li
271.104 564.034 li
272.169 564.185 li
273.235 564.307 li
274.3 564.402 li
275.366 564.47 li
276.432 564.512 li
277.497 564.524 li
278.563 564.512 li
279.629 564.47 li
280.693 564.402 li
281.76 564.307 li
282.826 564.185 li
283.891 564.034 li
284.957 563.858 li
286.021 563.652 li
287.088 563.423 li
288.152 563.164 li
289.219 562.879 li
290.285 562.566 li
291.35 562.228 li
292.416 561.861 li
293.48 561.469 li
294.547 561.049 li
295.613 560.603 li
296.678 560.13 li
297.744 559.631 li
298.809 559.104 li
299.875 558.551 li
300.939 557.973 li
302.006 557.367 li
303.072 556.737 li
304.137 556.08 li
305.203 555.397 li
306.268 554.688 li
307.334 553.954 li
308.4 553.193 li
309.465 552.408 li
310.531 551.597 li
311.596 550.762 li
312.662 549.899 li
313.729 549.015 li
314.793 548.103 li
315.859 547.168 li
316.924 546.208 li
317.99 545.224 li
319.055 544.215 li
320.121 543.183 li
321.188 542.126 li
322.252 541.046 li
323.318 539.941 li
324.383 538.815 li
325.449 537.665 li
326.516 536.492 li
327.58 535.297 li
328.646 534.077 li
329.711 532.836 li
330.777 531.572 li
331.844 530.287 li
332.908 528.98 li
333.975 527.651 li
335.039 526.301 li
336.105 524.931 li
337.17 523.537 li
338.236 522.125 li
339.303 520.69 li
340.367 519.236 li
341.434 517.763 li
342.498 516.269 li
343.564 514.755 li
344.631 513.222 li
345.695 511.67 li
346.762 510.1 li
347.826 508.51 li
348.893 506.901 li
349.959 505.275 li
351.023 503.631 li
352.09 501.969 li
353.154 500.29 li
354.221 498.595 li
355.285 496.881 li
356.352 495.151 li
357.418 493.406 li
358.482 491.645 li
359.549 489.867 li
360.613 488.074 li
361.68 486.267 li
362.746 484.443 li
363.811 482.606 li
364.877 480.754 li
365.941 478.888 li
367.008 477.009 li
368.074 475.115 li
369.139 473.21 li
370.205 471.291 li
371.27 469.359 li
372.336 467.416 li
373.4 465.461 li
374.467 463.495 li
375.533 461.516 li
376.598 459.526 li
377.664 457.527 li
378.729 455.517 li
379.795 453.498 li
380.861 451.468 li
381.926 449.428 li
382.992 447.38 li
384.057 445.324 li
385.123 443.258 li
386.188 441.185 li
387.254 439.105 li
388.32 437.017 li
389.385 434.921 li
390.451 432.819 li
391.516 430.711 li
392.582 428.597 li
393.648 426.477 li
394.713 424.351 li
395.779 422.221 li
396.844 420.085 li
397.91 417.946 li
398.977 415.802 li
400.041 413.655 li
401.107 411.505 li
402.172 409.352 li
403.238 407.195 li
405.369 402.878 li
414.959 383.409 li
417.09 379.092 li
418.156 376.937 li
419.223 374.785 li
420.287 372.636 li
421.354 370.489 li
422.418 368.349 li
423.484 366.21 li
424.551 364.077 li
425.615 361.949 li
426.682 359.827 li
427.746 357.712 li
428.813 355.602 li
429.879 353.499 li
430.943 351.402 li
432.01 349.314 li
433.074 347.236 li
434.141 345.164 li
435.205 343.104 li
436.27 341.052 li
437.336 339.013 li
438.402 336.983 li
439.467 334.968 li
440.533 332.966 li
441.598 330.979 li
442.664 329.01 li
443.729 327.059 li
444.795 325.13 li
445.861 323.229 li
446.926 321.356 li
447.992 319.523 li
449.057 317.743 li
450.123 316.034 li
451.189 314.426 li
452.254 312.973 li
453.32 311.764 li
454.385 310.932 li
455.451 310.689 li
456.518 310.861 li
457.582 311.564 li
458.648 312.576 li
459.713 313.771 li
460.779 315.076 li
461.844 316.446 li
462.91 317.853 li
463.977 319.282 li
465.041 320.721 li
467.172 323.608 li
468.238 325.047 li
469.305 326.479 li
470.369 327.902 li
471.436 329.316 li
472.5 330.72 li
473.566 332.108 li
474.633 333.486 li
475.697 334.849 li
476.764 336.197 li
477.828 337.53 li
478.895 338.85 li
479.959 340.151 li
481.025 341.438 li
482.092 342.707 li
483.156 343.96 li
484.223 345.196 li
485.287 346.415 li
486.354 347.615 li
487.42 348.797 li
488.484 349.961 li
489.551 351.105 li
490.615 352.232 li
491.682 353.34 li
492.746 354.429 li
493.813 355.497 li
494.879 356.548 li
495.943 357.577 li
497.01 358.586 li
498.074 359.575 li
499.141 360.545 li
500.207 361.494 li
501.271 362.421 li
502.338 363.328 li
503.402 364.215 li
504.469 365.079 li
505.535 365.923 li
506.6 366.744 li
507.666 367.545 li
508.73 368.324 li
509.797 369.081 li
510.861 369.816 li
511.928 370.529 li
512.994 371.221 li
514.059 371.888 li
515.125 372.534 li
516.189 373.157 li
517.256 373.758 li
518.322 374.335 li
519.387 374.891 li
520.453 375.423 li
521.518 375.933 li
522.584 376.418 li
523.648 376.88 li
524.715 377.319 li
525.781 377.736 li
526.846 378.129 li
527.912 378.498 li
528.977 378.844 li
530.043 379.165 li
531.109 379.464 li
532.174 379.738 li
533.24 379.989 li
534.305 380.217 li
535.371 380.421 li
536.438 380.6 li
537.502 380.755 li
538.568 380.887 li
539.633 380.995 li
540.699 381.078 li
541.764 381.14 li
542.83 381.174 li
543.896 381.187 li
11.1001 409.118 mo
12.1655 409.104 li
13.231 409.061 li
14.2969 408.985 li
15.3623 408.883 li
16.4277 408.749 li
17.4937 408.587 li
18.5591 408.395 li
19.6245 408.174 li
20.6904 407.923 li
21.7559 407.643 li
22.8213 407.333 li
23.8872 406.993 li
24.9526 406.625 li
26.0181 406.229 li
27.084 405.801 li
28.1494 405.346 li
29.2148 404.861 li
30.2808 404.349 li
31.3462 403.806 li
32.4116 403.234 li
33.4775 402.635 li
34.543 402.006 li
35.6084 401.35 li
36.6743 400.666 li
37.7397 399.953 li
38.8052 399.212 li
39.8711 398.441 li
40.9365 397.646 li
42.002 396.819 li
43.0679 395.968 li
44.1333 395.088 li
45.1987 394.181 li
46.2646 393.247 li
47.3301 392.285 li
48.3955 391.298 li
49.4614 390.282 li
50.5269 389.241 li
51.5923 388.173 li
52.6582 387.079 li
53.7236 385.96 li
54.7891 384.813 li
55.855 383.643 li
56.9204 382.445 li
57.9858 381.225 li
59.0518 379.977 li
60.1172 378.706 li
61.1826 377.408 li
62.2485 376.088 li
63.314 374.743 li
64.3794 373.375 li
65.4453 371.982 li
66.5107 370.566 li
67.5762 369.128 li
68.6421 367.667 li
69.7075 366.183 li
70.7729 364.676 li
71.8389 363.147 li
72.9043 361.598 li
73.9702 360.026 li
75.0356 358.434 li
76.1011 356.821 li
77.1665 355.187 li
78.2324 353.534 li
79.2979 351.86 li
80.3633 350.169 li
81.4292 348.46 li
82.4946 346.732 li
83.5601 344.987 li
84.626 343.227 li
85.6914 341.45 li
86.7568 339.662 li
87.8228 337.859 li
88.8882 336.046 li
89.9536 334.227 li
92.085 330.58 li
93.1509 328.769 li
94.2163 326.981 li
95.2817 325.241 li
96.3472 323.59 li
97.4131 322.108 li
98.4785 320.945 li
99.5439 320.334 li
100.61 320.457 li
101.675 321.244 li
102.741 322.461 li
103.807 323.926 li
104.872 325.535 li
105.938 327.235 li
107.003 328.994 li
108.069 330.797 li
109.134 332.633 li
110.2 334.494 li
111.266 336.38 li
112.332 338.282 li
113.397 340.203 li
114.462 342.137 li
115.528 344.086 li
116.594 346.047 li
117.659 348.019 li
118.725 350.001 li
119.791 351.994 li
120.856 353.996 li
121.921 356.007 li
122.987 358.025 li
124.053 360.051 li
125.118 362.085 li
126.184 364.125 li
127.25 366.173 li
128.315 368.225 li
129.381 370.284 li
130.446 372.347 li
131.512 374.414 li
132.578 376.487 li
133.643 378.564 li
134.708 380.646 li
135.774 382.729 li
136.84 384.815 li
137.905 386.904 li
140.037 391.089 li
149.626 409.959 li
151.758 414.144 li
152.823 416.233 li
153.889 418.32 li
154.955 420.404 li
156.02 422.484 li
157.086 424.562 li
158.151 426.636 li
159.217 428.704 li
160.283 430.769 li
161.348 432.828 li
162.414 434.883 li
163.479 436.931 li
164.545 438.975 li
165.611 441.01 li
166.676 443.042 li
167.742 445.064 li
168.808 447.08 li
169.873 449.09 li
170.938 451.091 li
172.004 453.083 li
173.07 455.068 li
174.135 457.043 li
175.201 459.011 li
176.267 460.967 li
177.332 462.915 li
178.398 464.852 li
179.463 466.779 li
180.529 468.696 li
181.595 470.602 li
182.66 472.497 li
183.726 474.38 li
184.792 476.25 li
185.857 478.109 li
186.922 479.956 li
187.988 481.79 li
189.054 483.61 li
190.12 485.419 li
191.185 487.213 li
192.25 488.993 li
193.316 490.759 li
194.382 492.512 li
195.447 494.249 li
196.513 495.971 li
197.579 497.677 li
198.644 499.368 li
199.71 501.045 li
200.775 502.704 li
201.841 504.347 li
202.907 505.973 li
203.972 507.584 li
205.038 509.177 li
206.104 510.752 li
207.169 512.31 li
208.234 513.85 li
209.3 515.372 li
210.366 516.876 li
211.432 518.36 li
212.497 519.827 li
213.563 521.274 li
214.628 522.702 li
215.694 524.111 li
216.759 525.501 li
217.825 526.87 li
218.891 528.219 li
219.956 529.547 li
221.022 530.855 li
222.087 532.143 li
223.153 533.409 li
224.219 534.654 li
225.284 535.878 li
226.35 537.081 li
227.414 538.262 li
228.479 539.42 li
229.545 540.557 li
230.611 541.671 li
231.676 542.763 li
232.742 543.832 li
233.808 544.879 li
234.873 545.902 li
235.939 546.903 li
237.004 547.88 li
238.07 548.833 li
239.136 549.763 li
240.201 550.67 li
241.267 551.553 li
242.333 552.41 li
243.398 553.245 li
244.463 554.054 li
245.529 554.84 li
246.595 555.602 li
247.661 556.338 li
248.726 557.048 li
249.792 557.735 li
250.857 558.396 li
251.923 559.034 li
252.988 559.645 li
254.054 560.231 li
255.12 560.792 li
256.185 561.327 li
257.251 561.837 li
258.316 562.32 li
259.382 562.778 li
260.448 563.212 li
261.513 563.618 li
262.579 563.998 li
263.645 564.354 li
264.71 564.681 li
265.776 564.983 li
266.841 565.261 li
267.907 565.511 li
268.973 565.734 li
270.038 565.933 li
271.104 566.104 li
272.169 566.249 li
273.235 566.366 li
274.3 566.46 li
275.366 566.524 li
276.432 566.565 li
277.497 566.579 li
278.563 566.565 li
279.629 566.524 li
280.693 566.46 li
281.76 566.366 li
282.826 566.249 li
283.891 566.104 li
284.957 565.933 li
286.021 565.734 li
287.088 565.511 li
288.152 565.261 li
289.219 564.983 li
290.285 564.681 li
291.35 564.354 li
292.416 563.998 li
293.48 563.618 li
294.547 563.212 li
295.613 562.778 li
296.678 562.32 li
297.744 561.837 li
298.809 561.327 li
299.875 560.792 li
300.939 560.231 li
302.006 559.645 li
303.072 559.034 li
304.137 558.396 li
305.203 557.735 li
306.268 557.048 li
307.334 556.338 li
308.4 555.602 li
309.465 554.84 li
310.531 554.054 li
311.596 553.245 li
312.662 552.41 li
313.729 551.553 li
314.793 550.67 li
315.859 549.763 li
316.924 548.833 li
317.99 547.88 li
319.055 546.903 li
320.121 545.902 li
321.188 544.879 li
322.252 543.832 li
323.318 542.763 li
324.383 541.671 li
325.449 540.557 li
326.516 539.42 li
327.58 538.262 li
328.646 537.081 li
329.711 535.878 li
330.777 534.654 li
331.844 533.409 li
332.908 532.143 li
333.975 530.855 li
335.039 529.547 li
336.105 528.219 li
337.17 526.87 li
338.236 525.501 li
339.303 524.111 li
340.367 522.702 li
341.434 521.274 li
342.498 519.827 li
343.564 518.36 li
344.631 516.876 li
345.695 515.372 li
346.762 513.85 li
347.826 512.31 li
348.893 510.752 li
349.959 509.177 li
351.023 507.584 li
352.09 505.973 li
353.154 504.347 li
354.221 502.704 li
355.285 501.045 li
356.352 499.368 li
357.418 497.677 li
358.482 495.971 li
359.549 494.249 li
360.613 492.512 li
361.68 490.759 li
362.746 488.993 li
363.811 487.213 li
364.877 485.419 li
365.941 483.61 li
367.008 481.79 li
368.074 479.956 li
369.139 478.109 li
370.205 476.25 li
371.27 474.38 li
372.336 472.497 li
373.4 470.602 li
374.467 468.696 li
375.533 466.779 li
376.598 464.852 li
377.664 462.915 li
378.729 460.967 li
379.795 459.011 li
380.861 457.043 li
381.926 455.068 li
382.992 453.083 li
384.057 451.091 li
385.123 449.09 li
386.188 447.08 li
387.254 445.064 li
388.32 443.042 li
389.385 441.01 li
390.451 438.975 li
391.516 436.931 li
392.582 434.883 li
393.648 432.828 li
394.713 430.769 li
395.779 428.704 li
396.844 426.636 li
397.91 424.562 li
398.977 422.484 li
400.041 420.404 li
401.107 418.32 li
402.172 416.233 li
403.238 414.144 li
405.369 409.959 li
414.959 391.089 li
417.09 386.904 li
418.156 384.815 li
419.223 382.729 li
420.287 380.646 li
421.354 378.564 li
422.418 376.487 li
423.484 374.414 li
424.551 372.347 li
425.615 370.284 li
426.682 368.225 li
427.746 366.173 li
428.813 364.125 li
429.879 362.085 li
430.943 360.051 li
432.01 358.025 li
433.074 356.007 li
434.141 353.996 li
435.205 351.994 li
436.27 350.001 li
437.336 348.019 li
438.402 346.047 li
439.467 344.086 li
440.533 342.137 li
441.598 340.203 li
442.664 338.282 li
443.729 336.38 li
444.795 334.494 li
445.861 332.633 li
446.926 330.797 li
447.992 328.994 li
449.057 327.235 li
450.123 325.535 li
451.189 323.926 li
452.254 322.461 li
453.32 321.244 li
454.385 320.457 li
455.451 320.334 li
456.518 320.945 li
457.582 322.108 li
458.648 323.59 li
459.713 325.241 li
460.779 326.981 li
461.844 328.769 li
462.91 330.58 li
465.041 334.227 li
466.107 336.046 li
467.172 337.859 li
468.238 339.662 li
469.305 341.45 li
470.369 343.227 li
471.436 344.987 li
472.5 346.732 li
473.566 348.46 li
474.633 350.169 li
475.697 351.86 li
476.764 353.534 li
477.828 355.187 li
478.895 356.821 li
479.959 358.434 li
481.025 360.026 li
482.092 361.598 li
483.156 363.147 li
484.223 364.676 li
485.287 366.183 li
486.354 367.667 li
487.42 369.128 li
488.484 370.566 li
489.551 371.982 li
490.615 373.375 li
491.682 374.743 li
492.746 376.088 li
493.813 377.408 li
494.879 378.706 li
495.943 379.977 li
497.01 381.225 li
498.074 382.445 li
499.141 383.643 li
500.207 384.813 li
501.271 385.96 li
502.338 387.079 li
503.402 388.173 li
504.469 389.241 li
505.535 390.282 li
506.6 391.298 li
507.666 392.285 li
508.73 393.247 li
509.797 394.181 li
510.861 395.088 li
511.928 395.968 li
512.994 396.819 li
514.059 397.646 li
515.125 398.441 li
516.189 399.212 li
517.256 399.953 li
518.322 400.666 li
519.387 401.35 li
520.453 402.006 li
521.518 402.635 li
522.584 403.234 li
523.648 403.806 li
524.715 404.349 li
525.781 404.861 li
526.846 405.346 li
527.912 405.801 li
528.977 406.229 li
530.043 406.625 li
531.109 406.993 li
532.174 407.333 li
533.24 407.643 li
534.305 407.923 li
535.371 408.174 li
536.438 408.395 li
537.502 408.587 li
538.568 408.749 li
539.633 408.883 li
540.699 408.985 li
541.764 409.061 li
542.83 409.104 li
543.896 409.118 li
.912474 .787625 .619837 .97467 cmyk
@
grestore
gsave
6.9375 570.741 mo
548.063 570.741 li
548.063 29.6162 li
6.9375 29.6162 li
6.9375 570.741 li
cp
clp
1.3875 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
11.1001 310.659 mo
543.896 310.659 li
.912474 .787625 .619837 .97467 cmyk
@
grestore
1.3875 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
23.1064 310.659 mo
23.1064 317.874 li
.912474 .787625 .619837 .97467 cmyk
@
107.904 310.659 mo
107.904 317.874 li
@
192.7 310.659 mo
192.7 317.874 li
@
277.497 310.659 mo
277.497 317.874 li
@
362.295 310.659 mo
362.295 317.874 li
@
447.092 310.659 mo
447.092 317.874 li
@
531.891 310.659 mo
531.891 317.874 li
@
gsave
6.9375 570.741 mo
548.063 570.741 li
548.063 29.6162 li
6.9375 29.6162 li
6.9375 570.741 li
cp
clp
489.49 310.659 mo
489.49 314.267 li
404.693 310.659 mo
404.693 314.267 li
319.896 310.659 mo
319.896 314.267 li
235.1 310.659 mo
235.1 314.267 li
150.302 310.659 mo
150.302 314.267 li
65.5049 310.659 mo
65.5049 314.267 li
@
2 lc
0 lj
277.497 566.579 mo
277.497 33.7827 li
@
grestore
277.497 525.314 mo
270.282 525.314 li
@
277.497 471.65 mo
270.282 471.65 li
@
277.497 417.986 mo
270.282 417.986 li
@
277.497 364.321 mo
270.282 364.321 li
@
277.497 256.995 mo
270.282 256.995 li
277.497 310.659 mo
270.282 310.659 li
@
277.497 203.33 mo
270.282 203.33 li
@
277.497 149.666 mo
270.282 149.666 li
@
277.497 96.002 mo
270.282 96.002 li
@
277.497 42.3374 mo
270.282 42.3374 li
@
277.497 69.1694 mo
273.89 69.1694 li
277.497 122.833 mo
273.89 122.833 li
277.497 176.497 mo
273.89 176.497 li
277.497 230.162 mo
273.89 230.162 li
277.497 283.826 mo
273.89 283.826 li
277.497 337.49 mo
273.89 337.49 li
277.497 391.154 mo
273.89 391.154 li
277.497 444.819 mo
273.89 444.819 li
277.497 498.483 mo
273.89 498.483 li
277.497 552.147 mo
273.89 552.147 li
@
491.059 310.659 mo
548.059 310.659 li
f
1 lw
0 lj
491.059 310.659 mo
532.558 310.659 li
@
529.406 321.368 mo
548.059 310.601 li
529.406 299.83 li
529.406 321.368 li
cp
f
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 69 /E put
dup 75 /K put
dup 86 /V put
dup 101 /e put
def
/FontBBox {-568 -307 2000 1007} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/parenleft <1C60D8A8C9B81F2C3AC09B674C4ECE2BEF4D70AD3508D915EA9A
E12419376F6EEF231ECE8179CA4531F29291ACACE060AEF98AD6F2FFF2BEA533
946FFA1C8BC3953D72A31BB8ABD9782D71B2146F964D99646263E2D414F84FA0
49D36B9B13B7F6C8AA7A4A5EB0> |-
/parenright <1C60D8A8C9B81F2C3CA029BC286E27661FD7F18B990CFF4A0AF
58404A2F35E11D14FBA406192D392AD203A879E34B8FA3132863211808E5BD63
BDAA607B8E04E23E92C61AAA8B57E5E7609689020D20EB927A1EC6CC0BC06B54
0A016D558248DC4A3E8183F5F> |-
/plus <1C60D8A8C9B7E7C1AF20108BE9542537F46D63CC3CA2839958A1F5DF8
0C8F650E8951850C571859AA14DD682> |-
/E <1C60D8A8C9B7D8BE19945133FE501067A24BBF08B984801DD42E090C7BFC
A94BE6C4AA953A8A674F2ED3DEE261A8700CA873A3A1D3699D8129F8FA28DE52
C44FD8214EA37190B26E64C97677BF6E1856F59EF49286A31D4133D861C74CDB
92794376B13E311920B8F547FC8F105147550894C833300FA326DF7877402F2A
3FD3184C9B8E130B79DB62E2735C65FD4E7A86140D8A7D764E8F05488CC19495
58757A62743714E5384E2EF166B32CB849712A9C93B7CF04FCFE8063494A215F
A79B98816AEC20BC3F> |-
/K <1C60D8A8C9B6079F6DAD6439E719A5649ADA7D8B9E734C715565956F15B5
C4CFBB8891AD82AF5B965DC9DBF0762D43C17265BBD3CD422561D8093800D47C
30E7401B7FF953462B20D5841B49861E5477C9C06DC8DEA98C62C73A16DCD10A
99A3BB2728EF5C45B4F29723E3FD20A045034CDC5B2823010371DE4EA42A5365
F63BDAAE6E06349967F6DD5B6C651FF133F1AC111407BA069118B1E1EF88ECE8
67D30D2AC6A5EEB5F5B14A4020A8D1688A963E3E2FF5DFE6441AA27FDF0183EE
620579E7103491C7EBC49E5703B87C43F0A841871BC2D6A7D289877EB3748B6B
80FD93562885CC9F2182E80755BBCE3303DAD528BFBDFEB3202E48EDCFB93BC1> |-
/V <1C60D8A8C9B6079F6D060A2FEA7FC1569E0C14DA541DD91C00EBC3777BDE
67491C2EA2113C451959D17D324EE8DBB436A0F30BF65402B93EFD32E095FD4A
5BC20760673D3864924C1ACF695D3BD682644F24B440E38C1FF24D4CC16712B5
02AE5F89EDD273AE3A1DBED84FBFBD9B8AF85ACA697ED4658DA6CFEAC078154F
7D9BB4AB2053> |-
/e <1C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2BEA
D3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A15
F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7FFA
0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA501318984
A59E1CFFFD06EA629758085868D3F5F7204292> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ULKHMX+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/ULKHMX+TimesNewRomanPSMT*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus 25{/.notdef}rp /E 5{/.notdef}rp 
/K 10{/.notdef}rp /V 14{/.notdef}rp /e 154{/.notdef}rp]
ULKHMX+TimesNewRomanPSMT nf
ULKHMX+TimesNewRomanPSMT*1 [36 0 0 -36 0 0 ]msf
122 59.2744 mo
(E\(eV\))sh
%ADOBeginSubsetFont: SymbolMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /SymbolMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 71 /Gamma put
def
/FontBBox {0 -220 1113 1005} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B7C3C9ED920C533BFCEF627DC3963E487931C80D1235
BDD70699E096A6312D> |-
/Gamma <1C60D8A8C9B7C05475E72CC8962C939F2D1F0D5BA60018E96FD6C5CA
5C2DCC9EF94E53993FE1CB49778CC7FAA0E74C257A90CFF29A4CFDA3CE7D45E4
F65232A7772CCE30C1F30BE6FABAAB3857F0F69D67A6CDCD2755D1BE17AF2B6A
9EB7C651B7EED56A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ULKHMY+SymbolMT /SymbolMT findfont ct_VMDictPut
/ULKHMY+SymbolMT*1 
[71{/.notdef}rp /Gamma 184{/.notdef}rp]
ULKHMY+SymbolMT nf
ULKHMY+SymbolMT*1 [36 0 0 -36 0 0 ]msf
288.325 373.717 mo
(G)sh
ULKHMX+TimesNewRomanPSMT*1 [36 0 0 -36 0 0 ]msf
443.325 373.717 mo
(K)sh
ULKHMX+TimesNewRomanPSMT*1 [20.988 0 0 -20.988 0 0 ]msf
469.323 385.705 mo
(+)sh
396.535 10.1846 mo
563.035 10.1846 li
563.035 176.685 li
396.535 176.685 li
396.535 10.1846 li
396.535 10.1846 li
cp
0 0 0 0 cmyk
f
gsave
414.098 168.704 mo
557.703 168.704 li
557.703 7.61768 li
414.098 7.61768 li
414.098 168.704 li
cp
clp
2 lw
1 lj
414.931 8.8667 mo
416.345 10.2227 li
417.761 11.5762 li
419.176 12.9268 li
420.308 14.0059 li
421.44 15.0825 li
422.572 16.1577 li
423.704 17.231 li
424.837 18.3022 li
425.969 19.3716 li
427.101 20.439 li
427.95 21.2383 li
428.8 22.0361 li
429.648 22.833 li
430.497 23.6284 li
431.347 24.4229 li
432.196 25.2158 li
433.045 26.0073 li
433.894 26.7979 li
434.743 27.5869 li
435.593 28.374 li
436.442 29.1602 li
437.29 29.9448 li
438.14 30.728 li
438.706 31.249 li
439.272 31.7695 li
439.838 32.2896 li
440.404 32.8086 li
440.97 33.3271 li
441.536 33.8447 li
442.103 34.3613 li
442.669 34.8774 li
443.234 35.3926 li
443.801 35.9072 li
444.366 36.4204 li
444.933 36.9331 li
445.499 37.4453 li
446.065 37.9561 li
446.632 38.4663 li
447.197 38.9751 li
447.48 39.2295 li
448.046 39.7373 li
448.329 39.9907 li
448.612 40.2437 li
449.179 40.7495 li
449.462 41.002 li
449.745 41.2539 li
450.028 41.5059 li
450.312 41.7573 li
450.594 42.0088 li
450.877 42.2598 li
451.16 42.5107 li
451.442 42.7612 li
451.726 43.0112 li
452.009 43.2612 li
452.292 43.5107 li
452.575 43.7603 li
452.858 44.0093 li
453.142 44.2578 li
453.425 44.5063 li
453.708 44.7544 li
453.991 45.002 li
454.273 45.249 li
454.557 45.4961 li
454.84 45.7427 li
455.122 45.9893 li
455.405 46.2354 li
455.688 46.481 li
455.972 46.7261 li
456.255 46.9707 li
456.538 47.2153 li
456.821 47.4595 li
457.104 47.7031 li
457.388 47.9463 li
457.671 48.189 li
457.953 48.4316 li
458.236 48.6733 li
458.52 48.9146 li
458.802 49.1558 li
459.085 49.3965 li
459.368 49.6362 li
459.651 49.876 li
459.935 50.1157 li
460.218 50.354 li
460.501 50.5923 li
460.784 50.8296 li
461.067 51.0669 li
461.351 51.3037 li
461.633 51.5396 li
461.916 51.7754 li
462.199 52.0098 li
462.481 52.2441 li
462.765 52.4775 li
463.048 52.7109 li
463.331 52.9434 li
463.614 53.1748 li
463.897 53.4063 li
464.181 53.6367 li
464.464 53.8662 li
464.747 54.0947 li
465.029 54.3232 li
465.313 54.5508 li
465.596 54.7773 li
465.878 55.0029 li
466.161 55.228 li
466.444 55.4517 li
466.728 55.6753 li
467.011 55.8975 li
467.294 56.1187 li
467.577 56.3394 li
467.859 56.5586 li
468.143 56.7769 li
468.426 56.9941 li
468.708 57.2104 li
468.991 57.4253 li
469.274 57.6392 li
469.558 57.8525 li
469.841 58.064 li
470.124 58.2739 li
470.407 58.4829 li
470.69 58.6904 li
470.974 58.8965 li
471.257 59.1011 li
471.539 59.3042 li
471.822 59.5063 li
472.105 59.7061 li
472.388 59.9043 li
472.671 60.1011 li
472.954 60.2959 li
473.237 60.4888 li
473.521 60.6797 li
473.804 60.8687 li
474.087 61.0557 li
474.37 61.2407 li
474.653 61.4229 li
474.937 61.6035 li
475.219 61.7813 li
475.502 61.9565 li
475.784 62.1294 li
476.067 62.2998 li
476.351 62.4668 li
476.634 62.6313 li
476.917 62.793 li
477.2 62.9517 li
477.483 63.1069 li
477.767 63.2583 li
478.049 63.4067 li
478.332 63.5518 li
478.616 63.6929 li
478.898 63.8296 li
479.182 63.9629 li
479.465 64.0923 li
479.748 64.2168 li
480.031 64.3374 li
480.313 64.4531 li
480.597 64.5645 li
480.88 64.6704 li
481.163 64.772 li
481.446 64.8677 li
481.729 64.9585 li
482.012 65.0439 li
482.296 65.124 li
482.578 65.1978 li
482.861 65.2656 li
483.145 65.3276 li
483.428 65.3838 li
483.711 65.4331 li
483.993 65.4766 li
484.276 65.5137 li
484.56 65.5439 li
484.843 65.5674 li
485.126 65.5845 li
485.408 65.5947 li
485.691 65.5981 li
485.975 65.5947 li
486.258 65.5845 li
486.541 65.5674 li
486.824 65.5435 li
487.107 65.5127 li
487.391 65.4751 li
487.673 65.4312 li
487.956 65.3804 li
488.239 65.3228 li
488.522 65.2588 li
488.806 65.189 li
489.088 65.1123 li
489.371 65.0298 li
489.654 64.9409 li
489.938 64.8467 li
490.221 64.7466 li
490.504 64.6406 li
490.787 64.5288 li
491.07 64.4126 li
491.353 64.291 li
491.636 64.1646 li
491.919 64.0327 li
492.202 63.897 li
492.485 63.7559 li
492.768 63.6113 li
493.051 63.4619 li
493.334 63.3086 li
493.617 63.1514 li
493.9 62.9907 li
494.184 62.8257 li
494.467 62.6582 li
494.75 62.4868 li
495.032 62.312 li
495.315 62.1343 li
495.599 61.9536 li
495.882 61.77 li
496.165 61.584 li
496.447 61.395 li
496.73 61.2041 li
497.014 61.0103 li
497.297 60.814 li
497.58 60.6157 li
497.862 60.4155 li
498.146 60.2134 li
498.43 60.0088 li
498.712 59.8027 li
498.995 59.5947 li
499.278 59.3853 li
499.562 59.1733 li
499.845 58.9609 li
500.127 58.7466 li
500.41 58.5303 li
500.693 58.3135 li
500.977 58.0947 li
501.26 57.875 li
501.542 57.6538 li
501.825 57.4316 li
502.109 57.2085 li
502.392 56.9839 li
502.675 56.7583 li
502.958 56.5322 li
503.241 56.3047 li
503.524 56.0767 li
503.807 55.8477 li
504.09 55.6177 li
504.373 55.3867 li
504.656 55.1553 li
504.939 54.9233 li
505.222 54.6904 li
505.505 54.457 li
505.789 54.2227 li
506.071 53.9878 li
506.354 53.7524 li
506.638 53.5166 li
506.921 53.2803 li
507.204 53.043 li
507.486 52.8057 li
507.77 52.5679 li
508.053 52.3291 li
508.336 52.0908 li
508.619 51.8516 li
508.901 51.6118 li
509.185 51.3716 li
509.468 51.1313 li
509.751 50.8906 li
510.034 50.6494 li
510.317 50.4082 li
510.601 50.167 li
510.884 49.9243 li
511.449 49.4399 li
512.016 48.9546 li
512.581 48.4683 li
513.147 47.981 li
513.714 47.4932 li
514.563 46.7603 li
515.694 45.7813 li
517.676 44.0645 li
523.903 38.6611 li
525.885 36.9453 li
527.3 35.7222 li
528.433 34.7446 li
529.564 33.769 li
530.696 32.7949 li
531.828 31.8223 li
532.678 31.0942 li
533.527 30.3677 li
534.376 29.6416 li
535.225 28.917 li
536.074 28.1938 li
536.924 27.4722 li
537.772 26.7515 li
538.622 26.0317 li
539.188 25.5532 li
540.037 24.8359 li
540.604 24.3589 li
541.452 23.644 li
542.302 22.9312 li
543.15 22.2192 li
543.717 21.7456 li
544.283 21.2729 li
544.849 20.8008 li
545.415 20.3291 li
545.981 19.8584 li
546.547 19.3882 li
547.113 18.9189 li
547.679 18.4502 li
548.246 17.9819 li
548.812 17.5151 li
549.378 17.0483 li
549.943 16.583 li
550.51 16.1177 li
551.076 15.6538 li
551.642 15.1899 li
552.208 14.7275 li
552.774 14.2656 li
553.341 13.8042 li
553.906 13.3442 li
554.473 12.8843 li
555.038 12.4258 li
555.604 11.9678 li
556.171 11.5103 li
556.454 11.2822 li
414.931 13.0928 mo
416.345 14.772 li
417.761 16.4482 li
419.176 18.1211 li
420.591 19.791 li
422.007 21.4585 li
423.421 23.1221 li
424.554 24.4507 li
425.686 25.7778 li
426.817 27.1021 li
427.95 28.4243 li
429.083 29.7441 li
430.215 31.062 li
431.347 32.377 li
432.479 33.6899 li
433.328 34.6729 li
434.46 35.9814 li
435.31 36.9609 li
436.159 37.9395 li
437.007 38.916 li
437.856 39.8911 li
438.706 40.8643 li
439.555 41.8364 li
440.404 42.8066 li
441.253 43.7749 li
442.103 44.7417 li
442.952 45.707 li
443.801 46.6699 li
444.649 47.6313 li
445.216 48.2715 li
445.782 48.9102 li
446.349 49.5483 li
446.914 50.1851 li
447.48 50.8213 li
448.046 51.4565 li
448.612 52.0908 li
449.179 52.7246 li
449.745 53.3569 li
450.312 53.9878 li
450.877 54.6182 li
451.442 55.2476 li
452.009 55.8755 li
452.575 56.5024 li
452.858 56.8154 li
453.425 57.4409 li
453.991 58.0645 li
454.557 58.6875 li
454.84 58.9985 li
455.122 59.3091 li
455.405 59.6191 li
455.688 59.9287 li
455.972 60.2383 li
456.255 60.5474 li
456.538 60.8564 li
456.821 61.165 li
457.104 61.4731 li
457.388 61.7808 li
457.671 62.0884 li
457.953 62.395 li
458.236 62.7012 li
458.52 63.0078 li
458.802 63.3135 li
459.085 63.6187 li
459.368 63.9238 li
459.651 64.228 li
459.935 64.5322 li
460.218 64.8359 li
460.501 65.1387 li
460.784 65.4414 li
461.067 65.7437 li
461.351 66.0454 li
461.633 66.3467 li
461.916 66.6475 li
462.199 66.9473 li
462.481 67.2471 li
462.765 67.5464 li
463.048 67.8447 li
463.331 68.1431 li
463.614 68.4399 li
463.897 68.7368 li
464.181 69.0332 li
464.464 69.3291 li
464.747 69.6235 li
465.029 69.918 li
465.313 70.2114 li
465.596 70.5039 li
465.878 70.7959 li
466.161 71.0874 li
466.444 71.3779 li
466.728 71.668 li
467.011 71.957 li
467.294 72.2451 li
467.577 72.5322 li
467.859 72.8188 li
468.143 73.104 li
468.426 73.3887 li
468.708 73.6719 li
468.991 73.9546 li
469.274 74.2358 li
469.558 74.5166 li
469.841 74.7959 li
470.124 75.0742 li
470.407 75.3506 li
470.69 75.6265 li
470.974 75.9009 li
471.257 76.1743 li
471.539 76.4453 li
471.822 76.7163 li
472.105 76.9844 li
472.388 77.252 li
472.671 77.5176 li
472.954 77.7813 li
473.237 78.043 li
473.521 78.3037 li
473.804 78.5615 li
474.087 78.8184 li
474.37 79.0723 li
474.653 79.3247 li
474.937 79.5742 li
475.219 79.8223 li
475.502 80.0674 li
475.784 80.3101 li
476.067 80.5498 li
476.351 80.7866 li
476.634 81.021 li
476.917 81.252 li
477.2 81.4795 li
477.483 81.7041 li
477.767 81.9248 li
478.049 82.1421 li
478.332 82.3555 li
478.616 82.5649 li
478.898 82.77 li
479.182 82.9707 li
479.465 83.1665 li
479.748 83.3579 li
480.031 83.5439 li
480.313 83.7251 li
480.597 83.9004 li
480.88 84.0703 li
481.163 84.2339 li
481.446 84.3916 li
481.729 84.543 li
482.012 84.687 li
482.296 84.8247 li
482.578 84.9546 li
482.861 85.0771 li
483.145 85.1924 li
483.428 85.2993 li
483.711 85.3984 li
483.993 85.4893 li
484.276 85.5718 li
484.56 85.645 li
484.843 85.71 li
485.126 85.7656 li
485.408 85.8125 li
485.691 85.8501 li
485.975 85.8203 li
486.258 85.7979 li
486.541 85.7817 li
486.824 85.7729 li
487.107 85.7705 li
487.391 85.7749 li
487.673 85.7861 li
487.956 85.8042 li
488.239 85.7798 li
488.522 85.728 li
488.806 85.6685 li
489.088 85.6006 li
489.371 85.5249 li
489.654 85.4419 li
489.938 85.3516 li
490.221 85.2539 li
490.504 85.1499 li
490.787 85.0396 li
491.07 84.9224 li
491.353 84.7993 li
491.636 84.6704 li
491.919 84.5366 li
492.202 84.3965 li
492.485 84.2524 li
492.768 84.103 li
493.051 83.9492 li
493.334 83.791 li
493.617 83.6289 li
493.9 83.4619 li
494.184 83.292 li
494.467 83.1182 li
494.75 82.9414 li
495.032 82.7607 li
495.315 82.5776 li
495.599 82.3911 li
495.882 82.2021 li
496.165 82.0103 li
496.447 81.8164 li
496.73 81.6196 li
497.014 81.4204 li
497.297 81.2192 li
497.58 81.0166 li
497.862 80.8115 li
498.146 80.6045 li
498.43 80.396 li
498.712 80.1855 li
498.995 79.9736 li
499.278 79.7603 li
499.562 79.5454 li
499.845 79.3291 li
500.127 79.1113 li
500.41 78.8931 li
500.693 78.6729 li
500.977 78.4517 li
501.26 78.2295 li
501.542 78.0063 li
501.825 77.7827 li
502.109 77.5571 li
502.392 77.3315 li
502.675 77.1045 li
502.958 76.877 li
503.241 76.6484 li
503.524 76.4194 li
503.807 76.1899 li
504.09 75.9595 li
504.373 75.728 li
504.656 75.4971 li
504.939 75.2646 li
505.222 75.0317 li
505.505 74.7983 li
505.789 74.5649 li
506.071 74.3306 li
506.354 74.0957 li
506.638 73.8608 li
506.921 73.6255 li
507.204 73.3896 li
507.486 73.1533 li
507.77 72.917 li
508.053 72.6802 li
508.336 72.4429 li
508.619 72.2056 li
508.901 71.9673 li
509.468 71.4912 li
510.034 71.0142 li
510.601 70.5361 li
511.166 70.0576 li
512.016 69.3384 li
513.147 68.3774 li
515.129 66.6924 li
520.79 61.8721 li
522.771 60.188 li
524.47 58.7471 li
525.885 57.5488 li
527.017 56.5923 li
528.148 55.6367 li
528.998 54.9214 li
529.848 54.2075 li
530.696 53.4941 li
531.545 52.7822 li
532.395 52.0718 li
533.244 51.3628 li
534.093 50.6548 li
534.942 49.9473 li
535.791 49.2422 li
536.357 48.7729 li
537.207 48.0698 li
537.772 47.6016 li
538.622 46.9009 li
539.188 46.4341 li
539.754 45.9688 li
540.32 45.5034 li
540.887 45.0391 li
541.452 44.5752 li
542.019 44.1123 li
542.584 43.6499 li
543.15 43.188 li
543.717 42.7271 li
544.283 42.2671 li
544.849 41.8076 li
545.415 41.3486 li
545.981 40.8906 li
546.547 40.4331 li
547.113 39.9761 li
547.679 39.5205 li
548.246 39.0649 li
548.812 38.6108 li
549.378 38.1567 li
549.943 37.7041 li
550.51 37.252 li
551.076 36.8003 li
551.642 36.3496 li
552.208 35.8999 li
552.774 35.4507 li
553.341 35.0024 li
553.906 34.5547 li
554.473 34.1079 li
554.756 33.8848 li
555.321 33.4395 li
555.888 32.9946 li
556.454 32.5503 li
414.931 151.358 mo
416.345 149.819 li
417.761 148.281 li
419.176 146.748 li
420.591 145.217 li
421.724 143.994 li
422.855 142.773 li
423.987 141.555 li
425.12 140.338 li
426.252 139.124 li
427.384 137.912 li
428.517 136.702 li
429.648 135.495 li
430.78 134.29 li
431.63 133.387 li
432.479 132.486 li
433.328 131.588 li
434.177 130.689 li
435.026 129.793 li
435.876 128.898 li
436.725 128.005 li
437.573 127.113 li
438.423 126.224 li
439.272 125.335 li
440.121 124.448 li
440.97 123.563 li
441.536 122.975 li
442.103 122.387 li
442.669 121.8 li
443.234 121.213 li
443.801 120.627 li
444.366 120.043 li
444.933 119.459 li
445.499 118.876 li
446.065 118.295 li
446.632 117.714 li
447.197 117.134 li
447.764 116.555 li
448.329 115.978 li
448.896 115.4 li
449.462 114.824 li
450.028 114.25 li
450.312 113.963 li
450.594 113.677 li
450.877 113.391 li
451.16 113.104 li
451.442 112.819 li
451.726 112.534 li
452.009 112.249 li
452.292 111.964 li
452.575 111.68 li
452.858 111.396 li
453.142 111.112 li
453.425 110.828 li
453.708 110.546 li
453.991 110.263 li
454.273 109.98 li
454.557 109.698 li
454.84 109.417 li
455.122 109.136 li
455.405 108.854 li
455.688 108.574 li
455.972 108.294 li
456.255 108.015 li
456.538 107.735 li
456.821 107.456 li
457.104 107.178 li
457.388 106.899 li
457.671 106.622 li
457.953 106.345 li
458.236 106.068 li
458.52 105.792 li
458.802 105.517 li
459.085 105.24 li
459.368 104.966 li
459.651 104.691 li
459.935 104.418 li
460.218 104.145 li
460.501 103.871 li
460.784 103.599 li
461.067 103.327 li
461.351 103.056 li
461.633 102.785 li
461.916 102.516 li
462.199 102.246 li
462.481 101.978 li
462.765 101.709 li
463.048 101.441 li
463.331 101.175 li
463.614 100.908 li
463.897 100.643 li
464.181 100.378 li
464.464 100.114 li
464.747 99.8506 li
465.029 99.5879 li
465.313 99.3262 li
465.596 99.0654 li
465.878 98.8047 li
466.161 98.5459 li
466.444 98.2881 li
466.728 98.0303 li
467.011 97.7734 li
467.294 97.5186 li
467.577 97.2637 li
467.859 97.0098 li
468.143 96.7568 li
468.426 96.5059 li
468.708 96.2559 li
468.991 96.0059 li
469.274 95.7578 li
469.558 95.5107 li
469.841 95.2656 li
470.124 95.0215 li
470.407 94.7783 li
470.69 94.5361 li
470.974 94.2959 li
471.257 94.0576 li
471.539 93.8203 li
471.822 93.585 li
472.105 93.3516 li
472.388 93.1191 li
472.671 92.8887 li
472.954 92.6602 li
473.237 92.4326 li
473.521 92.208 li
473.804 91.9854 li
474.087 91.7646 li
474.37 91.5449 li
474.653 91.3291 li
474.937 91.1152 li
475.219 90.9033 li
475.502 90.6943 li
475.784 90.4873 li
476.067 90.2842 li
476.351 90.083 li
476.634 89.8848 li
476.917 89.6895 li
477.2 89.4971 li
477.483 89.3086 li
477.767 89.123 li
478.049 88.9414 li
478.332 88.7627 li
478.616 88.5884 li
478.898 88.4175 li
479.182 88.2505 li
479.465 88.0879 li
479.748 87.9297 li
480.031 87.7759 li
480.313 87.627 li
480.597 87.4819 li
480.88 87.3423 li
481.163 87.2075 li
481.446 87.0781 li
481.729 86.9541 li
482.012 86.8354 li
482.296 86.7227 li
482.578 86.6152 li
482.861 86.5142 li
483.145 86.4189 li
483.428 86.3296 li
483.711 86.2471 li
483.993 86.1704 li
484.276 86.1006 li
484.56 86.0366 li
484.843 85.98 li
485.126 85.9297 li
485.408 85.8862 li
485.691 85.8501 li
485.975 85.8784 li
486.258 85.8979 li
486.541 85.9082 li
486.824 85.9087 li
487.107 85.9009 li
487.391 85.8838 li
487.673 85.8579 li
487.956 85.8232 li
488.239 85.8286 li
488.522 85.8594 li
488.806 85.897 li
489.088 85.9399 li
489.371 85.9902 li
489.654 86.0459 li
489.938 86.1074 li
490.221 86.1748 li
490.504 86.248 li
490.787 86.3262 li
491.07 86.4106 li
491.353 86.4995 li
491.636 86.5933 li
491.919 86.6924 li
492.202 86.7954 li
492.485 86.9038 li
492.768 87.0161 li
493.051 87.1328 li
493.334 87.2534 li
493.617 87.3784 li
493.9 87.5063 li
494.184 87.6382 li
494.467 87.7744 li
494.75 87.9131 li
495.032 88.0552 li
495.315 88.2002 li
495.599 88.3486 li
495.882 88.4995 li
496.165 88.6538 li
496.447 88.8101 li
496.73 88.9697 li
497.014 89.1309 li
497.297 89.2949 li
497.58 89.46 li
497.862 89.6279 li
498.146 89.7988 li
498.43 89.9707 li
498.712 90.1445 li
498.995 90.3203 li
499.278 90.498 li
499.562 90.6768 li
499.845 90.8584 li
500.127 91.041 li
500.41 91.2236 li
500.693 91.4092 li
500.977 91.5957 li
501.26 91.7842 li
501.542 91.9727 li
501.825 92.1631 li
502.109 92.3545 li
502.392 92.5469 li
502.675 92.7402 li
502.958 92.9346 li
503.241 93.1309 li
503.524 93.3271 li
503.807 93.5244 li
504.09 93.7227 li
504.373 93.9209 li
504.656 94.1211 li
504.939 94.3213 li
505.222 94.5225 li
505.505 94.7246 li
505.789 94.9268 li
506.071 95.1299 li
506.354 95.334 li
506.638 95.5381 li
506.921 95.7432 li
507.204 95.9492 li
507.486 96.1543 li
507.77 96.3613 li
508.053 96.5684 li
508.336 96.7754 li
508.619 96.9834 li
508.901 97.1914 li
509.185 97.4004 li
509.468 97.6094 li
509.751 97.8184 li
510.034 98.0283 li
510.317 98.2383 li
510.601 98.4482 li
510.884 98.6592 li
511.166 98.8701 li
511.449 99.0811 li
511.732 99.293 li
512.016 99.5049 li
512.299 99.7168 li
512.581 99.9287 li
513.147 100.354 li
513.714 100.779 li
514.279 101.206 li
514.846 101.633 li
515.694 102.275 li
516.827 103.132 li
518.525 104.421 li
525.318 109.584 li
527.3 111.088 li
528.998 112.374 li
530.413 113.444 li
531.545 114.298 li
532.678 115.151 li
533.81 116.002 li
534.942 116.852 li
535.791 117.487 li
536.641 118.123 li
537.489 118.757 li
538.339 119.39 li
539.188 120.021 li
540.037 120.651 li
540.887 121.281 li
541.452 121.699 li
542.302 122.327 li
542.867 122.744 li
543.434 123.161 li
543.999 123.577 li
544.566 123.993 li
545.132 124.408 li
545.698 124.822 li
546.264 125.236 li
546.83 125.649 li
547.396 126.063 li
547.963 126.475 li
548.528 126.886 li
549.095 127.297 li
549.661 127.707 li
550.227 128.116 li
550.793 128.525 li
551.358 128.934 li
551.926 129.341 li
552.491 129.748 li
553.058 130.154 li
553.623 130.56 li
554.189 130.964 li
554.756 131.368 li
555.321 131.771 li
555.888 132.175 li
556.454 132.577 li
414.931 167.872 mo
416.345 166.376 li
417.761 164.884 li
419.176 163.394 li
420.591 161.907 li
421.724 160.719 li
423.138 159.237 li
424.271 158.054 li
425.403 156.872 li
426.535 155.692 li
427.667 154.515 li
428.8 153.339 li
429.932 152.166 li
431.063 150.994 li
432.196 149.825 li
433.328 148.658 li
434.46 147.494 li
435.31 146.622 li
436.159 145.752 li
437.007 144.883 li
437.856 144.015 li
438.706 143.149 li
439.555 142.284 li
440.404 141.421 li
441.253 140.56 li
442.103 139.7 li
442.952 138.842 li
443.801 137.985 li
444.366 137.415 li
444.933 136.846 li
445.499 136.277 li
446.065 135.71 li
446.632 135.143 li
447.197 134.577 li
447.764 134.012 li
448.329 133.448 li
448.896 132.885 li
449.462 132.322 li
450.028 131.761 li
450.594 131.2 li
451.16 130.641 li
451.442 130.361 li
452.009 129.804 li
452.575 129.247 li
452.858 128.969 li
453.142 128.691 li
453.425 128.414 li
453.708 128.137 li
453.991 127.86 li
454.273 127.583 li
454.557 127.308 li
454.84 127.031 li
455.122 126.756 li
455.405 126.481 li
455.688 126.206 li
455.972 125.931 li
456.255 125.656 li
456.538 125.383 li
456.821 125.109 li
457.104 124.836 li
457.388 124.563 li
457.671 124.29 li
457.953 124.019 li
458.236 123.746 li
458.52 123.476 li
458.802 123.204 li
459.085 122.934 li
459.368 122.663 li
459.651 122.394 li
459.935 122.124 li
460.218 121.855 li
460.501 121.587 li
460.784 121.318 li
461.067 121.052 li
461.351 120.784 li
461.633 120.518 li
461.916 120.251 li
462.199 119.985 li
462.481 119.721 li
462.765 119.456 li
463.048 119.192 li
463.331 118.929 li
463.614 118.666 li
463.897 118.403 li
464.181 118.142 li
464.464 117.88 li
464.747 117.62 li
465.029 117.36 li
465.313 117.101 li
465.596 116.843 li
465.878 116.585 li
466.161 116.327 li
466.444 116.072 li
466.728 115.816 li
467.011 115.562 li
467.294 115.308 li
467.577 115.055 li
467.859 114.802 li
468.143 114.551 li
468.426 114.301 li
468.708 114.051 li
468.991 113.803 li
469.274 113.556 li
469.558 113.31 li
469.841 113.064 li
470.124 112.82 li
470.407 112.577 li
470.69 112.336 li
470.974 112.096 li
471.257 111.856 li
471.539 111.619 li
471.822 111.382 li
472.105 111.147 li
472.388 110.914 li
472.671 110.683 li
472.954 110.453 li
473.237 110.225 li
473.521 109.998 li
473.804 109.773 li
474.087 109.551 li
474.37 109.331 li
474.653 109.112 li
474.937 108.896 li
475.219 108.683 li
475.502 108.471 li
475.784 108.263 li
476.067 108.057 li
476.351 107.853 li
476.634 107.652 li
476.917 107.455 li
477.2 107.261 li
477.483 107.07 li
477.767 106.883 li
478.049 106.699 li
478.332 106.52 li
478.616 106.344 li
478.898 106.172 li
479.182 106.005 li
479.465 105.842 li
479.748 105.685 li
480.031 105.532 li
480.313 105.384 li
480.597 105.242 li
480.88 105.106 li
481.163 104.976 li
481.446 104.852 li
481.729 104.733 li
482.012 104.623 li
482.296 104.519 li
482.578 104.422 li
482.861 104.332 li
483.145 104.25 li
483.428 104.177 li
483.711 104.11 li
483.993 104.053 li
484.276 104.004 li
484.56 103.964 li
484.843 103.932 li
485.126 103.909 li
485.408 103.896 li
485.691 103.891 li
485.975 103.896 li
486.258 103.909 li
486.541 103.932 li
486.824 103.964 li
487.107 104.005 li
487.391 104.056 li
487.673 104.114 li
487.956 104.182 li
488.239 104.258 li
488.522 104.343 li
488.806 104.436 li
489.088 104.536 li
489.371 104.645 li
489.654 104.761 li
489.938 104.884 li
490.221 105.014 li
490.504 105.151 li
490.787 105.294 li
491.07 105.444 li
491.353 105.6 li
491.636 105.761 li
491.919 105.928 li
492.202 106.1 li
492.485 106.277 li
492.768 106.459 li
493.051 106.646 li
493.334 106.836 li
493.617 107.031 li
493.9 107.23 li
494.184 107.433 li
494.467 107.639 li
494.75 107.849 li
495.032 108.061 li
495.315 108.277 li
495.599 108.496 li
495.882 108.717 li
496.165 108.941 li
496.447 109.168 li
496.73 109.396 li
497.014 109.628 li
497.297 109.861 li
497.58 110.097 li
497.862 110.334 li
498.146 110.573 li
498.43 110.813 li
498.712 111.057 li
498.995 111.3 li
499.278 111.546 li
499.562 111.793 li
499.845 112.041 li
500.127 112.291 li
500.41 112.542 li
500.693 112.794 li
500.977 113.047 li
501.26 113.301 li
501.542 113.557 li
501.825 113.813 li
502.109 114.069 li
502.392 114.327 li
502.675 114.586 li
502.958 114.845 li
503.241 115.105 li
503.524 115.366 li
503.807 115.628 li
504.09 115.89 li
504.373 116.153 li
504.656 116.416 li
504.939 116.68 li
505.222 116.944 li
505.505 117.209 li
505.789 117.475 li
506.071 117.74 li
506.354 118.007 li
506.638 118.273 li
506.921 118.54 li
507.204 118.808 li
507.486 119.075 li
507.77 119.344 li
508.053 119.612 li
508.619 120.149 li
509.185 120.688 li
509.751 121.228 li
510.317 121.768 li
511.166 122.579 li
512.299 123.663 li
519.94 130.999 li
521.922 132.897 li
523.337 134.251 li
524.47 135.332 li
525.602 136.412 li
526.733 137.489 li
527.865 138.564 li
528.998 139.638 li
529.848 140.44 li
530.696 141.243 li
531.545 142.044 li
532.395 142.843 li
533.244 143.641 li
534.093 144.437 li
534.942 145.231 li
535.791 146.024 li
536.357 146.553 li
537.207 147.343 li
537.772 147.869 li
538.339 148.395 li
538.904 148.919 li
539.471 149.443 li
540.037 149.966 li
540.604 150.488 li
541.169 151.01 li
541.735 151.53 li
542.302 152.051 li
542.867 152.57 li
543.434 153.089 li
543.999 153.606 li
544.566 154.123 li
545.132 154.639 li
545.698 155.154 li
546.264 155.669 li
546.83 156.182 li
547.396 156.695 li
547.963 157.207 li
548.528 157.718 li
549.095 158.228 li
549.661 158.737 li
550.227 159.245 li
550.793 159.753 li
551.358 160.26 li
551.926 160.766 li
552.491 161.271 li
553.058 161.774 li
553.623 162.278 li
553.906 162.529 li
554.473 163.031 li
554.756 163.281 li
555.321 163.782 li
555.888 164.282 li
556.454 164.78 li
.912474 .787625 .619837 .97467 cmyk
@
grestore
gsave
395.366 169.537 mo
557.704 169.537 li
557.704 7.19922 li
395.366 7.19922 li
395.366 169.537 li
cp
clp
.41625 lw
2 lc
413.681 85.8501 mo
556.454 85.8501 li
.912474 .787625 .619837 .97467 cmyk
@
grestore
.41625 lw
1 lj
430.669 85.8501 mo
430.669 88.0146 li
416.517 85.8501 mo
416.517 88.0146 li
.912474 .787625 .619837 .97467 cmyk
@
444.821 85.8501 mo
444.821 88.0146 li
@
458.974 85.8501 mo
458.974 88.0146 li
@
473.126 85.8501 mo
473.126 88.0146 li
@
487.278 85.8501 mo
487.278 88.0146 li
@
501.431 85.8501 mo
501.431 88.0146 li
@
515.583 85.8501 mo
515.583 88.0146 li
@
529.736 85.8501 mo
529.736 88.0146 li
@
543.888 85.8501 mo
543.888 88.0146 li
@
486.922 170.075 mo
486.922 3.78955 li
f
1 lw
4 ml
486.922 170.075 mo
486.922 8.09521 li
@
489.896 8.9707 mo
486.905 3.78955 li
483.914 8.9707 li
489.896 8.9707 li
cp
f
414.671 85.8501 mo
559.172 85.8501 li
f
1.09613 lw
414.671 85.8501 mo
554.452 85.8501 li
@
553.492 89.1104 mo
559.172 85.832 li
553.492 82.5527 li
553.492 89.1104 li
cp
f
ULKHMX+TimesNewRomanPSMT*1 [18.3071 0 0 -18 0 0 ]msf
491.702 16.5977 mo
(E\(eV\))
[11.1826 6.09668 8.125 13.2207 0 ]xsh
1.3875 lw
10 ml
486.922 10.4702 mo
484.757 10.4702 li
@
486.983 35.7578 mo
484.818 35.7578 li
@
486.983 60.7686 mo
484.818 60.7686 li
@
486.982 110.977 mo
484.817 110.977 li
@
486.922 136.028 mo
484.757 136.028 li
@
486.922 161.501 mo
484.757 161.501 li
@
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ULKHMX+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B81F2C797FA61189B8881D0DB497EEC4F8> |-
/period <1C60D8A8C9B8707CC95A9B5DFDE3A4AF8C8BB7D0C82C30C322ED949
85BC6C2F162CD480F8280AD954FE8DC511B40B423DB4A6012D9C419E4DF4F375
C6ADD098717CA70F621> |-
/zero <1C60D8A8C9B7A73DAAFDCA97EBBC8D8E35A41D9404C5638B059E1CA50
B5366543C3D584AD9E19987218AC5999BB0F2477597AB6F8DD868788C8440CBF
4A338EF64ACD9BF2268656755741DB71FD86387D4A7AA1CFD19937BFD209E4FB
CD1952717C8CF8C0555CB2D0238DC43B2A6A2DE4D7366DB210D2673870D0B0C5
8344E6AEF91B916BAAEAEF37B22F065E870AFE6638E56D0B4AE01785D59EE234
02242D396440157FC51> |-
/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |-
/five <1C60D8A8C9B7A73DB97C1FD4849B14157B765BEEE66B9438731A1E1DB
F6D904609867EBF49E3E19DC6BA786F7382AB36C8CFA3690DF4F8E7A258691DF
DD71792965BBA1DCE407BE309901C1513A762BED3C73A852D4EDA1BE20A2B364
C59E2224D36D9C8BEE5DE8D6C54C49D0F66DB7448A8FCE0E63D5DEE7BBBA026A
808CDA9AD5556005639017FF42B963FB833B4B64B6445B350600BDCDD563F> |-
/p <1C60D8A8C9B7A73DDE03BEEA75B31F61E78B8C94AAF630ACAE1A607BD40E
B48302A40F17E763F71E8B5595B8EEEBB33C0827EEA0DE5370DD4C7A09244048
D0DA814D6E79BAC2B8E456D2F119496FF35E5A13F4B8F71ECD895B10E20FBAC6
66023D0941B5A0FF139CBD18745BC2892DD91EE541EAD2B54AF0839C3327F759
04A81A3805CFC7AF83735A7079B305271753A14327F3CB693ACCFE5C9D6A3B84
31B357819DFFAD81BD2A60573E4CA4C48EC0A5E07291768D829E6A70067C076E
94545FD4D8E2BB7431617263A47DB04F0B8630D6AB06FF2DD1B1F383A59D02DF
1C7730E7CC0F462D79552DFA> |-
/x <1C60D8A8C9B7A73DD670F5272DD145294083C4293196A1DBA349EF195DAA
DD76F8FA5D95CD31B7A1C2B32491F1D3BDEAF32234D0995EB67A2BEF06777B5B
8AB01E1FC457D70FEE563CF2C0C851F3CC8B137B00E8CC0DDAE3A128D9A2319F
3FF89B241236A311487E7B00ABDB18C5C11783A73226CB9112660CA259881698
31DBD8D37F0570522652B666847FB24934B522403DA00EF77D9BF6494155BEAC
D6C4576905B10BBFDD62A70CAEE193F073806BE591E56E5DC8424D64A808D752
8EBE8928C7E8D537D6DCC6918CF06863B4A936B7CA4331A2F9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ULKHMX+TimesNewRomanPSMT /Encoding get
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 53 /five put
dup 112 /p put
dup 120 /x put
pop
%ADOEndSubsetFont
/ULKHMX+TimesNewRomanPSMT*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen /period 
/.notdef /zero /one 3{/.notdef}rp /five 15{/.notdef}rp /E 5{/.notdef}rp 
/K 10{/.notdef}rp /V 14{/.notdef}rp /e 10{/.notdef}rp /p 7{/.notdef}rp 
/x 135{/.notdef}rp]
ULKHMX+TimesNewRomanPSMT nf
ULKHMX+TimesNewRomanPSMT*1 [18.3071 0 0 -18 0 0 ]msf
541.645 99.6313 mo
(p)sh
ULKHMX+TimesNewRomanPSMT*1 [10.673 0 0 -10.494 0 0 ]msf
550.798 105.625 mo
(x)sh
ULKHMX+TimesNewRomanPSMT*1 [14.6457 0 0 -14.4 0 0 ]msf
461.911 14.5977 mo
(1.5)
[7.32324 3.66113 0 ]xsh
461.911 40.6318 mo
(1.0)
[7.32324 3.66113 0 ]xsh
461.911 65.1655 mo
(0.5)
[7.32324 3.66113 0 ]xsh
456.543 165.766 mo
(-1.5)
[4.87695 7.32324 3.66113 0 ]xsh
456.543 140.432 mo
(-1.0)
[4.87695 7.32324 3.66113 0 ]xsh
456.543 115.433 mo
(-0.5)
[4.87695 7.32324 3.66113 0 ]xsh
560.411 .5 mo
560.411 171.2 li
f
1 lw
0 lj
560.411 .5 mo
560.411 171.2 li
@
412.919 .5 mo
560.411 .5 li
f
412.919 .5 mo
560.411 .5 li
@
412.919 .337402 mo
412.919 171.038 li
f
412.919 .337402 mo
412.919 171.038 li
@
412.919 171.2 mo
560.411 171.2 li
f
412.919 171.2 mo
560.411 171.2 li
@
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ULKHMX+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/k <1C60D8A8C9B7A73DB907772911B7C2CEAC1D2074B2642ADEDFBA1679ED25
4D30D2D9A5BDAE41A6A7C0D78C5D75E9522858A70EEA458FC30CFDA879F9C1CE
85600A63BE4554ACA119AD822CC5727738E5E5FAC782F5B6F69100B3F9A42C95
FB8AA53FD907276C4A477291A36A9FD6B1870ACEAFC297FB6D4CC1F0091BA095
24439681D5D4A76F017EDD23AA69786F58BFB619D5D45A35621B583AF1C763E9
94CD0C086A44F5E2750B3F3193B4E6E5A27940B47B22FB55ED113A092C7013A9
8E096292640D2EA9CE95DF810761FDAF86F75648F6AFC27AA39909F96AF13446
AC99> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ULKHMX+TimesNewRomanPSMT /Encoding get
dup 107 /k put
pop
%ADOEndSubsetFont
/ULKHMX+TimesNewRomanPSMT*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen /period 
/.notdef /zero /one 3{/.notdef}rp /five 15{/.notdef}rp /E 5{/.notdef}rp 
/K 10{/.notdef}rp /V 14{/.notdef}rp /e 5{/.notdef}rp /k 4{/.notdef}rp 
/p 7{/.notdef}rp /x 135{/.notdef}rp]
ULKHMX+TimesNewRomanPSMT nf
ULKHMX+TimesNewRomanPSMT*1 [36 0 0 -36 0 0 ]msf
85.3252 373.717 mo
(K)sh
ULKHMX+TimesNewRomanPSMT*1 [20.988 0 0 -20.988 0 0 ]msf
111.323 385.705 mo
(-)sh
ULKHMX+TimesNewRomanPSMT*1 [36 0 0 -36 0 0 ]msf
514 349.274 mo
(k)sh
ULKHMX+TimesNewRomanPSMT*1 [20.988 0 0 -20.988 0 0 ]msf
532 361.262 mo
(x)sh
2 lw
482.649 336.816 mo
482.649 346.415 li
473.051 346.415 li
@
[11.0054 11.0054 ] 0 dsh
462.046 346.415 mo
445.537 346.415 li
@
[] 0 dsh
440.035 346.415 mo
430.437 346.415 li
430.437 336.816 li
@
[19.0509 19.0509 ] 0 dsh
430.437 317.766 mo
430.437 289.189 li
@
[] 0 dsh
430.437 279.664 mo
430.437 270.066 li
440.035 270.066 li
@
[11.0054 11.0054 ] 0 dsh
451.04 270.066 mo
467.549 270.066 li
@
[] 0 dsh
473.051 270.066 mo
482.649 270.066 li
482.649 279.664 li
@
[19.0509 19.0509 ] 0 dsh
482.649 298.715 mo
482.649 327.291 li
@
412.919 171.2 mo
430.437 270.066 li
f
1.51854 lw
[] 0 dsh
412.919 171.2 mo
413.714 175.686 li
@
[8.29949 8.29949 ] 0 dsh
415.162 183.858 mo
428.918 261.494 li
@
[] 0 dsh
429.642 265.58 mo
430.437 270.066 li
@
560.411 171.2 mo
482.649 270.066 li
f
3.19943 lw
560.411 171.2 mo
554.478 178.745 li
@
[21.3172 21.3172 ] 0 dsh
541.299 195.5 mo
495.173 254.144 li
@
[] 0 dsh
488.583 262.521 mo
482.649 270.066 li
@
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ULKHMX+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B
4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25
003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0
F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11E
C41D90433CE0F55F0A42A96AF852FD50FA> |-
/four <1C60D8A8C9B7A73DB6B62B7A95EE6C20B94EAC94CA9AB50BFD020369D
6A63C8EA15A0D9A89B2ED9293078F8D3EE629592E255C65B246> |-
/six <1C60D8A8C9B7A73DB682174C160AB8115D90A4524BD5B352C23110F23E
E4E20266716093AE0643A076F6C57BA527F49BB819243E28C4CA7F711F41FA01
318856C15674E51D546E83D25FE9DB7A4B9EDFDDE57E488CC507C2304526D6E8
0E07D1EEFCA86373B2F664DD3DA4646061C700F112AB44ED3896FA596FE81443
6AD1F1DC5FEDB207A575A17735F66E79BF0D0E423C92F1E9255D38F15B49459F
3693E95DCE92EBF25C243713EDA9138A49C42AA83683249878EEA825672AC6D9
9C32B9109B3D5797A7> |-
/eight <1C60D8A8C9B7A73DAB2BA6B835CAFB4C9A41096F555C470FE6294A70
7AE711C017C95446B200870C2B6A47FB931BCEBEB5BBC6B53605850C75701306
FD83F9DC906687C2B3A2C9C0DB9DB68E95D3478DEA01153491C8534F5AD89998
0F04C195BFB522EDEF282420AA1F12E08397ECA941D5934294BD451B3952E622
9D3E7987DD36FC8E43559904E0205D3416EDD1402AB05184D2018B2C7B816330
FD0C2740A24C74F80E34F93317BBB1D6B8C4D916C15B7FF1D533D7762324A101
7022A27246D93B9768262BFCC673CAD6781894C98679A5889F9338F377D1995A
EDF5695FBA7A65628522691535557B2045419DD63F87D7A64B6A962B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ULKHMX+TimesNewRomanPSMT /Encoding get
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
pop
%ADOEndSubsetFont
/ULKHMX+TimesNewRomanPSMT*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus /.notdef /hyphen /period 
/.notdef /zero /one /two /.notdef /four /five /six 
/.notdef /eight 12{/.notdef}rp /E 5{/.notdef}rp /K 10{/.notdef}rp /V 
14{/.notdef}rp /e 5{/.notdef}rp /k 4{/.notdef}rp /p 7{/.notdef}rp /x 
135{/.notdef}rp]
ULKHMX+TimesNewRomanPSMT nf
ULKHMX+TimesNewRomanPSMT*1 [24 0 0 -24 0 0 ]msf
244 532.274 mo
(-8)
[7.99219 0 ]xsh
244 479.274 mo
(-6)
[7.99219 0 ]xsh
244 424.274 mo
(-4)
[7.99219 0 ]xsh
244 373.717 mo
(-2)
[7.99219 0 ]xsh
253 264.274 mo
(2)sh
253 210.274 mo
(4)sh
253 157.274 mo
(6)sh
253 104.274 mo
(8)sh
277.497 66.5068 mo
277.497 9.50684 li
f
1 lw
277.497 66.5068 mo
277.497 25.0078 li
@
288.206 28.1592 mo
277.438 9.50684 li
266.668 28.1592 li
288.206 28.1592 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5
[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/ULKHMX+TimesNewRomanPSMT*1 uf
/ULKHMX+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
/ULKHMY+SymbolMT*1 uf
/ULKHMY+SymbolMT uf
/SymbolMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 15.0
%%AI8_CreatorVersion: 15.0.2
%%For: (McCann, Edward) ()
%%Title: (fig_BZbands.eps)
%%CreationDate: 5/20/2012 8:36 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bm9,-ZRC,apKIA'A;2ekAgW0bRZNVm">Z#BbRhc2k^Il.35>E,Zt3_d1[KPdm+"n8-=BJHV,F9l<DlDDLUlr&eEW#S\ab04
%/qJ*6iK,Q&&%c9P^[oM)iC33ASskuP"h7As!!Tnu1_u.gdY2[^5*SRD>@lTSVpkQg0NP&B=8m,PjLUX<i/QfDOU$O/?`r0LCA-=A
%icm9^ASZc+)rnbW*PV*UlFilR]oi?+*tP3qD%/_,2/;a)AC-NENb`7MOY<suON"I[P\)P>%rg_]07;mD]g:sr5&A;4dM5A"d.>U#
%C;Ie%O:GFp^Q[jB;0+F0ag[oTEiV;*n#,ADljNcjag2lC(Ea&>0n9.B`NgcRiW9Em#fjg?$Xd7>Lk%-U4qS=Ei2]s>)KWIHmc@2^
%3`DhWD`mmc:l:M-A1/mT!1O)j71t`5&EcB_GaK#['-'f*e`Gb#+O+HPAVjM3iX1<uMQkuP;8<cC/.m\m3Bld:7090-,R1h>!hVkd
%E@r/cE02iRT_5VgB2ALWl+2tQQE1W%B9cW%pKrGXHoT>ipliA%T+>Jo@FUbY`am7!bi.l-9-2Gm#_Y1!3i%T4LA"22e0Uq9c[]\h
%#BRtX,bU:6"2.g!rg"9'8Tc5<lJkB&XBuN`="Fsbn9@]!!"MJ(HlQRNKn)iB<2@2#8O,X&&.4,PK`2a/GZF!NHD;`30_SLEH7_hu
%@Y-+j5Bm5Mr"k19rs=s`c*Ng#U1=A*b[5->3%f/U,LGa^+K6Tb#C.Z7dJn2W8e+D9W$'>1n=1"X6D.ujj3%<`6dj)-J"[GON(2c=
%+osq"H29?3Jq$-2pbih<DaP]G<YSDR>V-kJ`M-6).iO,\U/>#D)AP[J1m*<"&d_YeO[,ZJIY#HN$!7UbK:fAM4qES5o<;sn&)ZI>
%Y`(!I\"X_!U?\HY$]$"0KSd\o@u;s8r"`>0mmA6p*WCW/@(Y>E/-ait>DqCT7_ql&"uZg;U:+!Di6&90n.YeQNImc6'P8*b%3#I8
%;;:%Gp_^FI@`:IK'Yn1^C%)e%&OlJRp(APjEuOW_ZO20@Wjq`3!LS7.*QF.rVd2`Li.%sJCa8k2TQ!E\QK*1bj5:_U%(;;l1hI3"
%%,2%Pi@ihK/-k[.&.]l!:KS%6&Ur`b`8ZB:M^a09W@T1OW?flo_^&^J_d]!YPW-,F\,hD19H(p0@FK,37Hcs<"u_Rc-u:$+Na%NN
%_`#A-=:EA6Ca8'MXpdO');%2NSOtm_8XOoC#F9H]c;\JUg`b[^aC(^7K7rqMk!#XQo,_D]bX9=tNhPjXjMPF@56d/Li:m!g+W_.n
%/D7Q%0nV.c&cKVAXGq[6#?7Ur<uYe:=kYjNP"s&J-Ae\4-;AUCCV<GfXn;moM6[dpf2tA]V'K!`(bi,8o,RT3rt8>RPCJ17?YP#[
%5<,j_J(e9-%oeTXn0@<RrYLLOhqDH80-80Kj)Gf\SG^QBnLNu[rg1gehqDH8%ob1rn0@<Rr`:Z1hqDH8O&Q&j4V.E$IcC@G^ZdEL
%(Ud0HkJIn:&-6%\`aa_As2>$UNYN`>r"U^fZ%rD[B&aI(<K@DPbZH#d&4KJS$bo!S&O@*S&6K%$"4]+Op^)gI:shV.8;\4.<)JIF
%[gDgFQc:-[G#C=1.fat\"oO.6@US[g"Ms7U?jmUP-k7?Ws5>=L3.eAg0cjF7,Jg%k\-V;LTTF-0.ZbsT8m]Dq!E$Xo@2+(pHij@V
%gEA,tarIMh=bAuu-]!&0@'*9CJBBq.7L/u[(GRik:tdacFdPC\3bWu\228o5['d7HUkSe:bouWYItR#_$t(@a-:)r^eA+pdR!FpM
%*2872*%aF++N@eYiU2?3!1uP<W9D$[YiE#=Z\Zuf(*[qA.5s(DT]k;e`&\/;@>M1uE&!Xsr#8Rbb)(psTEeJW;f37/:t^Ui_P[ZI
%'_;V(4*cA`UFiA0")jr6A1/iu4DHr'%CQs7VP=KG,&/ef.:!W)OU,b)TsdDsY7#_GPC)"MrFgk6.0W9)1%VaQK3?/c]%/:2/oYMJ
%L>._l#KID:4X)GS;A3*]L<9T-*TF`O(5e<3.Um.Y)<Y+!@Bi\+N`KdCe$`.X1f;5eOUj06"quuA9r(tB'SY+LP]`3\Wk+jOM+8A!
%X4gifQ'):/:4f\[OWp_4,36SW6;5kD/.EM:;I'P?$-SLH6pNIBddA[F:4_RWKlFsV2!L_A6Q9O(`^)X\_#1*f%/5)Y.6[l7Ri859
%&_pe=b]MQ(TTHUUD8mJ1%j(*U!mIVPc"V\_G#d#<[NdPQoi[6R&)&l:*Oe2/P!t*KViu.df6K\>Vi<]ZaKXrreZj3Y&eIKs([MQ'
%3[mjI.HjC4O!@b$ijhTY(0lM`*?dV@b'O_]E]Wr0P;iH#7jr2#R*O9!+ZbZ/Tb:Ln6$4<<-F0XJ?ll(T6r^l:fIiqVSEW"M8CF2i
%g0Rb?/'M`0<SJ]o=R+m\!A^-PXK6E9aWRWf(hH-K)2t!N8?Fm'I1RqE>';sJX0#)m?)uRCKI^K*lR:pnRgXNO6PV!o<(+)BnZ9st
%=LCFA8s.hJ)HOug;B9O5dddH:8!JjUJhooq@@@8:-E$<VWi@IZG1L6D(tM!C(\2Bh8I&.`Go!;9XDnmsp8Gu<gdY>I[)kWR(T<19
%3_:p]7,J>tMHElQ9qGn.CE1m(aG@PD;9.h+fcCS?D.'#T7A>,c+:5G3_ceiRAOYd!VE_&-ZcYSTZBbr#DF@c<4\+V(FO#J<V>_db
%e?"Ra^/%b("Q?/oM6N>H.Zoj='lI9_.k040<ae^u9qba5[6%2H'3[K>gB)/-nO-NDIRj@:[ag2!\jDkUa;Uo?F>"mfqZpj+X;sgo
%<idcj#r9].#*1Yn%H_)(Dde`V(K=%m.#3Cd3tii,5g@dQ&>^.*Bfk:"<c^H,1DD^*)F_6b5qFN\:%FMU`q1P%b/,^Rjg60UWkoXK
%N?Q9!#"=N113LO/p-rboZ#_t"8CSV9bnUn$AAf'ARTL+>("i"cRM!rH/o"Nd7BJU2"kIH'U0:J,iF1/bYVsPL%LFpSS&!I<V*8-]
%SKJM84K-=8aV-De,Ih5crIYKHs%b1\ec8hMT7Xs_M%N84NkYoU12s/uY)9=6s)`!Qbld#+i"L<2KXuT#X+J&S$1!DRX%n2X3c"q!
%#9j)baSQeX88K79\3TBfiX?HI9I2ghWFV+\Y.EFWP-C&+rac3iY.i?f/$E\kXXY%m<_;n&`_=mNR8E93NGLqg:?uOmk?Kf=..IUY
%dg@h[:F!fuE4gjERj_*cAVJkBHX2GCOUF?fBRQ1h!\lbCn[,<R4%BW#7tG-er23!m0o</#nl\QcT@^)0iJFNL*qaHNdAm$u1mF8b
%;khq^&cN0OC6aceFdes8$`]GiE2)=p5Z[h1&tP!3$*):j$!<BbS'+[(6>CWgTfVpTN3bPcCNXB#BhFnA*SBfB"eo_YO!5_S"gnV'
%GmXrbh<;e9I;(;*JI:B[aqoo-Ot[j&l$+C`\5(b<J!(+1CM?gf%c`,!V#l9Y3)@-o$A^Uh;0r?PX57.?7Ht)Wl5@'kOJ[>Cg13p4
%1@7\2FoMW*`[\L2k($CPe!--_mH1f",LR/ME9\^>UI0fuT@^khM5((.iXqO/Al59b1_3V-U^4"l,niB&lA24#&/@;C,g%O[9L_;,
%[(/S)dQ*R@%7-b>auEuK2&^12<5;D0kr9:lNGIJY9G&$^bt,ip.YO5Tpa$soJf6k)?q<[7U6WYQ!/[4Bj\+TDW!X1LM/2Pd<])"m
%9i;fYR50H"VPH%GU7.1f0j*1<6I`#T/\I_oVqSpd9CnV%M40%CAe?L6<,(:l7-GaY+EeZ@&TnkS3YgUm%iH8+k2:Me)E*Tm-W#E9
%<"L5hNbW(neE/3C-Y2kc_97MEbUj5XNl1+M0riqe`4Ad)!kh=%7V<JF#OOTO?$$%iMc-;&hn"''rdT96WaSA02U)EC]$CWtEZY[U
%)O;ldR9)6`Z)AK=@^Amp&Y2'\MI`\=jg.ot_;@f/Fg?jrC6;CdO?0jciD`f^RINQ>KS9)&^QE1g2-)tjG<,i,RNSEO1:W-DSA[_8
%XG;L1k;;D09pQ[YCikL'>kE2@S-#TSV[1j&#`PE*9ZfILoL+r^NaebdL-h]`E)!ClW^c*LZ`L)5W8`YC2GlP:Mi+ii#H!e^;EPCN
%cq/bV92NZDh1t"tfGYpENfD-,FZqp7di\cN%u;APC8MY$:2#<8Gc`ep:=KM+fL-(,>!h]rOa.j;f&U/TS5k9"qDVBIo3'N1PUME]
%S]U,$Vlj9]C'bpSR+D!oV\)M.0:#A8R8hcM2,$NM*]pd%[AcP'pkc"b7%FgiW;[a@4MhMTERbe5K2&AS=&!.@ikQb>=^1/2V[aJO
%H>:VQ>0%AD:n&#NZS?ShFUCt2!L6X7>c/%Hh5=^p@rqKH8(t4O848Bkl+BQHn"T+FYYcocUgRqF1MG!i$+"$O;Hr504D?.*8:j'@
%k_$9JR"25."[m9K@l'*t4u<>oAL#2[<L4ADSrn9/(9)TbEQs69^*BTmU.,gVS.nq8";bIt",XGm1Q9OnQ:@1MkA\)7?%M#jRXn5f
%b]m()1lYDpKsaX;:;3O+0a9#c&?=!5;>Ni=7PfHm&6ZEKC?UAsL"*TM`+S`X\X:r6.LcuimARjSCMA*$(JZ/k$rNd])Mm+C"lG)F
%`&o.b6<*(a/.&H'iOIU7KPK-/#o-Wq!C\C%\FqJTih^R%FVSM5J\1bb#j]&sNR.2Ng;i0(-5*h4e\A?"W-W_d%6N@OKA4Di+*bJ]
%iB]kqp'=1)_!2o1U==W$CLBtga/SO-XZtk8#gr7*Zq,ucaVD1u:JC.P*bdQd4j8]k>nL1t8)b_T#h'lS\H\[g!?6lq4=.E>O,-9U
%j-4r.&$fY:]ST12rZI8Y1QGYA>'c^9k;\_ZWbjTT0Rn((o;[ZpbsM;\0Q:iml7>qX>]Hc=MfL<Aj/O"6l&['YL?(jM%Bo%uMHKJL
%H69h[$7&@sW]F2@51.#g8m,-\.S`uTfso*SD<*+CdEXJ[iN3TTBT/@X'<7qK7OTF<E=4cf.E%YK=_cctiI,/_Os4uk/$<"gF<[DY
%@iS@q@U,CW[D2Js-mhd."LfCHQhYnYb*YX0(];3f'-Z*;@?-]tLW**uDE9+OoA_"L*=fOuisj,>b'5W.OLNpSoWBOek*)?#hKJl(
%-%`o'nP#PJ7\,+s8jn:P7J]r;S"#&L\MA?u+c\#!OJ['&4W#]_&UrGKi+MUgd$m^U!.D'tFZQfprdaaZAl!-dL[BZjTAW+<B&3!)
%.ZIWJ>#S>=UL7`k)^*c8\NL=$M_715_6Dl#!"XKZHCaIt7>ZoM+8AiG%\Cstnu*j/]0U^urlf\@Q5lDD;G2bVpAqLt!@b06Q@l=0
%C`lNO4Vo23"CG=q=TL+G\q8Cfe-,,oL4da]U<'+lhr%!]fMKS9H.7q?SNlm_4@mX#S)_WJ"K'U^bJW282ZhN>64iY$f9?K7nLW>k
%Hd\0L5m:g<J;UJe:hi>&!*_`:"Xeru'\&XKK<r>4dlCf>Dla(S>t((0?W(r/PCpc`MiWXFkZOqmqB&"=b,sN.!$idK*bdJ35soA?
%S.?0"nMkpl4-pXX#Cc&4K/U_8*_p!g63q1c49/2\N%rNJAestsX0t2")\C4/K6]dMY_]:aMl8C];IldDeTte3Wf0f>R5/?]9QAVm
%hB7IO9GLX-iX/\_65@sK<U1+WK3<+JpcDTK%\QKXciuYkaq%2-#IW+jITc-"'d,*61'A6E(efPp7P)s\85*k,UR"k%&n6VA#Fgqu
%19N6>kd"5,J<JH/4^>"B9D',94gg4WfJ15Ka11o3dPPPcN(FVh?E<g5%mIeQR,b2fN+oGiB<Kh])o%sfB)G@Fn,-%<ZV7eIM-PM[
%Vt6UPFPQp_g;3S78C8,Abq[FN9"M`MU(EMCoG1Du#1_<b:S[p#K:i5#7:E^kb$;+L4crf2\r_t`QD"H&=Ek`hXQbs'9Z.a?l5'$l
%$k;Hj$$mEf\fK#2bE=WP:WfI+GioT][P_sD!!JB/!34cJOde.fb=s$kheMc>9FaV,M.[,CE?H^9$blkqd808@%KAJg?]a#PAZ,XF
%:Q(u4jhZ2Y!*5_BU#C<\P_g(3[f^=i.5(6ZKjEqo)<Y$%bgN/"cQ%K>l=pA;LFSuQ"r&s!Qrf;E8[GQM2ZON9</$?^)MlEESUeYa
%hjY*UJF!sB]0kk6l5iqqQqV'TmCMTCnN^Re/jN`WSZL%SSUV%\[BLMMnFE1Z4>-_F#Un7q\(<HhDt74'A5Us@'K$KSbqSEiWQ5ij
%r%mh-7^m`>(8uhlT#S>2E!!@T?+$glJWF52OX[9GNBdrt.Ug)AWI!^Epa$u$Yec2PrlZ&Jlu9,oc6&SBq6->Rk.ottALHsp9e1Vj
%)udDOhgWAI^Kb4![Hm44F1"9HkBg#hiek:$4+I%QQO<`O8)MrPkjJe/_VjnA7gYIk"43]i,S1?)64!Jh`'jcJ!I0+h7h$69_N,0X
%(5dj"\18Oi7,f0sC\"/a+qY'i\,[np6K'W"7*GBN!KI[ZA*c!T(HcI$r:'d>o*)5-=eXH#M4]t%[jqcWENW[ZF=6:E1*7^8^,V8o
%"1^5nAd6VD5$1Kt"j90AlUq+g10/"+eg+g7Jug)F%j'kGL1$#gpb-kF97q"oVY'ii$gBo%C4fhk#/UNpg($gT]TW:A^f\/l\%Vg_
%"/+c15fr&h`?b0-ifQ\+fJHujb#A)?o1-[Zp:-]dYgdVge>UTm.=)<u%]8dArZ8l!dGWPgr7;5QK"Q8>7q46=JiD+SL84f:*6q[O
%q]Hmu@W)7e)Q]+jK)*lLMr;VsbZ%K[#=UZJfUMR72\8e!+LRWem&pO;-V\q^*<bRWXTCgSY6J!\</".Od0"2%cgKmAE,"AKHA`.D
%DRf2g=e>"TL2YXX0FM8Bo,JapHm6?RU/;^gWaXj%UeG[<:0fr2\D.K-T&iB3<(M)<!\hX#XWJ(!N.`oebI7Dg&2c/&^f]he5l_'a
%?1*0MS<KfFXOj$SE7*pPUe&BPX?hWZW=.,4!j_,!K%Dg-?HS=!/YGG$Fc\a7fQSi;N%LOKZ2?;@MgrmEC9*&V$diWNDP`;3s"XJl
%/bYY@adQT1/Om2*p6lshnCD7ldj>NWD53b"rZA\-o(hfK"N"FD\=u=R?QJc'X+N`(nKbuFIl5XR1Rb8R9#"#BL89[oir@P7C[8.m
%^Ui`\:3Z5/rOfDD$C7]OT6jBpku'Z$(C;3Nhu+7'/GMQ>b7W5PE@5k3JbL;eX6fgcG5plm?0#@(pHPbG!aHqlL]1;!s/N_]<Sm`j
%Po'C#jo*O%VL0N'a!5$#[t/>;".9,bVZ5qaIs'@X\h!KXmeS$V?2l<?:#MfH>&+(P]DqQXmL;:Fk(D=lX6s`9iFJU\40k$O*=0lQ
%cM;B!pnU"A2C,^;BQY)L7V6L\q',8Z(qDH4)\6DmD6-"4nH<UFKBN8d]JCU'IG4o)k;73YUoQ(*<rc'&f.=?J(Kkrd"ikM]J=unV
%KnXU8W>,V(1d)&4Cjl9idKb"aJo3uL#LD"eRrM*0GRa<,ItiRf.,^G(1Sr]jcdZ5.6(j"0s%tIS_SVOQG'ek-,**-O1$EEJ1"1;)
%\;s,.Y<O=EH3u%%);Ms+0DhY(R&br"MlB.]&K'8EbCke>o_i];'enBQ-X7RKRshj/LeY7TmiTrm7Lrch^cQ6UOI;P"]0WQ=cqq1G
%2MGU]VXX:QEQ3kWgg/uSA2ri<s6G9@\l))ul!,gUZMt>aL[Ap'VmGp_+/&W4>=CA/Q(Z)"k>3iBSP/8J`4,gNrR:!+h_gXrmD&W$
%o)8T=-D/0BV>k?-4q`dI)hVgk_6Va")<S+_l?HM)+/-Fo;0"VDZ3L<YCX'GNg.+d7,FSk@Ip1F/^E'`Imsdld"E%q+ro6]Pr'MBu
%/lc#^V_ObDo:dG<BDCm=8'P8>oT-7&OG^-!k=SZBf9Q:j9F3Djr?LMCatp"#Cof3"PLu7ir>#^(30H;![*O+\dn<e;*aD7B_RN_d
%2l-QIm&$_3\NHmgb:mG:>gSaIhq+P*##US.*+8r5ZNh..^;Rj4XMEUX)+@&BKAPt`g.[sW9Bs>Z[77QN3:5DMo1(d7h/:9Hd1#]q
%+rGSJ_&nL07qpJBG!WU1$FJFAY2r]&5'1M*Y//3D_l2/i>t2F\>NU3t)@&XOr@W,mRB3o9'mV:T>`?-dRg!`<b:9fNQ^c3X1h3`,
%7(C6=;Hb]%OUMEr:Gr#dp7=C(`=lZ]//I7I4I8Sin-7]HVpfRKb!L#-)+]6a91ki%o^quCQGnBBp$k2"5hJ5kp)s%l[@fj_GP4&#
%b8^,$GtRlt@\u(r6^a6KKf^30KX>QjKM/';Cr..e>eI,2%G?OK(?3nV"h*bq\;D2,@WS;h(EM\Arb1*RO68<##Ns([Q0eT\"O[bc
%OAUsmngC0Wk`CO7H.mDs9CRaihLD5l2'^+q)&8I0.FMljOmjM%*AB``e)#R7AqnmP&>pbJ3hK,3Z^)0.'RiQ7<GfC5gMC;)a$V[%
%Ps8h]?2i0o<G_>?'%S/)RA]/@/I^p%2!W;]NpO=t:X&Y`iL3:N0]].FiHub&XlD!i[F4Lne=e^qj"@.1;,3ofbLjJlA3;Z2,Ro(L
%,`0pODG>EXnr1!l:ni3AEDq$lkHhGIA#`F`L>jAa+d=j0C%S;[XYIe"r)1e?XfP\VH$EmIe)*&>aLs'LJjh+8K@%k5!aIuuB&S3I
%/C"J&g*!\k$f7<X&Edf/MS2%69gC)C8Bu]in1^!0l@j9p<P\B!a+$eQ]'p=8'.U'C5@nC-QXcQ&T)moJ^c>/RBXY!o]%?s0?kXA5
%%1,_+:!08n&<"Qp-JoFl^hdZJS@OY:/Z\Q>VT;F=<[UdD)m]!QLaQ94LA5G4MhGT`Vgd0JaNK3%nNShSe-\]^EJm^ncGIJFQ557M
%\PP>)feRfk.Zd.Sh9MCZM":r&3$-;5@,c:X3+rZH\T7dF/E%;%`hWBT@LgUB9cC5UEi4$KU+tAQ&@-A%VD_X0&Y[]7('iA"?'#7`
%iR[@lnu*l7V^=@CUXk<f`1Aa?Uk_pT\'RDjXMt0q`HVa8EW8:CVVMoj*W`38FkjGT$kX>rD*/TBo1rJZAZ+H_@7G/e/aGfCTn7U(
%,t%pnMI>'tQJP.p&a+#R1?;WfJ3k)6&seX6DGOhd*jO49E6RC`F1!5ZQ;D!]`_mAL8\GrC_dbg??iupsYctRL`aCVTCqnBBWsRBk
%XA,Imh?Zj2d)f,O!cqG(naQ_uY`.rH3d)Q7L%EYXa:es??=tG"Qno7L=_qpY+7XHCdnRkD_]BUI.I`iX!!&ViK.VMH8Zf>:ENKR)
%%cBN1=:89I$aoWhEq-SMf8@Pa<FUO/F;>A@>$T@U\]_Sd_m&M9*QrEtQ$J+b3FLPr8_!.>1:Z^;/UA6:LA4#'OS!"9GfLSic3Ah8
%#)OU/VT,Xj*W`?4.PLlN-^?$\+a?-e3N$Z@EXj.oqeB+D!S,e1MbYTkTJlup=9'C.8G`fb,OA(L`Y2@77[AU+(nD?'U4KOsE?$#X
%.TB]W_SUe^=`%nZY%oSt^uM&,"7UQhl\m)&:Yo1dolbrjLM^IoP2g_(_)!l!-qtYofhe+g.>nQ_`W9RM]K&di^k`%aH3Se#4*"b,
%<LYoO;Nn]50u:6,dL(L2"Uofn)%E6L)sFp%=SXU"0c%_T,Xc4uUC]/QF!+0Y?)Il+[%VEd)>4.f3^1UCkX%/rn7&u[8L;`3ZeeB>
%L4Bgi*=8r$)"USkZO:rBjA3Ril&FEWA`XV<]B-?(.$i;CPc5[e;+\P`\HTtiX$I_iehi28_Q3r]:gBnab`rhm&!'PX)CTf+>,0k=
%@?tp=`H@E7bm4*"cDP\kgs!U,G,)Z4RKZlIM:*H+Cph&h)LtkY!mck6(QiD3W)OW1(kK!Z<529%5EgW'TWO;1@90bq8?m_t7'Ek8
%);Ba&5\'sqBdlu5,2g`B$^IJQTBXi0H#jgq!N5)Ln%P?Ue4Pa6?.JR$jZJpXYk#%4&l=B$%92N-'aC^QQW5e[0d19lq<R`E\:Fqj
%<)h&kptJeFJ>8ehd=D;58@N8B27)V6T%1J+l]o=2=(*NlK6O2fiTrU/>Z<IRPL+&K3qFa?#La>77&MB'ZRe"gTj8DedXlY+*A02e
%2#jut>?%O]RbI<J'Un\!g/<dh6o%b`/Skb;Ksl(q;H1VN7Q4@gqVEqY1n?ST[Y;qjgHba:*nUq+.Bp^_F(2<t7rh+/<['+q0!GsY
%9*u,QW0nq`,[`eF!kmBS>4=Xa3up5q)N<'N0f,R5BMX$jgIfEdqp&MPO!dX`lNEK?g2R+XB[,rC=duZ*l7X%/=Kg%@9kVTM'phB7
%FbrY1V\b4Be^m(d1NMg,O/3^jX(&JYT+*)On*Y4ulJdM239D$?!lp#P4\NFo31mF8LRBdt$:2.$$RD=D.s`nDPGKR2qX"XD0pLC$
%*d]$+Tp]((_e.#e-N,B#j($>F]#\\'&O@QVo7.*Z<NNoJ+fIhg,WU[1g%]K<JZU>nK"t7h'2lkg5f%KiIW#;#Y`YL(!6ZfV:FT3[
%P,Ko48SOCtr,j\BdOHg0<YWB#MmdOl02e.s#!<IK8tbhH/q(Ln64<*7,Lp([`Uj0rJBLr`^s8I]Qj@C[f;$$KXl[afGbcJ"VPCWZ
%oBO_m2t_99Hn%;V/ji-/IkIL\L>?BQ[!O7iqV9-eSeRP56m"%=dJ[V<Tp38$T-l/Xa4D2?hMd:[iAuG/LVs!/2_FqA3^2sSF8?b6
%aeX<JBkDZ;"9Ft8Bk:A>V(QDkcGa'8P7#L@I.&WB/-H$pSHW8`edF_[.u8u&fP>2%q"`!b?i@_*E*Sf_nMBKWe'\-)=9p!2jaIES
%n0$=LS%EL(69BuLg9J]1\+a]%+*b04b*G\LA5[jG,EnW%L>IONE%\^pXYrFspa(B=<Tf)0a&=NJa:+Z(m9Fk$n&A[Z*Cmi)$;J8*
%Rn9.m5@Hg-k\:%&o/R$4Nd_At<d?XeO8g21C]=8E-K80CblO9OO5&D?2C!G6HoLtGR`Z\+NkDnAhmYP.5CO18o)'d3Ge)]pD)S4S
%r7:HTgQaB\c#Z0"VXtA4PJ,;c<c2l$IdC.Kn+1@lG4Z.]i5qKqG!c7(o^qYuP8uNALYfB'dpR"eIb'FrK%"lkX#/#4\"D_]ONkZ(
%oFZ$pFtC\*6<l%ob6K??ao(h"g[C>IK@oQ&\)F0(R)t[nqbKXf+p-4F$g"k]IQEc:IsP%SXgb+Qf`+3Ue"]:WUic6>+*Ph3oI5)F
%JuhT-qOXXX#j>d!_XS`Ff7fl^3YHYMY6mZ2KeGV%'N>4.i>R()0`'a&M^e3Koi/T@jn$4G2hiZl#\>-pc^Zqb0)C7<H0:+dH9+]i
%[XN*X;/`HK"*i@$KVALDEgJ6^*uYHuqs5AiP/HKdA2dTb6L6>Ge+7PN2>YeGedF_!69BGb>EkrDK3YeRE0n'tI"'.;o=<UB]@Ql(
%r-fpM<A1oP9Do5SoJP?K/Um6Ha'AC">87N1:LEqS:Gd=M*ZfLCI/AR%4A:7F@e["0L+ls2*F<<XQ'3`'i+ZJ*mSI6M+TOr=2@8/a
%cQAujgn]$K/nIfDZb:2RE].9@S:S3Z-YR-T/%ZKp%?-rp*\Qst?X&:+iB)0gi5G@`#g#Bt4!bYmN1B[U\T-WXfO&seZCOWM",kKN
%G</6AJurHaF]g/)^FjdW2_"4VoNQFHY6%iZ<IY`G#G3G=M4Ps>q0bRFh+&,S^)OcS(VQ)aW6$P,#;9S_Chgp)'\!O.?,Io6\:%/e
%dk+=)Vp1"oD!Y/H1A8WQ`SaSuI'6NAq\fdIDFsK^.sPiT[XR''!bIQj'QTJ*^)=V_-r[;@&o3-9;\V3b'Y[lfT@p@1\K.2tKug=Q
%9p`S&Ej!tMd&ptb//BG7>h!,/7(Ob]?Te/rejAkQEg$<f[>)6.k]*,pGFoBGN%;(=?rHWVDZoUO++)2f\%B\Rg;d&ClE,/blLYeE
%`tqT<n$n9U@e'!aJnfCXiTd0Z&i6)bB;k:6$]T-".Jn):SEe9<Aaer'KD<d.T0h7+Rhm1cXha^p9BH$<8P`$FGW2D_?ggc9Q7ZK^
%@8o232<I@%g$b+_o,-=NJTf@K*C-9&>::'_p7@SJD4nY5qiMj_+1u0#hj8WZ2Nds`Ub;3=:uqKck_%#TNdmULAS^m`=F5r56_+FQ
%$o:L3H%`eg*N6f@e9No9MT)`oII;.LQJo"%_]nkhjgZhTQ,VW5?d9;BgN+8qP;;J\^6:oA+<%\e6u$&=4*b$$#CQ+gDK-t#SRTBb
%0XQZBb+7FBDa+D1KG:!h1b+'\'FP2?)&A/b)"Q2qQi0s9OFq8!e0-5j#_WDk'S1pJH#be?N'Kbt6>0bL,F;B(NE@\[_ArUe\*!(J
%WI?k.VEh,9F7A^cA\!Ze]0A*9Of:Es$(.Qma#=^TB3&Lp7&03&oDW%'1CQF?Tb2H@P[Ar?;Z87B=f(-a/uSZd6A*2]U0]+^W\mP_
%"gnA\UEIZ_h+oF<W,F6*_aZOjG:RLA1jN6b(OCYZR.1PC(GUP_KP<:pCs#g)+AAgB%lL4%)\+>0KIRBn3Qu0U%=Ut9YX3ROlZ3u*
%)m.<U?&RA@6/qHc).l6jN(d=_NWW<]&[!5(2mC)tls;.uM!NBsEK$]m]rtGQj0=eT9,LO8O9T3lTeR"]H_OO:%5eGM"Ln(!?#LCJ
%AF#:X,;F6jf7>$j(>/F-OWB#+ZVqINY@!IPmR[CRCRj0N`i0."561CNTq?VaJ*>s?T3n!qZi>B*k;L?"Ls0b=h&Y&^nNJ+?#C:03
%NsCeNkkI=(fI"6_Heu/%:ZmdYqjGK7G9Yq8hnKr0Y'tG.PB(#Np3ou>Anmr1!ueY$b`LGOnKQR/H,C**;Z:TSCj[2Wo=P)ool3lG
%qWbn%e0k#/f94H;3X,>TGbLO1aFLjl-T'Zklg-c@A\:+UZ2jkSFFY#,ESSQGgB)og0W=+U#I!URZ]HkS5QP(Qo"'\LikTV$#1SCQ
%MZ_:ZRY.W5qI/EgA$,?a5PplS'-@@A$doOrLOEVi4^[?5Kr_IN"80FSnNd(3oscX2$Wjn&0u2^]jR+dA-b6k,Nu9^<\]YU-1LV$a
%WZ^P%8$;uJnkVs-3!UH7a?7lSg!N7TEDWWIWt/8sm(kBp19+2\j`=gqVPDNPFW?WdK4sEWq$&qMmTA`q/<VJa$`3ir%*$t+$ALd6
%i1"XcRd;mE$1DU'7Lut;iPVIOM6\RACP.Q^<:BbUc27+4OEoJQ&9kR3+p3;e_b5R`_J=WchgOBV!fFb,W!IbR5_B/8$fq09?Jqd;
%[_qAq8OC2N1Y3GgG-r-db]CnWE59;m]$u#Rd@?RR^'@Uc1%FkqA7$mJk&>PPLP]FZbEqZ?p_JoJ/!mfYgWZeXGo>HM;Wf]gft3a-
%,BV&lMl30Y@Is8MMtQ7m>HT^f$qf!KX;Fd_iG$*AD:AQF.[aa8;7[:sjRpt^_JmYgT70-40[I-?q(`&b3lt[g_Xebfq];WH\peo$
%bU-)gr9B2dpc$RC@W/C4b:%_((ZL:l(C$o*#rk2aed+rNpS.HEg$QYbL,,aJk:#qDk<2F\]sSoK%21rsg_jD2&F-dp(G:u:D^&nR
%EjJtDj.bg0ej4@8N.ks=#Yg.(B!Z;!LU9%;r@hh3J\r=LMrSup2sj%2pqct7N/HV5h>kti1k:.([gOO(3fHFR.=X3?7?W%GpBG@5
%ccb],HhG7bE*o2Bh6[Nk@DYN'd(K\>q/`^#^Y$SjPCL67%cDj<Nj_*A7?[69O\Al"E?!+2!r"eW=rSVh"JERjD][m[`NRV*2aDh)
%2tNO9FK8>B=-YtBK;/[,J/O2!S:`lA7e!g`[qq0*IR>_ORDLHpBL'P.XsZ+*I#a-);PBgir2_fjJAlO9F\gajCjNYdCtP;g"01i>
%NpQq#5I@%SSNe)/b/<(?0(ScWaPNKCG-^jb0>,oIFBJBqjna?t@1=&9_41Z:jgWA=Zp=%V&YQ1'2)Fg`oqR/.ppGVD;J6/ujTb5W
%?fBH#E?gZ;dfRV'kT';IA0gkDgBY-h$.^et<puqTmn'n2c?HM--===0bi?NUVP:5DDXQj\B,)">Kt0`;i7GY(hW;muV%eKS::VdU
%Hi;E2-[WmXf>,u/A];O0`JIaXFQF]QJEHK6r:Y#0lL?-Cdla`NMO_h]Sj&%D-#YiB]qTHCaoaL=iNoqJpe_sT:6&bn+'$uFaO:&%
%bUqFPCu1[PT1f!Lr8Y=R5fhZ7ZMOi"lJHs8e!XR_Ca>[`!9!>[4>IGLT:#7<!"@AXB_5!r]grkBQ&'#pPE,Rrh^u3NhrB*&miV\m
%4'^$jdcIa%+JHN#Z<&&*-]./4OO$sk`N.3sDShk(KXR+,U\GLDW1c$#fLP8)cq\rnMm)^<aM?6BO)eJ1[_V'!G203k5c3d77^\u;
%cZb@r5h:4K&XDuk1h7pZM12m8cc-UlaI`;Z[-sl2P/^[Xd!N#Nk-H-M0q[^c?Q>U+j_Q-nc^GZlT)<+?lX`X]'kRk75VMTpAWfi0
%-PN+#?RV.QJu0r@:/HE@=h<u]D(E'poMAG^_=c0ENg26TI.R5]qP*[a#\_KB'ScDOJ;jCGAKKV!3<MAa]pol?pFUkAH1TKt/9gS\
%O7%k"4B]6ma6deGJ4gKb+d`d_?#Vn3G3.%gb&05`Eo`rU03im"VZgEp/>bN7LCZWo?[d(6C-&XK1j=:S3pXO)"6u+p"/Qet"?'LJ
%=D6;$i"'kq+YshUduWtGTt#H7;>*4eL%\UTR)j+GbbH0h>TA&*oBl.22N4Sa""f6E%,YOC90@Iul#B%ch^t)@LGH(q&lBXZD*G[/
%<Oes$]A.^a%d6"((=*.Eoa)Xq\QAA7eRbK%M;&]).&TkV==X8[X*cN&]^bTB-C(1hZ\+EE8)RT%a=rdHqHfr]LN"senR(*<Q,/r_
%6)>-lT;#.@SYYttb,EsOMu[UB^gk6bj(tf?/V8Fr\]p/@D79Ze_#:=D'b!#TWjkgpg)C*7C].qud?)mM5Ns,f!MII"\JZ70ohh"g
%cG_jf>2NSiq4^7aR>]0?/aOED6SF=nWUu>kT]J[YEd5n_?S<9$JSF<m2i)#TOJbA[7&+^4,'G_sWoH;-Dl4;WX_b)uqSL/3#(t%,
%_9Za>NL@p.`<MYiB'jpH15]FL#EfMI2"om;&!ssO=(VVCos[@!W;^$J>;tF^1e5OI?M">E3kL8ON8ItZ/WekJq[.AA:YWd^,N.DX
%6o>Y"`%&8$qR[S0*=gKL(`K;J7;qkO$[DI2[k!fZ#357=!2()0AuG_K(&LoV2%VpPJSp-AZQ=X9/H=jNMMZ7._0FGXf7^"LU$@<5
%3cj2(?D%OE'C>*6;oI7`V8TQ'0FAM+FHD>BGDb'uBf^kSl$h$.l$pqK&&[Y2S3.^A<o87+eEPj61,"cE5&\SieN(sq)j:af6Ql(!
%H7)tu,B1kt[car*<5dg\6BJ1?Xt_0CJPhG75#DF%GYJl.*?a^VH+gUjN2+HM7\#!8_DRFK-NP&5WU"BFQN;N`3>q).+;lahkBgRh
%\3I2&9uX%saM@^1P&oT2Wtg&1piqb<cLVkJmTXH;\mTlQe6V:EE-7H";qIS"eY&H[8k6kEl,Nn187QjM:@S3?J^T&8K5%hYakdOP
%:HFal4_LX`kIna_AI(j,IVrVl?0N\dgXfR+CCUmE!(HKlKh`o)Qh&DYHdVKS8J/I(-bj+_C_EF@Fd8u(W-TXKD+]29gEZ/i-FQu@
%Rh5WH+8K$@2,6G9I<+iAf-6s2<i]A!$I[%5DW'^DV<?In&a5]e:5f/2+uc-R\bQ+Xn%p(ba2iPsO*pUSl3t,=3HW7qmZD\>rrdZJ
%_4;T(3`B&)ks0\)6Sp;Kq_iP8++[_p3<qZo3<Ui"DQ^Z!P4k-B5K)h*q\&kO:B`S(pnS:=6;E"pJN7M_9s\*iB#4[K&\iA,WI!O!
%(Mosr03>]#gfK7"Nd@oeB[j&*Oqm_*#8,Fg#]-SI1L%Q(JEsA/(WZnK8(698Qn.7,;sA#o"'s\in`N_"-H<aYkB$@ukT9b^8bqi=
%6hTi%.%?+hD@'S?bYH3tB%.L9?$e]IfVj2\71QpaN-tqIJSXcm8G0f7dJjjJjMF\959g6C:L>JR02,09^K8kZ)=X<T_#$aoHA!c4
%P;>19)Tht]iM6.Qc\S%t#eBtC%N8Ne#i4USR?kTa*orq%AcO46^$gmIX'?Y<c0_QMbcj>K6'&$,U'H+r8?l#F7Pm!%6i@@OM2N.,
%FOOX?CBB2sO=)(.>5J"fZ7(/$pp-[dh-9F(r?8sBnQr`\D0$VH'_p;CBt8P0+&+p`1dGheOk>[Zi/$7"jC!KTg4(/oiLPu"8!Efl
%Ncm!C&msMT[5S+UT@X=f;LM_bVCqqJLSMsWih?-jOQ\em:E%T'!FttWcYU;LS3\Y):KlMtVr(][5f\H7SV6c5qqH]ndRR`_dhnE-
%-N::nR*<e9BqMGDr.Y"T!C^?@[2%iL,MF!1VJ/&t*_tB(Q16Q/bl/M2rORFNO(H$%AVi[<202EsR4PC>[)AiGabEMnms7)72nP`O
%SCc2=Y'TC'$XqM+*O^-"r7;4H_-;XSSCtnah=YZW(:8m$"(@K^]b1="FM"P!7J`KfnD.>Yc7KY3ZRt]`<LYn9k;Sf1?E(>XR$MAV
%F**,)%$0bEMCPdb<^Z8.`\,qn%$_!ZCineS]Y4QGLmD99B\$tnS7ZL$_#Rq1oio'rIS!l@P+&l?6-hHYL=Ra=LUh(sFHha%H3@;p
%e/Z]'<oe6hS5>Mg.cZ7?X%7``MI!ZZdt<pO<O=d)aY_+MKgV)l,7*oQS/ojdOYc%q82^-GGlW-kB$^V52E66&/F,hG0JLbLV`R8j
%@XoU&H'l`fGC?%,`j4-@OO)?KY'9'H`^oA(lnUoXknA$u8T)<gQ(2S<;fsWZQKfmF&6X5RR8ZPsTWpjnd/&cZKCr9<NM6D/Ylk!V
%Q/3&n#jJ-<mcBJXU55L'>o'oW_>nnqCnF/!kn\C!"f-`1#gOolh:T^pH!*$aXaq+S.ne=5FbT9c!aW:]6._CH/^)Ah'AZT.G:^mk
%@9K&3bpIX<!j9ced(10WB(o+f3?UabE,m_NYmRWiB3*a<>'<T2NR"QKUesc_QIolL..DLo]b*8RNLBV_:A@NU)op"*=;W'Z<@2oo
%rG?RKX]]YZpW5fbJth**ZaU<aK59&'>pPck"hGd^+>n<?eWiY-WUqRV/ra-&ZimK7QSaDW21LQ+F;f+LklQG>T6ampO6<YPQu$&9
%ifdet!G%!)KBp=b)1+D44r6J]<ZM2aG0S#<6rS:%d",#VCEWQb%q#Pm"$MDee`ja"L#eLh"a&a]"pSQVJO)7#e;`3$qVK^Z+8+U+
%CB;JhhGee7LGh#tPaKH*0aI9t"<V70;_9-M"+rYeLWlf?].odl+]5@'rp-<1daI+j?!HH#2T(efOA:1)(sIi30B'%%i!'#!4KH_r
%NdSm[kDtTF(\D&2]]\*R#_!H(WOl\3I;u066SD2%kOhu\cq]i%(]3r>&mQ5GX)A11fmU6>lfelL]=u<]\BM_Rli,].H:"H:+B1r!
%HIJ_HU[U*^E/,!Zc`>r;mc+-7*0LuUCF$3KRhrciQ)DK!H+-9#(A`U?1ie`RY*[Fk:HA57':a5DacG1l\@K!9=ubuBT(DJ;c8.S_
%jZgn?6LjHt/+G"?fI4%ppY6@^/%=Yc;ZDHQJBO4ihIZaEl)XKclP%4jY5;\nK0N^6j3B!,Rl'PThKac9$Ocj;Y?Y&`Q$E!H3j+$W
%4iRm,Xa.0jIW?/`ID*35U^i$lH-j(^Qt]g^IrZX&$C.PipYdGb@Lo+;/<m/.($0O@=5I;4AM+h&\_2^ban]XUS374Oj8KYB3oU`Y
%Wu>7)K:A_<nG&MqZS9)4P(q[,088H$Va'*PB`P0J'_GMbQ&k8*4*.L"fOlI4rX>0'rB.T@.rPX1)V/TjWcVp727;aNVYm,sNqJ]f
%&+9hH'+HHWUEQ3Mql]l5=<h+\FSo#n`u9DPk!\Xug(`kEfRcucK@mm#`iQ_@=FVf&@#aRrhU\u8/$.W5C&dil_n(J@>?/TfJ*+8r
%#X"S3q>Eg@'!/R_`s*$/:1o1p_?qQo;:P@+$UCJ7#a[I]Z"L=W")m/)lb"$A%?D;.l8'_i@Z:erHSZ*],L@:4UjO4(5$D>/S'fW'
%1h;JdRf*Lp@>.l-4FVVpRl<:6kFNa8NYF:Nb5@_noXN6)50U6O@\T7@YX12CY!&^H.];E2__3+%pi1:lg=AE,H@"3S51[r^_M.NC
%Dgl3Dh!"aBgrWMIg:A4+e(O*h`-S`)iB-Sj4I4[6#$>ASZ]DB%Q!!I.@"%RW%9TC59)fK5/\^sJ?!CYl>ii()0uF@F9_U/gVm67#
%>neG?@_Fs&HBqYhrNCV"!pc>2X!QjV_MTV`^uR$Gqc-;_btPCn^<TM+Z/3-#>is87_JoYhkIJXnkI;t)pF?(3>,Tc*RppfIn7,+m
%&#EZJJ?T)3-I'6`*[dY?"kIb@j6+m8eeIH!H/lgO/(DoWn^gicp12##pFu>=XaA9shGcR$c\9l*.FsP_i!s0ao?C`cLUZ-8B.L&-
%pN?5"1<3SCGa,](1iL0e[U;A=`?0TZK$!P@h5;3pK!@ppZ]]e,S1F3/[kPbc>o5]SrDV&*I/!l#BC"bT0fJe'jSj[;m3bX;1X?YW
%I1nnKL#]Q;6B=!s9KSU<&?B0U$IKDj;$lU'mmffs2)AObMso[/`d7&*q@"A#c&1%]N:g\H][UrRoADdF34jiW!92q2?@:]0Z-(H)
%^adWh=I%aRLL<j5"nZZFGfUmHV%D5)q*V!1YTbp6\bg<o8E9(Q@c\AmI$6PDH_0&Y!ENVp="DtDkeVT_8t!H=`M&$8H)SA_RMM8`
%].'o\m[[Ln4\kUsoQK-Y/a*>b[sOK(.)<<hb3#EQMT3R:*YqihT"U'MK[+FHDb!F$qJd*%][]F.@Q'/9l.;;Jp%$LJVYX9)ZZnPn
%]ddCW:X.d'EA2I6iq5e'('UF>2js=9f])9uq_f==oUERShn8N%DA@P29WN+;C5;X%haWYJUpjgeibcj:QqokV$u\##<H9H_#>-X^
%;>nB+Q&jMRc/2i?`Leq^aCG5CjrR:G5LZg1f:p(PcS.0b$5RQ8^LMb#Ngme3q7)F@97C-tN+j@]DlSmP<r`#EUrq*GXn407mJ14c
%-.Cr<)f`;fQ-HA=\W?1K:O1:YmGZN"ld<CmF)L\P;9loD!1HaHcL$>i!fI58>e,0I)oB&lqFJ_W%B$f[`s'r$oC&LPj=n"=NSZ9C
%%2:enS7J3d,cuB=i^lkk2lPOZ87A>.(C*/qP6!?+2Qo/[0f.uekBQ?b>b1Gt^;Bg^oWi8Z!Nkh%h`PuTm2!4*rVWhul3itMci"]`
%Q9H8^!BIOr6E$Rf?H5RV>k%**Ngq9Z7^Z/Eir*9RXPj2Whd-oi6UABu<VD++ZWfY6L(;5iXIS,X_:daeLn16Z_0o['$a>H)Sp+tO
%HfCs\&h>?lU/_T&;0XY-_'jF%V'4DuIJL7d>2"s<@kEt1(DU]kR2cXppr35NFT,%?Q3MX^J$<%m[0)`4GF<d^C[:1t?c*5uS.6TX
%1rKSF6^aF2@h$2c=C^/#4.LbEl4G8m_?)7W3.YkmYehkm@R[/?M+_#1(YL7'=J:lJ@)ZQHL6\,GqW=*)$sh'RJ,t8kUMlqaDWWN@
%jf83`;%$J?h5d.73[goM^\W_EhLM`Z<%!YB1&@YfjE#Zhj67!o"lNT+)MVhA)p2E.m$FaHJBc\0no;r0TcOnA6G@*bGL$c#gEW@A
%O5KM]Ep5cCJktWf]2^f0QiR+jYU^M"iQ&ZiiC(SV$Om,oh?s0PmRMr,65YHS"4QMo+nG`aUh5Q)JpMX&c<jb.1g#ZV!2@$IaPe<=
%J.eRI6O7O/[1*:X\e2M]Gf[,'oPb1e*l47\IY&-jEFV_oe3K=N-FeKULH[Cb:#i%B0_EpkZBb6+`hSTAeo`ociAlBf0l%pt__r-U
%8C%IGDUeM:FT,CW?IjnGCEbU^?UBpafLS9rl%qR<SG-Hk#.MaX`\/9EO4H&sVmYVqYORNd+9+MdPqPkA1o@PK2<L`fj,924DoMPq
%,L@BN^G3-/4^jc_^C4<0`A]PeU#LEJ_I??rYLc)@c-d[//Fpc@Bh=!j1?W*1lA-9mk/4P#?CfbIKN,VqI_;qZg'.0bTq?aEVSm>+
%VoQ)_TnCgpb"@XL9P^$On,(;]I>#Y('d]A$I6D92dRfn1?(N:j/p!T[ig].EN?q<);DuMg69qGbeFBING>>j]*9doX[]@iQpKtiU
%/IoH8Dq[eWX4>.:Vb2u1'kjc[[!^fV!Anjo@.`\.\*8W$2@_udYO_!e!8<Jt/C9QYQEo^N?dXWn8:U/ACO:8EincKW;Ii&WHPLu@
%Q&)0l-3>CY?1X?`''tXlB*Q5W5UV%5BG5iKghYot]U?L(gVc-/G)Lf,.c$.]%,Cub5:Et/f;TN8+Zo)b=L=HpQ<BD4M/8IL.[HL"
%&=SkF\K@HIDH'bP!C2*Df:H?RKu'TB-2-\;:Q6P'[N7]dh7'+-6a_HnDR?eDLrTC^+5;,F\o(bblT+E$7@h"VW^(J(X`Z00m0Q.C
%jp]s!\&=:\r<bW<AgR>T2cI'V[_Xf6g>/!-HL8.%dmtaCLmsKQIdua;gC#uOMQ9t,)R4OH!)bXH02WpPX_Y)g3Z"*Z\#.V2leC3F
%\1fu1RgdWgL%$hC?*3$[LWAPj3BKIT\3h;1eJ[H'1BcL,<p'O:9".0cnHOp&Uo0Z-YT,S3]#r;+1f-LI-rXT@klW;t/6JHYZ"9=)
%TTlCH1pF2HVK5f+q('+Hl].<$e_%B\B?GE2Xh!>q6#h*W[Mf@.n4/lt(7/(K,SgIc3,3f+1dP]Z$<_/E!_q+1Z1h2ROt$G`4Ba`t
%@+iEgjP@4,fC:VY"3)-hRK;@qnt@l2FjWM6A(p%R,?eJc^+aO51>g^h8?H.kT/,$\pKeh1.@E>cnB:'([rdP,)[6$PfmmECh*/re
%R:2m9S]5$^*B<6*@o8T4O_u%1YmWSm)u@@A*)#=@0piS78A^2"1=t2F+SSbimT"gE4e`!c\=EgjcpV8*.pXdOe8#1RL6nDmm6>$C
%_^p,mZq6U*#=1M+`\+D13_91'Sasd`0c80%Z:_XF.^fErA/3iR#W/;EFWh()R16VlF*]Y>b%PDQq2\UPQ<Dq;+-LjFCU-aDdkF5A
%b?E)jA0(Oo=8I1sAFS/NRMqB6gDDkN``[9jEDPHYU:4[hF58NnkksBnjIf'UNLe!p)5b6X<5A\YHY/cKfAhj=G`dhJWKWs.R0slH
%>A[\Ec!4_UkpJ]VgT03G!o!<PZQF_kUX((05UC?]\cLjbIRC.PQWK`4[ii&NPArr8bs"`-TlHQ:kWIF1RJDR]MgEZ\%V/WJQNPYt
%Rk'T<XKWp7)\5@?jkUdAB/T<2J6&0GfslP=2#Tc$9%0eXPn?g?[?8l(K[7*74Fu+[%5ZAb5oN:qeZ+bV8thM]nQ^:Z9u\l@EG-"M
%?I`p@-JIiqFmWcY9EAX6$efIO?Wd/JDVppKZX,LeB2=:u:_9)""To+/N7IV[eH-7ng2.i^n?BKI1Q?Dt5auPuLFoXf,!]M$bAS7n
%Sim4=%)Ie9+qdr,FkS9Wl"B<_+O(?3c0?Rm*!8,[I:Chbk&`81P9!rTO-]dRo+c`$V.LWI$f8(aF9/aK1bR>\Q:gm_ZMK:_j/?i;
%s+Zr/c.Zb;gr&&mW,.b$10SoQOgBZM6H4O6hGo-"R$rgX$i*Er=cX[uHej&u!^U$F:1uRHqIl*\5<h>K@f>U\p&,\$NZ1$5cimW/
%UM2c+q>:Mk3H6c*-V(l1!MF9LT?2^lOq4uTXZ`d-!AgA!Si3kQF\p0?\Cn7_A7ke05p?5e/KdRTU]'8P.N<*j>1dA71e`pK(V3D3
%*%@>14Z."lFb9"12Ob\Sfot6\V/>V(Zk!.FT9_+1Ngk9<g;c+E0<rIHFC56P)B(k^1bp'g_#RGFC&#MFoBM`%3cs)F7!2\E9[=2=
%]\P=o(_J0f2XN_3./i6hp5ChrO&dIO%`XoFV@&\a;_OHcP][u"Ei*SFD;7+/X`67=JJ[>^IOf:s(hD!%cTV$iSL:>)lLFr)YApRN
%qdu\d*sc`G=I,:0bt/o/C/mRWRn02pRsf.I=kFbj5gX,@0+\Mu)4!f_ciI9md:A_4VG5Ja@\d-=GU'd+6M;fFp\dAd*[Oa;3I6rr
%J)('8QHKN[CaYe"5*sU"+Luq^T7&=6EH*p5kHiLrgTaCW>U>re5*p1XT=VO]3hLgQ+$d0'F?]S,^)]T+inEXEp:5PNc$%P2luW!l
%QB<bpo@]Jb5q,o?8E[>*jjSqN2G*)<cfLpFg@B>Lr<?s$9XfkH-#UKhhDuN'o=GW0Q3$"",A#P7n[!u)6.-Na%W8e9p\&:Bf$b?8
%`.1jsX6a3&=Xh!H[bf08'!"^SHks2sSN';8o/_]:(fgu\T_UK`+Z=5)-h038@:8?0EQi[FC=%!i/@$Jd"4,/(>"md?+k7>!pRJ4R
%(EYHIot,rZ9B02aIgOL(<a/6]Mq_Cm,J-oL':Ms;S?6)#D<G&jG,O5:\QUCYSSpEG1t/fno4=Nt2em'\h-0\K%&t!1`b('poj=&3
%.1h`47mUsB'qskNGQGjnjOLI/L^)I:\$^E;r?^hogM`Ng4C^E7XdinK1@K@^Ut6WM;s6'5Ed8'Y1g:f0m5/=SD0`51],4CZQ-=99
%em.k4a/ojn0M=mQ],rTqdGAL/2TA?LL%_Dp38Vg0.TpY&f'V\L@U.JEEp;9QV$0ROB!uFC*fssHo3UfJ7t$aa=M"*QKq-#BrF#uY
%@<\5?\25SR=sA-3RDf;4D6t>Zdah-/&n=snVOqEXA_R"oY@]Yh=g+X&ge=Huen1@7?5ulZ2Gq`I;konlVLR"(=IMuV`k6GqdjB4`
%W&LdXBY%is1(gk<j,YMHI!0ts^r`9FTtN\#&.uA@#H^b,&99FN8"7;Ea^CuPNR#Mn]%_fgCt@I3]k"FQ@dOk4-egZ.!m<T5]i&R+
%IS4kN0P<U$j+s6hF('P^bDpm*M_b`>pm<r@H4.'l/5ql\/_R!?d9NHo.KPP5?V32KCif8C'TdH@Q<>T:B;Yd!%\3e`1crsF<AV,5
%EGM3:GAQ')Zo4tDX$CtkfV-E9NoXSNNh.Ok4,,k3QrpgqoYuW_d#-;@?*^*/kfqO-nIF"=ChR!3A`TArS/S+\TnC9oM;.2=H?7A=
%m;68NgnfYeNOD`p`2a_]DA'Y1`s"a*N]1mH8b@bj1?(D<DY<4Q@AT(H_l^NmRI.2s,h_j2"]pQ;=KN0#hCRF>mk?g/E$spETUfr4
%aNPH`i0/As%ecna0r-0u>KMshJ)K_'+?8mY8D*?F3tWUb33uo%L.U)j52;Q=okernq.=[/BJ[TT1cE6`#X]0OH&CKo4!r32_d5@Z
%'54#tVbMJ![L(1$\"00S5O7pKF9:iG4!6f%Ir*af&"^?!pNtkeO3n#pS"@'MR7Hu(/.&7nS=+$)MS$:?4H"(.gWn$tCbr0Qbe.MV
%@CMJhLGe_D6ZH7@hN$hDVj<e`f?MNDfP3iV&\"6t[psHE.YP7lbWPiUjO2.dh98!iDqJoZ>L(GKo@>JDKj`8=h,V006f+8F01Lu2
%?5h*b[]qlaCqX*+Gd4+]Gh>.U+6k)K)_RHYZJ10$I'FLi1:Yu;OJCKC#gfG=!+745hR1>JqrQQ!_)?gUgg<d`JF.S<=V-7sFS;+f
%]"tnO?@cXYEOM.>XQjWbO3Ppt$LQ5e"BjtGbOJ\^Ip"#4eS(rbSo8%"^.btVe1h#82]a!N\-UFcj,o#s#,@ArD)ia)eTm(J^aqEf
%6YQ<PEL%X.`e)oI3-l2qdVB,6_.QEcCcf+q;)U*=C@`_(pYTg7aT?-[9Tji(h*R8U^DGQiF:`#?q<XfR)_RHYg.7(g0R7Go:-_rS
%Ni@M>iiOd9jRAgXeo/"L4,=)ubu(^GmU(RJ!P6.W0HQGG-(X!G$q?ENXEE5tPOag+[WJ^7^6ra^j]V<%G*DJTMfh'Ub$39f>W4+X
%&5NDbn:+)/SpC*>lUcAfnMH"B*10To."r\Zq9V%Q=8G&rX.=^S@&L\Sm794(pdV%(p-D4sJS,6_J)L/MQ;(kh5=0Y'Q&-N0WdHuA
%FL26_ZP`gV*%hBeFD)Y)>oRHt-l-VieRZ66iM&D]Q(FsSlgA#=[GT]C_Q3H6b62Ig8l>CHq`:boqE.$,cNPto$N'C*X`3^1e^)7m
%hC//"\ckN`oA]ARfFj4nHNe4:U*q`0LOM'O]=U(91W!P>&71HoBm9H80=Pc)9:(O%:?LG?XO?O./[O?mNJ5#R$."]Va.6I>@#aTl
%S&dgqddEDIqb9E.=Q*iPQ<<*?j;k:[0PGLZUtsir"9tnj'b0!EX^X/bh8($u#F<J\@?4-ghju5"/?s6T<U/-:/%VYJ0RQgo[S"1/
%Z:hekLg":?h<hsl=EbPK.6O^*XsGU"pGO#*\U(X$$?]OWp`Sk6p&L_a5eiFCroPS@5tC$'H-T6HN#Q8(me\8tFTBjZ*7'MrA-uN=
%&iQ2WN#QnU1<8PE[e_Z5hn*:O!nKh'qGjDEKABJOP)IVEa+%oG#FbUJl&.X7XNAU<fstk4Gsl^n[s#HVg"gs9VC0/qFM6P2@Cq4l
%gX]-F*+Pnnp:PMGhEfncop4tcgsXGnQ7Xpt^O^Uf3SYLbPc!QO.l_.RK,pFC]$oTg^Jo-*EALpE4b25:>%b>8/I`8pT%LMqb\"9$
%4u4jC$/9;IZ-Ou%Do_c<RnXOmbbBo*j(?3I5-q=SI5#4_M1&uEI-V7@CFAfn(pf=s]qrY21Jg/+%l7?KZ-UYgG;r0tP1XEUcGRr!
%>>"6<bN^l9XDB&bcR^?JUHdLN)i8uT;0p7$h,\!Wh&0L&9^FRYl8.d)h*tkGffY9`@&o-4Ai/ll%rU5dZ-TK^l*Rn<`'1Lk1uE&U
%;.AE,W9#rlYE@IM@s)ZFZ#;LsXe"+R#R[+,\*_,J[@+I,@\9%r[e%Pj'DouRm%CHKXX<b0!Pl&)<YPAS(0_PuhJ\q:B9q)Wi8SXG
%fOpMiAlr0g7Uhum<o:cAZ[$#P)*;r;qK<MKS0X>9+gK?EX3Yh0#UF1q+7\,l:lpa:BA1D5Zc)9NR&IH/@/Zf=jYZkWZ/-TMa0opV
%1S`(KjB1^`5C8U3)69([!NZr7PtsK]*;6Z?CVuP['P:N``/\Ci[Q.KK1c\G@N2^\begaR/7MFH1;Ke/in!$gaHS]K'N=Dq!Vo)W/
%:o8H)9GXphQhhT:A7N)C.$'qMXRH0n+aMB2nitqo)lNE+lBhP(.%<j7CX#U-s'n1U208U6*IYY45;]qNDo3o-c6:Xp9s/JTq4FE)
%jQ5ZN*a&^kD=7FFOtW*0]DQT&B&TktmFX1I'KUa5m[LV1B;IDq-<JsFnMj>$3D.@u^AS?p0'V4TRqQj(BR^8K;Jhc#Gu!7[)]G#8
%knVGffKr?jd[eB;O'l\9U\2nDa6@T*2pnaD;S04C(+om"PP`@]_H]cK\fFu"HopJg>$3Eo_7[=o)OEuGCpg9[DlZlTX';]@::FCY
%fh$TRF?0bq-";0Y?:dFZ/5JF\7)0t=p#\NQ)he9/3YW/?K-iOq"]i^Oa3^,bqq>=^Dp7oT:LId(;![>hIc=\mGXD`g5?l8%Zge;D
%1r7RWFCm;7jQ;MN@c4+ph_<?QNF`-m30/(&2L&iHX_O9ADRjQ[@3rPB3\fc:]V]s_ObL9P'[k%,AI?CK>%$'.FPW+47*O,D9l5je
%iYfu+/U\j/X!O.%#Oh8B-SVaYY(\q_=1jL50Mq+7-rsV)L,R`,641^%n++C6LZ<BLHiLJBK>lAjCQ6AgHiKW"Zn:)1B4n6>X8fVj
%Lfs4.9>9'RhEOL_mcO9Cd:pkrlG&V=AU8n&c9cE5PC#8j^@uPYah>3u`K8^BHiG'-h[]CpCaHiTC]Ue\ELgb>8pao<noNKtK?LQK
%V7hUtCr([taokWCcaT#'qu1AsH>coFEXHL1i0W,W/dQ+uftJ")h*eZh>?_TYqJ86:bK^T=_PLfre^I.DpEi73[0>(MkVjB?cPqYU
%<+Q/8Dg`7Yc89L%8G/erS2%pg[PX=c+Z%B2GL,uBV1\f\nQ%;dGWn3HD`^OdqGI_SrW^(abWL$:8@>5L^q?Va!*:8EeauHLisnhI
%%62V/Eb$oe"+GmALsY2b9BI"F(?:=L`JF8/XI=@&HgY&Y-Xh<drsh5OhD-m(M;RB9`J6.lG_>+HJS,821nM7DA[ATiAEh6ioq#BP
%I(JiZR#NP`"8+a3f?_'WYrs&LR#Z$MGH20_/gu2Ebn/<F2`\&ikPQLK(9F.Ki.2c"=7N+nGV(D5lp\:1REl&*q0Xf>"o!r+-?LFm
%*9[\SYpdN?F:XSORos>E5QfKrhJDW[]1_"d!i=)ao:@k@<r%9.m`AmPGHB9?qReQK7)\>]fEtekjhuK5c3u3gK<M.^Zdk":^[3ZR
%o-YBVqJ8$#Re0A..#7?l^[Q<REb^_m\EC<EO]1E"]P0PPA/\otl?(,&`+MUI1u(-jDsNlu(?/0;7rF<CLuWg;''iC`m^B4$b%=b"
%kZrH'S%E<+-?I.q[uppGpkA-B7jHSHKU&+(pX'g(,bT'$.l=dZ!p8T>/^)Pth%]a5`=^1qk8'C/'5&V+@ZJkK/C*cTAUO^$0#!i1
%S,VbtB6s(SGm;ISp1Wf7J"#28rDq8u8dJ1D.Fr31^J8JeaVQjGXgH'e._,oNZn6.MH7N+cg+l'6*Q4LdO,\MA*-C(ufu5ddL"/)!
%g#ShY*2L,oHJGfsTQJM^,H2S#A9@3E6\SP6L+]5m0;)q;`\HMEmfC=GBY1oFlhL%Nj2P[M=9_^2\.;ZE\cUoGQ1,S3F.oPh**c?`
%I28A+KA&b3dG]:R3Vfh66srY*;4kgE//*TS]l,'cp0$1f+dAY[c.9W=>8/*S,d%`A?J))XgrATi0H\\^hV(l2#"#ZQ"6M#'B%W!h
%&B;^h?>6TPheL3SVBO0mk".W?,<Li-MjD!GaAR\T9Dru1]!af$b:LYgR:^ZH%Q_?k[j.TRr+$).O^d^^[n8R-j_>*=nX4ASC6P.P
%5)i&eBKa#7Ei.GDUJ;WCV)4V$h]/91Q:EYh0\'<p(AC(2OI)nIs/*?'4,,Q&XRd&`l9fu[a77iXIqo\e(bjYF)aOim+DaQ?nnS>E
%ktT8M0l?/$8'[SQCmA_.XYMJE$#LiDH-pG=`m$OnM,*XS(H.DZOf7EX4l)gPIosNhRL\^5*ta@FqC.9@5.&I&A2hE/OcjCM5dIo.
%[Ur.+6!c+U:m4&O<kYl^7>$8-l_Yrm]#?!<EG$HDbE=*>>VsNJdVGX(>198XWu0GO0guK;1)O"A?WO\CdNs$O?WO+Dc%"JZKr3ga
%m9`o(Zi#utD-U+44R(nnYfcOB6G+GOg;SSX>ZPMV[bLdmKbdl,=(BeOb6iH`hXA"kAVL!M"!jo[I^^H#qVWc3g#BHXAVi.%00J#b
%6J;'-[G'ua6[e!Ra]7YCm5;THcp!+nZ3P-X$P*]PBt3QW+pdEa!H9!U>-3&.Tg^VsgCAG/::49u_F%r;^%$f3p=i<o5hAIA*]ck@
%gVSZ"32+PG#cu90)d[c&hmgWRa-mecg>@'eN-2:OiLt[`/2kDKIc6u7="QGHI>nUFm<>oln[-On4LDljO>R8%]("'qk/5A1>Ia1L
%rjG0gfkbolTtN[,[I&;%$P1LjA8/LnDBrr_Kno@uFr]:9kiflNHRMu![W(3!rH\maM0u'+&+,R+G>+01f=LIuHp*5@G%gBrf"^]n
%EMFP$gS)1`C@1@)EoE_*@b^^r0U]%iiM#KsO(q],2eqpl&+-iNl]#+or<j-YBk.U\*UYJKdC&+jL\<j+`pLb^*nlXb#:.[N\F@jo
%TimSd%50hKl(5c:;_H:44'X"q`;IJ>qpf;JXhCc@G\D$Xj1a3`KnoB2*?#_>f=pb$hY;Y;"C&G+d!kA.@9^U[(EV;fG.=-CDK=^0
%4d6u!HO;\qs$scid!?B$MAI<pRFYEPn8OXC$B<2?ZO79[&j:?G*NFAfRpL?<$CU-qLMQ*1o*Z)rN?;q->OfQt46,KESt``c$P0_0
%MnAo(6\i4^RpL?<6?.=Pr-B/#Y.17MjMJh-;t\\q%bZ*\7Md-"hfd(Skfk_B[*WO*1g$:!f"CM!IM:7@"DZ0h&$6K;_Fp<Z4Rjoc
%FuVTC^@6)1hfIT]%s:K\iO6X`[OAEt*nlOkc6!O+_ojYp['pm["j%3,4L@o4AL?Zd/j-MUmEj'P>O0-n44B!f2VYb2d'7/gfnG4X
%hDF)4BUQ-2l@k#eF2cFfZr4p\*nnpTe:<-DSq2U[U(XmX)G_$)gIM`#@YG:)r?/?KR#!G"%^d;/pA=g]8X)]8(A?SMQ[b$;$G\f8
%6Y&_^X*:81quiID'ka<&$_*>fB%jEbbqn8M#EQ%jTh=<pQE!Un7@7\2:HHX(d!qEF$9_ZbZB;)0g+<QMF6WHdN[ITIh[WueG0;\f
%DH=C\m_+!;P6\M9EV?V$W`>)@mK=m67;J1GY?8P>l"'YJ2r-!pQ:TfD?i3+=prQOJf"LAY*_O97q;YPuj8SntHTaSHOe:q.epH,B
%G[E6_jfml2<g:tImbV%e#7n@tm]#BWdX:[6][uTDn%l5[[(tY!TIB!FgYJ'Sde0c)Wt)e?c#ACN\aqX*et5@5Zp2:`9%BE6U@cb0
%b.O3-Sf[cH)R/J<,kEhj>P+N+Dr+m2m%OVFY4rk2;Pp#.I5F'eZDhjgI=kF(e'hIY<QnL^Zg:gn]-%dEY]u]8]f5-+J.L8C%gUI9
%<\gH6c0j'*Q.N+J\?5Ak^qn.?iUcG&r,e#^]WIGOO2#JlZZ+pf3pK_o<C'^"(]CV]d1;<JY;k>ObPkeDpAkF9AsD/)WMZ]Z#?IE:
%7c/t'>soI^(aM_Cdi,./7P#q4@rRDMGr-;R`M_M[@jX/s.<lNb7PImX/i)A<ojt$!:qt+Y7)*ZQM9+A\QoMTojZbBl02Pl,gl&Xt
%a#?&G/mWdD_rVcF\)9?<MscLDR4j"9@>8=,-O"eJ6).nqs-qquc[ERtFj]c"60Zu3kPYLmaheRhK.6G/g^fr?likaF%or<"a2hKE
%Js!8Br<,g;N5<i9(]?bFX(V1Ai(4+R3X-^<+8Qa68>X&>0@/AffDa!918gCC"]0ZeP3V'shs-+5p-ntbTtWc2Q'lh,HqSl(?se$$
%g?K'+H/Ut9GNk#)%r*V%WpE=B1G:3dd,=JkcTkEWk@Xd[-:n\2$^)AOEl5_hW?Ha'Xb>WO97F[oh)Q:ac(&="j2s3*p%7m1HpmHt
%7#X,lgIL/_*9p"lFQ5nP+i+8WW^1n&UCU$P^B`]["-4o4m5gbgT5UF]Ffc_eFmE@PH9\eJhZ>b8-ns_60,;6Zop\8=*VZG+YPpjb
%8f]3>UZ2S6<=Jn@)P%^AV<9p`AXQ$Kl-QRY!/[J`!?Ms=%7&>bK0X`8j*-?)8^&0tog633[S*KNQY1POX]Q:?j07Koeg#cZn?l'Q
%qaCjmXd9$V=b7'57MX%B&+DF\A@_4A7'7[-p<<&d9%a<\^%&,%*c-32ksSYS?.P*(oNNi)@$(BTh]n531_#)0cU$nN"T**WrV"@6
%j>;DW<CmjEqCQB$0^h2L6XON"#iF7KLSQg+@2,]$:bEfHT?<dtG.nn1X1:ND5L+pb@0//]:Uj!MLUu58RosCM!>TC6Ls54Lj%Fd>
%%DGCrrRMUgEb'RDI_lKR6tVM>M'm]Yd)7"(He79OojNH[iR#dY%0@m8q.t)m-qmX3=Xm*>>66WL@7J*_n1AdN#u2l288B"'dV[N6
%@2^b/-KFf?89tU3*N;@Jg6Y@LH*scfOiLh-AHOVM"&s-uI0p>b]uA%T$cnf]ZHkYM]?tJtk[IQ]1Nn@mV6j;3,N-p=r$D:K'I?J=
%LZ[5>Y_aD9g2F51So<<naZ%[^'@<QD3*`8-^_aZP\/U*9cbo%c`!j+%Eog;XrW$Jo!L;n3P$g6(ptF%'p-p7pqi&XUr_1?R0Cn$!
%C^ZWeP8k1k;UPY/kSi9T%Cd)7;%')'.6Y3$TT_H;W#'kMbBCbL4hJND%"E8Y#o5-l@h&L=EY,u5FE#sU;W&&eG]oQhX@'[:LI8)7
%!&a"=Q6mX+_&LN;.6!p>Be5L^$"Yfk:9s=k,Q`nh#mM<_,9a?p]Z2rl%r(I;IigB;!uTOZdr[!bZ5X@hT*G$H:k(JnZHSs%=p8b>
%C9]0$9Q?[N_2Qt(G[GYRb?[$_Elc]an]'0tQPPAUp3FIc0:rQBBTa%CGE:)GMqIQbH0CBI*<.i\]<7$qR2Ol9Nuc,8rBLWMH`<u9
%ZA+HQqF*sYHbS,mTIh`\m;a++g-(L8_G/*..u*W>5Y-RQoS3o\a&dkjq>>)>S\eYt7jl7_nCEa_TR/&#hY4FI'0I/IW9&8cS"R[?
%ajI<3TLG(iiOa=e$H82J5ir!U(SLJ'G[L#eWR(pB"<'4H4sP;U=+E6'>UA#qMg;mG\4hLap@U_&^Gt;WJUJXGJDp&-RZpEuXc@5J
%A)AJFmOJ$uKro('V(S&@eF5&S$U3APhk>?:;A']OIRsYTGoeaT/X(;CFK$8iG2)F@kW4(,0`'"D^-!iJKsJ)%F31i)6D`&VpI@Ag
%OQ>G@O=.kpHEA*?&`.A;VBJ&fBLi6:"1u>gqq*t8'#Xl@nM>Jt/oGmLhFe68i1N<Pao2)m1_G+TFM"Y"EQ\GWF=9Iq3sIk-9q1gd
%8]Jo`i/7][Iu6M0UN&g5(gZN>5q!)2L9j'./qQ9J?@k`oHNO(,br>U=][l%ra=Z00n%_3WUkS8:XoeKjL\"eH.&K2R*:u8Xn5unr
%.d-ThlPkmbB-kYYbIL8&:q*AW[;L`b2c(+Vc%DWEiFM]FDEGGX>bL,]J)/!99sG\\p:aJ[SogX$O`!:4C,4uT$D8k0:m1lHq[$a$
%!W0'%-35q2;'iOrPubtbo^*b(7r*jkb/Z]SK54mcf2:b1G6?=bRlo&.cPL7[D(HIHQ4ZSArdX@mX#[2V=kC?Z&c*#o$-9T12Ze78
%_L$2)'+eKghWs>%p60DqAlapm9=,tOpPH4W`;E#HpFp0adQEe[j;6^&R7VSZggBt@_]fM?6,W[H%uX$-OIrsWh,To\)l-T3q&Vbj
%))1p*LIfF3Q`^($F@IM\anDd_M&T6pXGougm4I9]/#1SH`f9K6M(:OI7].?@fLChecKNdFo9\t2h9hYPHia7m2`cBcdFRO"c_&[]
%e"a+d&@Hc@idM;6m,"2'_CK=<l3[$&2h'\c24j"eNiuShJ,O-\o?u54Z`fZ9N88clI.-X(n[7b^e^`cn^W4YR?!5tH=W$E/?Pe3/
%c2MqWgN7YP>Z+lNhY>I0Y(#09oTO1fkf;,\Xe1Y5?;>G;]6s4fQ(@#`CW2"8pU>Y.@FsYnkju&:$.@'_q3N^`*BEA#mHr0;^:Oo$
%le?4D07EkE/mhn26a-L_je4=i_Y)CShYHJ5]&_\A?eN5.-R1hp$cT`R:tPBDE-Gp2,:4'?RO%^:p3#KZXek2"CM!=!Db[\YY.=AZ
%ce9&h)UgKhqf6`Ao!A@&Y4_4qqRQHOrp-%`213.9F*-g5<^25![W)9.jEf]?%a"unl6]R4]_Y(>T-5V#"Td9]YPt*I\[+-%^ADp3
%oD&+JorVF?e"n/0Zcd.=?U"JC=PHJMA5X1Y+-YC;c9A,g=Kg@\rXqOb-h$IH)k>f_YK[mH:r9=t5IL"XdV.OmTCCCq2TL.@'+Qt6
%c#MV>n5iu0]Po=j]c<%qgf4#_FeDL#*;fKQkk'r)44'rgUJhPmYL*S25G:[;N_WA$OkQ@2R3%o5AmUEkI,#r0qt9Y=dEi36^DN+S
%5"KbSC#:l=2&gZB)X"s)dXu?,gD_g?mu:c^]W,lK2tXIA\[)&&4.f^&Kgtsg4!4F<SGT"/D178Yf&VTnrT@GTD>m^7gKTkNHZ3CF
%c8hsbVjMYFc8hsbVq(?*/F*R.*d_H_rj".[i3/V*a&pnfA'4GO[3Y<uDXQPtYT%K$'T/2`)*;t:+8XR"X::\/V]9ErMM"YcdZF@4
%MYYOPlpqNY\L%/0A-uCa8[eV;jme>ll0laBo%VnX2V&YAb,`_7hr_r0So!aXkChpEqg73RYQ'"Lk%;0uk/@La\M)5,gqU)al:,r@
%U]%Z,Lsbt?^HX8CYOm^E&$iIZaj%=G6AcYACRNo0$^gfScD,Nf63$pfTDJ?D^ZBeQ*r`gbg]%+Emm$YUrF>0=cMHkYA%hO_n':sR
%9clFtbM'pRcW=O5AD,,cFM%/(_qt7,"Yq`[4@;>0qld_Yen8A5)`?9fpiSr=`1Gni&$rZMn&e#Gma'@Yb?$pc);;CT]65ca@i/4%
%Eh(^V*(%:/H8F?&55\k2N%3`C_1k-nRh,DIIq;bEScRBVZMoj\9<2PfrtV<gkZ]!@F_jGA=N^=G*-UBeD`QuT31I\3qF<KX>As?[
%iTX^.'cc2:D_9285/!sPDZ3C\_]ru`XZUq(qZmOBnO#J6r76"DL1i<@;"">*$8!7thV`li\MCL@KiXG_*En9emOZWN04%l>.e!+F
%q0?qGrg@TH?2Cuf\+]:&.QO!kjs6rLQlN,Ts.3#5]_1Eo\,O+Q](1.5/"FJa?9S!tf[Z:SgAf(Vc1"@HN8$S3o+3QKb3&ST6N]7O
%>lOE3%B9,jY;=EE:HT\4K0fjamI&0L0!%3?gYA>!9I_ChdJ)pBFWT)hVmNO9P(iSk=A/'R7XF9f;hrWsFDD3>%mA6636=43s4P?t
%]/o<n,OO\24uguNSnBEuCV%cqk1L%gftieooK54d,X\`u0uN#rr?[FKRDlq2?FuCE#^Bj$lH/hLkgWqD0fo:(h,XAoCioNg:X9XD
%]7I?4AV:/(N_[65h]O#INpl))1KW>O*%Za^eVtB:5$0e[g1)`(G6@Mj9HL8oIlX6Cb[AT?adGFTK"f(jJ'aDYb7T_"YE!k]Ol=3m
%j((F`S1K&5XSX(T\NOrTi1R3#P'G\P#!UjHhra9OIt3H([&7o0OkW/ShOo*39s*rf'?8M8IfHruDm=Q*0$?_2rc^MY0/I:Q1Br'u
%N#s!GrAaXq@bAdDf"5l2e]6sKYdriANH@)#%Qi_!Z/,B/s6AdZ6gD3(3n!MY0+X]3]6"j.kF?A248.[KG\?U#o"Fpm?4?-hnR#^[
%bN7t":ZBH038W_`@r@^$[Ej2`)p<T357K@#pognBAT[p^db:mSbT:V0LWpWJg&'TYjI,]?PgBqRh##n"6$8c1mrR)j#b5c#F4^#r
%3RchLG,Fb>^!Bt[[lNL*kH8Itk"L,o]7)a"p?:?L_gd/UlHmdhI2\RKUY5@]OSP#_R-4sWoXk.VkB>9sAam^0Eki/VQ&JL]WI/%H
%VWR?M^Jgp'D.eVNYH:m/4cF/l[X.C:&YG7u39(Rd'YVMeMuD9&rT;ZAk9sV^P$N5!^p;A`a'[&+^Y_&SO6?H$&47MdrLT@uD]AZ,
%aL@e]CY\:uj]@1b$t1C.`lkW'ilarR9m5R]k)0`V#/c,8?N8rS?:"Mbr"M%mPdV%]h#S$9Cgro-VrH*m9+NCWo@UkH7[unqlW`"!
%3PP91Y=f>pDEp9SdS;!6mUl4T^&'bXW9<]ej6fd!j0<MDNII@&%u43b>^?7sVC+KXnM_9P4A0%R0/i\<[$7o.\C#bd`\"!]`NQ2+
%FFHsB0[TONpc*^.nl\<mkkb6m.<k/un]L&GD22RY[K@T6F8s'9Tb5k)h6f^sjr<:Re!o+u5mpBY*D\^Z6p'I&\&ZOc&RI-IlnlT7
%0@_Q2Y+n&+Ug*iR%\_6+:P"dfCXrbqc[4h>h*6!8F@&>k7#?laqW;F)L[96MgYqPEl\>oR.JOc%48WtYN[?=*_d:6?aNcYt\:F?5
%A%\l-K\$JG=F[b5H0DW>^,]q??lR_[e7fsjm'Q$+>_<gQa"p63DnO>W0+s:)35n8;`rAsGX^T948D%02:fmJOq8[bE@$6SkZ&,qM
%fer][4JB%upVYHeA(Vh?pLBC>^l:89)ZE2%Y7\h;iB=J+p\Cjr@.IdR!hF,:iH^T[2*P\i8tuiD%3D*jC<_AEUgr)riL+Mah0ier
%%Y*m&CEa6S5,[,KpUpNQ6]SMuhJ;+Q>#6.)^blT>Bu:GTM)`q.Pf/\Br7mo(^(rgbdO+l_44/u)OVW_!aES-n,);/b5<OT@BbNi^
%_U5WrB=Ht@frl4JLR:2'$hc1#7l84r*1k3##[*rNO/3*e4bOoH#DY`QUlX`%ahH^oKG*U_^aU%5G04tmmEUU\jt#!WoZ[*i*aIKg
%O71pi^@H5Yq9J4"e`HDb57Z=D,DC#SaVe/-#OZ<]nC&2,N!tsIRBhJFooDQnmDm[_j3I&Ye\fd7o3^sfm.EP90&M!PIV8'%p?:=W
%h(VfMn'E@f,.t*Spe$#"_3a9_9AWpepRHX#o5Buagj:rfraod,@GENT5GL:krGm7EB$9%u,J)=ln@\L?)uTaqola];L&G$*V#2Js
%X4t6&(>.Hc<hAAV0ksPBGeH'Y_6H5l&S"nH%?["FKeBRaH#TO*f@q:=^aofT96ml\pAGclGV%.cIXLa#KC1TtED\r:e8+[;.uRCE
%:glk]s'ErU&AK#j"a4ZQH6ImS2;Re@Y(#=j#?E82;2D]'*dU1Yr(o]GkG<QOo#_`VQ7_0a?>WtDhd6)<1IpoM\4s-?H*JhH%Uccs
%_OELA0cq$SkKT0J%a.o<rUIq!?&NW>cMmRP?;.N9r\$pINIP'UQXARYMBh1S]'+O*DCs+LCSeamn\L3#DKjk+c\EI][CHgkW-Ffn
%QR4@:B<Q3c^GWEd?()4Lc*^^B-1AkB4:\c4G(4o]94omTg;Ya9PUb=Sj;6daJ/4d]VIsIhI!Ma=nId*-pq^BAg$q/eIs7na?14<J
%V0+o1/d;Ot\:W6B'f(0ji<KlKY#'-MK1kHa2!iC5Ptt!=h7^<^h+kUb\stmmd(/T>(E%;M3YP\N6JcjYHsZG^N0-cihK\_On`nh-
%1U43iIf2Rm2_9\jC'eAXX2MJu-D-SXaeRp(;h1Ejk8H>-V@#D#h94V8rtpB.MKPc(*(NN*BiZdPO5kjNdp`U$rNtPOO$:l0][298
%3q]2]l`4rnUhh.O3q0uH[:N;?SOb\`Fr'[BULRN%D_Nuf^Qlq/S,(%kN#SOK]sO)1]lc-\PK@-K:N"ND[sNPpI)%!LO-=t0<DFHA
%T"DV3e*6.,Ep`GM/bb&0qB7/M^A4@T8oj`]bNi4sUW&XHH]?nSb78:)VodK6W@N"_M9APn8aJm;or6S[D=R9#2X"Mc1et@H&,-mh
%\+Nj`5'b?ip,A$J[EA$jGc\l9T_O1U1mDF*NL%d@']ZoLaJ%(M4rEep"WZ<D*NHr(*kf(Q4RJWj8'G_.Ap7jpjunbgYpYPhWuWj4
%b_^bL=`)B".!+6^#9SOd\6W`Z-['_NH^p^'ER/'>cK:&Z2n#TD?Z%?0dCqH1gsd'=VuDk0P:p-eC[WqU]!lcmnPR,;B;D`nr;jTj
%]&lG?>c*^c:S2$GGnO-45nbhL.f;IF2O@ABKgt*X\b4VJFD$WnH+1d[V5HOo.1b"'[l1lNE-nf%)lVTD19U1+Hi<d<I(m8-Fdr=V
%dVb,fCj^_P*]@=:$;YYU>C6sjOfrd7\;:OYq-U"arSj#nGBf'U8Ft;Z#g>LSkJrqS;c*K!I`;rp@5^tU$KK;>.G2:(G!F='d=;L+
%lg<^*M^]?\l8IN^RVrcA-)Tq9(Y31_:)@/Kk3[l6,5jCNGT3P3-Mj0b/<I8RHe2sG@rf\W?t"L&gR<>D@c>o8l$T>@F?;H'%smjX
%?Z*A9K3%2!T=j',YtY#f*U2kfO%"N^kOVpQMenn*PLnj<`Bpu6P49`sFOBP9PH2Hc)PRF^]1ih2rC5/We3HZ;bromJ+K\kOU(GDh
%I2)$mP$Isu\rs8@5/5D/,AO&,dQcX7d4\&HIOse8W;9JTMVYe4>^_!@P7=J;8n,I-9`V/D0mt:A7_:dH?b61---*;Y*c^/r/!iRq
%i$#HCU"Ws2ae'bITS'q-%2b/'C+.%9`rQtulkCT>K6]E8l_b2D4kbb]gFF(u)f)pD./bQT^LF*K`@PBVl`0^TIa3ZVX%`"ee/Sm'
%o>9O+>d89\OKRqKPT!R%gUa[d;$IlgV]ejCXMHHCIs%-*$<I,O*pT`\;nimF=L%mT&+qpMl,4_=<&F4h4B,1A-[/AN2FD_fIs+W@
%^RE?so6Zf/WT'ReroBa_YZrQ9jdqLNj*/1lRSMai\fS5E3HcG;oJ`DNo(7IsH2@su^cYb0&!BtVV[M1rp*?\6;Pkt8`GB>L5dQFJ
%R.aju)4Z_H\2/3&Z\1PkC`8b/[G>'ARs\Us%(EaZhFm%[[kkeoB[(Ymj5WWKW.Qos3d?M:hR--t\.:[AC@E]s5`&uRo6Pe#"'8]"
%heq8?Mg@Lm=#/WZ'&;_147B?BZAKDedAV.=^QdPml,u.iW52j$4@NF#hp:,hS5-hhjBW?@0P5Kko@q?Ni;uHS*uF@KbA+g)Jt'C$
%r$&K!n*V"aLqf;G&@5gHWTod(GAD"^V^E9he,l>akaOdu"8m`%!X"sDrG$FdpZh-13!0DFi4A5#bQZ;SqaKZpG7%Hu*TuF;>M-S"
%r/LQIS`6@K$A="aZl5Wn('om7km%AILPTD3&Fol`H05-n;%>2sJ$LI-h.H6XI$DOcCDQ#6\FjT7'FXIjB&*5R>c;qu<S2_Dq"T1D
%b>0(4!2DM9THATJHHp814m^e5?#N0Vp\tFL;iefT&C0^kYiU[?KBkuZ;_mD5]oc'fO#A<@d>;*L*H:@7)fL%,@)J%+0&D*Xh#dV>
%oqL0T/p_RnHb&ftNLo3RQL)=7k47W#T*DA.hk0EG&c+t%+]=N5f+/eq(MIe:mqeXuMnt;Rq4:hjr4om/?`"Ua=$fH#^Pkh'RB-c@
%s7@rRB<j/2ZI]'/@6pXDdE)pVDCodlYHrr[cQBh;G(ka.U+?rQ&;?%E-M[dOLeS/>3M30U/8`1Tlm^`coV^G?L=c\DL4:B/*,Kj;
%Wi2O`NJh6mfup9L"aAY!P>6n%oKKO#qP;T6-G9rH`uZ3V<PQ[$33IsVn")'o[ahFRPd\Ub@ie;`#Y&IU3B,[C]@C_7H`#"?:!Tia
%I[o9J`416i(DSi--Zh9FB4j)kpi>i;..#8uB9W'C-b&tP$nT6>r6io`9-GiLro*NJ^ARM-F0op?^?5gO:[YAr"Fg\,Y'XqbfGbuf
%2aJ*bio4kj9.[#UQ[Y=4Il3dgHaf5E9>@Q@chGJ\I/2s5X`UUfjY#.SV9ulcOhJ?rj>%X$'8dtJPZ:A$3p/[mhh5kb?+^1A]8E1d
%:8e-82j=!rYID'VBsuS3?-h*qm_9_QVAO@`ae<HrS#D#N;)X2a.h8m\0->&%NXVjGFp>NJU?YMP*#]\ZNUGa+h,-CLU3eq@JWhIo
%__KA`V-RBf7p(d=Jj5_HH_CaR\L-chhQ;R;=m2]W_W_"96URa^UJD:,Tu?__DHAeCKJG:0B3CAG^OC7tj1e6fl.4jbbG=j3XlS3i
%Kq7Fb&(7(`1tJc6&V02"JhQNBj52h+E-\06pZJFdU:`g=j2KRl[E%6]j6GCJ"]Lr*-%ks/>.XP.f-#Kge`ZV%[e'VPiE=U$/#]N*
%>CrG`nk0Kp2Ugn4q=[?-6_2XGSh=SiG=E6@ck!/iNs_b3InVc_lZJX8>\f/Lr7h,L.sZI7j/nf/-q%=gME85*@e_DFIW(?d4h9<[
%-!MAN=aUIWSPIuqhQjG40Nug/\os(9qfFVuHa;I('5TV\g=DVPmcr2_qu'q`^\$f7NT/^IBHT(:f3VfZB.d4(ajn`3\)9X70]0(\
%Io_p&SAIMDbE(6Gjo<'X]_MP%qG9'Sc!NnSiVU$X"6sLRSnt5aehYe3Z-onDDi\6&>0m29M`MCg%j)L0a25DE\_N,I>N"BF?(,YZ
%'>6pHF84>Kb)`RL""U$>DdO^?io?#[_W:C-:8<WcnF\M<,B?uPM4tg>bj<C0)=Z=GZr5c7=bK"Al4a%c"tQ1X(<e`pOthPuFq+ml
%n0*b2$"b.oYFE#8=?OikTYkD-l0$mdGCM4EjSeA=GqtMShr<f5s5p,Qf"j=*-`9.5_gt]7!YM4eb.0r!#G5hYq>^WQeE*=kDs3Tm
%A.QEMn7bf8k0[TH?3kh3;(&6WMtGD*%<pE^3-c_p4dSoTr02HEkGm@0icru/rH*?u.e,O:an=Bs=i:s\hJCDudJW5ig:'L'EWKfA
%YR\n@Y4WN3]reOZ#C>Irk>c3)7CKFAj:17XM5Q7@05HaXc*trW"k[AS#3d0s`7M>^n#eL`Sp@Y`It<&TQ,Dl.N=5[;=(g>FGs^=3
%3GGC?c:%E:]]Ymud*q3M0Km`1O;b;m[i%5gH4&IArL:@P]b:TJT`o$i*r89o?[S4,A<Wc!k@l&?lPt\/5IZYOSY#fIO=DXDZh;ET
%(K,\QI"o#JVg`"+9c8o#3+`)*0htK7'HH^g-1>W;eBZNcpP9EtQlc-C&lI8X57#ql-;4WmF.$NdUiCDl9Cl[KhHm=`7:+FZB&pN3
%L)r<WAcMEYrc=(l(6W"QX#K4IM*(*I>eFGp"t'U=s,1X4VWT[#KXZt[nsE?8_!:`RC.EC"5ca'$WZ>Mc#?j:jfCLrA<]^ES2iHq.
%R?OYA$gm-6+LQhk'?tT0LRa]j9q8?Zr,8VVG!&aqS=SA2F7AsU_-tk(%aIG7M_rcCU?gJ)WL]3Dr6AblF`Vp'JD/\%2c'/dgC@jn
%Mc\N>&@C2.5Y]R1:9Mj<2%B]"P$HgmJ]u_pQ+_S9BpJ>=Mefb<jGP&f#coQqE;0&>nmnq"MqRlA@B'i15>'T;_kg_q9db_C4VAYO
%`oB+>mKl7Rhs-X/gU`1;AiPk;1qI>\T8TUUBmGeq1.+Rs*kKT<4KcZnp$!.T*fu@;IL,l9bdc-eSuA@[Xe*KN?MCP8=?;H0M<)?D
%MQ'P?*nV7X*:&O7U@(kY`n3s)G<%BNY3;@ISZl7(P:g`OPMY*7adH-iSN^=%`VuF21B4o-euu/[cR,YFCXMPVDH-?=_u$(iW_^*A
%cp2kTOoj@O9NV)mQYj;<-FL`7\j79F\d^jVI@Fa,P=MsCZWg'aPI#2"hO0<&jY;klnA2_0ZNsD-40CC7qH$NU2g6W:\:8>o0(5'q
%#Zib(AoiD6@CAVi[hVUQ^]#tD$.$rt*5lV&$Z!%ZdiYlFc?g:i_'/[h5rg09XP8hAcB(jt=8-Tlq7L?Z'LH-^\(BH4^?uA?$]gJd
%`S5'8[!*WhJ&l>pFopU;5lI?(]o\>*#h4(rJGJH&=On8&b]]pTM$h)=i'!>=1#AYJg/6pXnRG\lrNNnC5XUAZPHjU?n#AS^e:TQ&
%1Wpp`I)"m"Hk'4!Lo8XY/:Lr=jUhJ0V`u`nF('dBnuptfAJ9uoE3A6glQP=Fom-O/qY&oZKa$KP4nQ@/7(]$1l?I=6qrAom+WW3Y
%MPHN8<[UBj4aQepAF//,WR6iQT(MM_L87:e=f+EZ7TFU1M9JM7:6caJgRJRd*Ifua-&oM$pEZuN3j0pS'Ok\JLRU@MII55=3j$`C
%f$4K3G#LN.E:ZtJp!K9!5uCtna,V6ZrnMlC'Q-)ker7='&8iOBi@(C:MYpklq9`^#4aWt!1o6U[k>roa%TOR5.Eo**R<NGgeMh\a
%&*f4[:ZZ<)r3.LGQ/B*(?W9#8FHpCgCALB,:@<*f<`HI_7gm>\7_\fjp/]8X!=n.KLZ?:`D*IZ'f%t!smctb5nT*a@@[21F&oIWa
%NU6D;eN%9g$ug'8`Z#Np5(_l5_uh4t]fg@_];'.^r*?pEZ:iqlk3(B?#C<Nnf'sW7]C<c5_9XK)\Cp;sST[?!*js\h?@=,,IW]Ra
%[4@Y#s/"uBO5sKC2r]"6^%esg?*S0R@9FTM2OdF$DV``OEIY"Sq3RFLis$e>-3U_8[^`ZJqXO5p.LSpO$[s#K=r;Y=c+Vel@K3i)
%F2'?h.@HL`4VjN*INc4i7mk1d97,q!Ao`%okluUKK^d10I/1dI*Shf"8TXO__olk(N.elAI\4X'0;I0eOl,6%$2MPaPAB5A[3]`'
%T)CWC.k49eJ^>.5QYWC+Id-jiXY4I;0CG=ECL2s+HN!j!Yr;U]2%XLj2uZVAgqWde[?,,nM4G?;hgG-mD_(5)n6+gbIEQpR>_*^d
%>?*ik/EYkE?>m-K^2n`993>Vt2=9c'M->GCgWS&pI[q2dn*ZWU5Xr2e"u`"YAW-Adh-Xu&n88$FHG%!Mqqq;-6FM@=b<5L.hD@Ye
%PJ)6j2<q4@RN>ckbV_@eI[+7-9A&BJ5WKg??8rCJkXF!Z6\[3_r5Sb$7PF2US8dYh,k@!49K3ST\Fk%1kae?MCsI3j]Z5:%d[V]&
%qdp$Mm3BO:OIV^&M]*!b&cE-2^<YFf598@AY1MOX!ZW)MmS'n#[7d+[)LYDp0tX!$e6D"P^WYY9G%1\Y-V*0TT*6&rjN]D1c=+D7
%`/9.$378NufdCYt?):an#&/eqUfccc[I(6"Up.#2I@B+[Aq\YILEG#,U06tneuYVlq0Nj'&/VjdRnb!%4P+*k=>j-QJo5X/Y+k:]
%*EmaLT>+I!X1Nenj,^NA)p0HK4+9jWmZ`fDn[-'6)de)16ed,j6t^A)m]8!(.H%Qu.,3eFf,mp'a$Y"ThA+?cf!IX#J5c[JEo89X
%B3\r[^%a4p)&1$jj-kC7Y8O"^9K?MPfI#7Rjm;*c:>N)k%W'=/l=gmf<u+N*5.>n6>nMj^6o_r.GDLrW[jrHNoDa"NDWc?V7e?Z*
%_EEM"Z&_6CrsG)WX1KR9?[PY4A&BnR,@!$9W&Xfk(@I=!68NM<*dck;qKhABc/eg8EIPB9F6$cFR_:VtKN9%\__jeTkO)S]Uq+.O
%PYGt2r*_5LJ3Ltp52f`fYsVCO5Mn\[*Ic5C4<i<G:Lf.j0pdO]q7!fc*'0FsDhan0af,V]da(]tLCZ,+8#3BBC$b=4jt\mL0rFOK
%k;)'[3h9tuD>tSbI6RX8*XTeZL7Z[<SBD!sl(OF**tODiQTMZ:4.dFlkF!pHE@uHST"hopVf=>M\8kNc0$WYNkH`&fcXLUKZg,>P
%o/E#uIP#N%V3tNJl2Io.GpLo$31Hai:_<1+Q=cQ.$g1BjoB_e*31"+jpC*AM31#&dl`VtdE@rJPpS[7<rJ)Dt8'U/[Yl/^_b(?5$
%dbIEBTA@p8kAks>1K^++>Rgo,f>7-t::i@'\W#:5g!]dGK(udN9m'uef(W&h)"6O#HC8i/J6cK9quUhEIB^?@e*.Ab,%SR1mHj$-
%+eFs+BYWn(iWKp&>lOT,4"9WPo<@FqVBg<$s-t#u0P>/jrjbtK"lA./gZP4Chko1(UsC,HHqqS(^Qh;pW$gR0rZ)d:Vq_N\0<EIb
%#HKZN!uf_a(\r]F.GUMST2FKn=OnSM9^RHK8Z3uN3BnBmrmmR>e*[<^lcng'!+;ZOZ^"&,=Gc"pMGM"OZTBT;;H)5JN\dtY:KjQ-
%4+6^/$I%;ml#9>LgC*\Eo\oH8DZMqG4#;r:r:V\f<\+Al(Uqe1[o<+MmJD:e*96?lN^[rH.>/onAd\1J]pX+HRa=]oLST\"b_f/[
%dKLsPk-#1,lTFM`)RIO4DXYg(KiZ@p>8MHAT0I$R/DpDSiT'cuGIQM"ge04\r$m'mqo+`*ro4g*NobVAHd/t;qCN6Pn2:fp:rLob
%">1b@9!YgOR"1Z[Q@5,Mq=Tj$Z#BCf\%df>Jb@2n.O8`iH8"/nT`(M,3cOFW@Xk6BM-aaH53`8uP5>d@5$sE0q<(PM^<PRm0\tk*
%RG_DaCOU!W-JJ,QrTE]<.,a9frPcLKqs*hb`RJndp_?u`G?<Q2(]`Gb\9gJT'%06+TmCsGEDC?.e(G!4cp-igXCCun'Dg&QpJ=-k
%pS.!0/O\XCN?`&1abci34q&&Rkm>V@#<rr\WT@e)dSNa$+m_GPK,72,qHK?)ihX.?UomF6)D.LtpRr5':"_mt_E,I1STPZGcsZQ3
%YO%h[\rfb&W-<B#>b`@>+)J'nqRl_Y?[V?k7J4m["?QJW8D#:qa&>9#f!hp/)PTtb58;Hs2gXGT>8NT;f</HU7Z7*)c%L5(=,!.<
%1Yp:Fli1*)q58,ai`oEYft#ct^\;o$hYd3>_oJtDB^$l$GBS6n:%*R[pMJsRmd@dEs1Q2@mHs?q]3k<Yc(1>0^:Utih3;]eDnj!?
%`=Fq=>+=>+/LI5pLA>6pB@$iun(Z+5>Q<QJJ%bP>H+_M=/S63aRNJ)g*J4`XoBrf@:>C*BN_]WKOZn-b^,J+GHg^=co^t^iUGL$b
%/D(ltaRc9J30No*p#X;\R9(?blA'ZUmU-rhCutIObL>?e>[=qlr`X!DXuu&fI!\aR=TA3`8[A&#j70gBq;qF]SCi$F7:[)Bj];2B
%-D,57La.5$:QIuC+1t^Ra+*ktFF<6DH+`*9r9*Y7b]8/j?Mr60d><p2$_oLbDa,23HJ<4D@UF4+YAb'<r_gWi0.pWp:gq$-=FGVV
%b;7GfUL\TeedgPX"++91V9VApTj'FM\&O'NZ2<iCgB<_GlDNgC3FSWt5EZm$P$:*HV45k]W%SkFc7jK%5!GkdbY>\AJ,R@A(&_MH
%[rEaF_,BpY7aHM@erGG)B7KPJ[BKtRh0O,kQlbVg_ZXq&hqX%=`sZY"qkTZ=G@j:kd<pS0RL7W19XT?t]tm&L%pt_?[.DlB9XKph
%rgo?'F).\oh\&$Nesupn,c1OR_`o5sldEHA.d>$2$b_Cii+='LF)Og!PNMD[?7.9_FCA$q0Dge8#p8&m*HXHUc,hVa5B50DrqtR:
%o)24J?`j</?i.QbDu&]dSlOIde&`EcNEnn+0jAG^jjA,<Sc!(I)K`/SRJ(;/I<-dcBL7^RM=B-_o++r/:YX`jBnc7?91T0Mau98G
%rVP_Ean%t1b0Tg/J>H/uF>lQ'?QK`-3A^6tlc^F5%9p&Y)u]+j@:hefQ1iH?GfkJ3mQ[8];e!s&:PQX8T3[upJ%6ras,aSRBJ1<j
%b<SSPl9KM+og>P<RI+.U0!>1#[Cc<LmGE-&YoR9Gq<"5<F3ecR)de*)ErG:G`88gE9=+NGf#i<e]6F(mcI[cp]a'Ui/T4XaU!@6Y
%D[a6L;Cr\_P:q@gL[!jp>F3QBqP=Bd0:W6h&JKmDK"\JhD!;mKUfKd03iYOC`IigYV*t?L:e81<rK_?8kWK6P;diIOX;?;H$ig\)
%!=Yt+KcfQ$o(A:$)O%c,.@jeYpg"r0P\DgJ6?]"!Vke]]%;gQrk:N4mX,32XrLT6ih-tS#hseXM"rUuF`="jHpVr0E/)TMt7bsFh
%lXs95)`^dci\]dfIs7706Oqe0`2A6Jqf-HV0lFK9pqllcdZ0R+IGe5mm+4qgZ.*]]CCVm)7pGGCs0?Fq3dA%)jCYUJ>5k8:B7HEC
%lrlB#Hfk0hPkk`bE0%Jho?Jf?e\@jq="^QpEK'Y7Cq'[V+Ph:LRC['4d!-`/EZGF[e8_=)NZHLT4>Tt1i.oGrs.'%4o.)D)=0B2F
%A]n1`B*S/VQ2Aj**f4O1*d4nIY7'<:mJ1R5nG1dPDsFRu[<[4(hjiocgPOQrLRp$@LMLDV$pJ#;HX<Kg?MJ^%UC-*fkpO1Wk](tp
%Hu?Z6,OgGmWT0VSD.ddYpnZO[CBqC#[tAd\Dhg[u@=E^Q+lb7oLHT9tEUMEWn^#hTm,:4VC@!b^[Nj?\Icpqh"GXJ,YKml[4Z/h?
%3LjPjE$X`4LD]"1glHannu&B]eXGP%nEC7WHBFbm2oJ(:+`Q'kma'.LE+m>sYic9.@%DJ8CERdS*p<@HP?\lTrcsOsHt(`D%),!=
%5C#k4"7'B1i'SJB/Eets)ImDpqN'7t%rpM/pX>PE0%JM$pW2YN2rZ^cVgE.<YOS>.An^j#7#8t;2*T71Sn="eAMpD4kVbd]K3\'Z
%fD'K;F)+4J;>iTPoOn0@I;a2ga+ShYj&>4]Xniju^fUN986l(,U`K,7S+jso!pYfQ@G?O\`keG2Yb=[uko[$s+,^&KEkHZj`bPN%
%dHN[`M]a3fr-@$;Bj3A4af/Sllt.+tdY==i>Dm^25<Qm1L"Xs.YZ:&amU,30dcm5;(]QV)Nd?L?+/YnFI0a&Q%snes`qT+M6`]Z!
%7`$<j1T-]=DeJ3Z8%0fudRPdl\(0c#'G.n9ANJ,`[nb8PF$.b4<qm+We;:j;e_IKt1"7tdE,3c7]OoJU@T!$_cs'C<,@gk&@p0+!
%*=k4966scDoFX,SrFPnjpYO@`=*seMNEOH4-Jh65qsU@S"'qD[7d+3K,<Y'PfU7&$+3aKjI$fAklO&.2[rH[8-s2-kDtqg(.De#i
%Tc;J[K+Gp_qk+a?#*YcP6:c^*4,2jV<(![8-a.c.;GhD(^Q_fi3k4kAU>PXj^\)%!%-)k2%_<]/lH_<=3/'bq!A8#NC\21&cS3tl
%M+6%BB:!E#Ua"):f>o0q3:(:GCNO[9=lpX7q3s1`20,EGcjaWSCBR@iN8i%RYO?is&O77kmdBNCrm"k"?`raEq"T!pp&FBAU.rsf
%s%hkYn_^o@QY+LQX=WTX-)<V@7fF:gDkBZMcKuaool>6OkPj2U\,.8^I=;(cJ'Q<Dm*YKsqqGoLk0A[!^SGdT4uZ6_Pe<fqdmk(A
%aF&glI6$joEc)cpH1\j@rqVO<DW3m;4:(rdd;)9NOZiO_r9Gj2ond5ZlWfmK]7024oAn]=&c2"Ba?NgJY%jGIA3uT)aa``45LUgs
%TCdF,90SAc]c[(5a2gK/^X46@\.`.&l*Y5+eA\to=#Y8e;3UXPZu,B&rb1VlWqG&2nZu$SZ<g9"qd1Rng.RVT4dW'\YH3m"&!^e@
%[%^T4=^>RJBqG()4FF8'Rij2,=^/:"f&d.Zb$JCc3Qp]rCfsg3MQEs`en/dDZFX,E3Fl8GBiBJa]]k\mS$FS\jL/p/b)2?nAQ&$j
%$@9*<.9KW;i>tE+rlij(QfM/hZE2YgC!O#s./CSGhJ8Q@@p.@/4$m!?g+o^"<qMP1&)XF68_Tsk/'<O;V'&:5.9P*LFgu;;98aQ@
%HLIANXCur`=u7dFd[FC:9^%0Ca=@$i_G=71oMAQ-ZDQcVQ<CC^;`k>n:([[qRJ.'\<1Z"]Ur`A7A^N#dS4-GK"]<sR_S`dp4DVhT
%.f(">b7],hX:Bla=6J':OO[K:Z)m1I8P)^@V7iV'_I.3ETi-4:N;=_/O&s_"at%e&$uMMURoImc8]IL%D#%WmqR!!Zag7^CV[5Ro
%<V01r:S*ibZ;(*0<S=,JMFXB1&OpqDos1Tj#0<_DW*re/LF13NVO,d1=b]-q5Vm`@7W-W%_l(ucGsWTRgp;.OUQ20@Ti#.WFcb"<
%DD=J!N2SFVlE"'P1oTXNl,/hU;<QFoFLsZUCGbs:2>u39K[MPmWfgSZVEaT!1no-NeJ4'b$r@ki=WSnZ?2*'MU`huJ\gWL+]p?YW
%NW#A:FIcqnCQ`"m@Xum_DX5Y`%F*9)"-c8n<[[e`%J<BAd!]X#C5Xu,cHu\^8KAPcG#S&()?Z3.Dk;Weh39b-8nnAF]iA9Vh_nK<
%9G?]M')0_(XJX[3&P>Eu/EIZ>PCfA_VfA-OK<hSTVoK@FEETZB$!MX"%*b:H+Uo!#jYlK,+"%q3QmNs!Z5u_OH57E<8X"ndk4IdQ
%<&EO3Oi-ocC0_a\Ug3,sbOE3&<#<PfKu"R;>$I3U_AK,s<O<Y<:lAZ$W"!DgV=`n$UKQ;[OO?s?aH_@9oH5S9N)GV(,Rd8U")4s)
%Sq[G@-K?4CBVr3TW&.-1J+Ff,Tg@pgBLl*>.b?4BJ`2MDU<Cp&Bd00Jch+NE.>+iK%7ZO7Vqt24*J1LB'p_-V\h%^[54lo*7OrV!
%7FNFd>>eoIY1/YY,:HWP&aBgOST%.uHmu`K$#+pd6*mD`d^#*DK-hEu>+"_,.Bnaf(^Wj)4Xi3iJaqD[)`DOEd`\Ih*N5s\3g$$n
%Uq-9g1d5FcUnjSSBX%VU>nfDM;US!6dKX-GV';^(V8ap[T,4:PK9.p=JROF":$_<6coh[m(sRAA_D'PS0dHpWJP$GKCT74O'*BJE
%?Bb"sGU1]p8O@p%6)mCm7,#(ad.!h:RoF:TOqtrCD4lf>l:=M&A?5j3iD]\8l'nckE,DgKb+Ko36].i'c;Y6A>-Z-ER-&foQh"p\
%7hl5E:!FR,_3?cORF)E*Ug-H?aVF>i%O";n4=)GNWg!Ng<RS^ZM<^$)/@BV+LF+?J<4>H@PJH%FFA]phNE-Q<*L:-m`df?u?I`b7
%EEZ[Q/6nR*<>cQ:RU2f<88IbNc"d&$FTH<5S5pPW?5@R&V5th4=`mZk;H_BO<MIX((/q.hk`*ec-iH,?IOM;1%?m7#20E[L1n-$m
%.?kX.)j8>&_Eu]LF^;9G9Qd@u8ui;X@X>@[m&uWpUuj[*m?6*Z9@@]H_+MHWlQE%uBP:YniZRVSWfC7BkEUaN!b$dU@DL<A.N?bk
%'eCA=Y*;mu)Q]aAL09.8-gaam@DSYfJWp4!8PZjN'fcY1fV$hf2,QGj)qD0/d-I'$H?U8moY`R9l-8<9CWp@)m0kHZWt,U&$RIZ)
%eeYJPJdfX..B*`uUR&o9@,4YOB/E[`UGOZCaFMEH'ktfY^'Omsjs'%PZOYFg((U"_7XroVBT*-2%Wser+)68hEr&X%b3p;Z.iR'7
%H5[V\eE(4KdM/WHZdCr%K(MS<9rpM2^s&K9cY>$%U(&ijC]'VjM/'@4Fq/XT=Ul^A1#0XmTbbjc&LlIB9Th^h/OB>*rJ!fMmG#M/
%TjGiS=fQN@-L"F6_+9se`5G8P$qM9@)6J<tCWV!>*k<-s[7Y%"$Zh)pK011>q)Ykee7(j]/#-P-[))AY77:=RJPS]4dpsYU`C$X`
%UZmojiTF>faruBDgB:G*947A<!hNi'LtX%?LAHeW<^q/,T^E4T=?U1tAMdKPJ&PK?h*X-G@*`AOHkV616d:bbZ6d@G=P=XoVCIPU
%/;<=S``GVCLtX-04b`8jlTNouoY..-BdkD%5f2$Pp^C2P>1).^%)]L_6F)*6^1e0*_][_sL&HX!LZ']]#`WRs'570"-[_#l!2>%-
%_;Gd_3eP\:@6i!LbuD50qX5F'LSfLp.Eq+hV!l\gFJ@\P9n<>hDEt^<"p9Z&$r:%S_0EiqaS)BaJN)&4<AMa*!b)#D/!HmQ?ioH>
%&6Sq<9(!--LrOI)L-f4SE_.*6G];rD-;u':;-NkBTf_ikfGkdqkDG!G7RNA10<tUQUBKU((OM!\&6V;Do)ri`N$4S8n3;2KMVb!f
%PB*F*@<f8hh?[^)[21/V=k.OeXPl"-0On!`W%^i4N3jZR*;NJ&EuIj(FQY>8V1E\)6.CXbdV02Goe</[/"sE4WLc\^(GLg3N_g(Z
%=RB5lbD92"W"5?oTl5i5=FF"&8JY8R)5+f3Kq<#l)(c"C,9"9mBOr\i?GJ<?r=r;(aI8dkTHgd@Am#/PW5K@s/BEGAL'c$A%sg0+
%K"6N5bo.*r]9Pi=@2IlK8\$d6N,pBO.(lpA[[$Yf(9I#01sc:@?DiHZe=OPr_Ln.cFjP>7D/*&SAJ=\VetkhuC1sdbC+cV%H_)\n
%l4,RaTCD.R7M-(G/9PYR?\D.,d6]/cNF*:[6/U(CV,<S;YR((XKjg-ucDb1c@Be*#lrpWt$L/*f;g3=0;KpV+FIBe'*ika&mS_Wc
%M>Y!ql7So'CW/agV^m!/&CO_u##Pi1.)TPlcjAZnl7Akq#g'*2Do+!@Gc?k!H<=8RFdKtsDPYVD.]>E7F.H4Yd2C,@`"t2/lR$:,
%#^*i$_T:F`QlTTuar8!,&?:)<Fd:JtKLmJ9XN?(.K.0aHcj@QO]GuTM(/,8Xr6T\mK61@,7Al!c17C;`'cW*$EqCL(#B/n#n/tBs
%Bq!uG_V/`Nn<(P$TsnGRC!b4fR+P5[&=0^d9oF6r>HlHgHAd;RdBYH%A\c[HbR+kIFlotF0rld6@9VsPX.\raR-#ToK>N6pOZ3@M
%WM&`Ahh3l=[%2!L$KF+6^O)Qf`5A*ccNthVD""Is7QL)q.m3RoYQ80lpdTk?Qt0paC!JhlNE<U'h=Car?In?_RKfMU>XuXXV&mp0
%O!C)0oUQp<#g!fqG6B)=<]!D$)/BMPO_*6i7O:B5'jAtF?c:";A+:ca&MgY)]5n&D0O>dtj?Z&46"JNj1'G?_iK]u0Le(SKQc%-S
%%X$<)hO3C0Co&gC]f&,dMcS'/UGib<,1TV71^nt?3@hD6M@ePmnA8LG_*'1rZA?2?6[4NA-Vb0r]Yue.=."e^dATf%Wg2BO6l_^,
%jo?3^W70;`_]YQ6PWE*:oNg>(rp0Zn8_.#l&E=s_=*I[Z3)J\cVk'Xh;6H.qa/r5.^Nd/1M]"igCj3Bh&'c-idbX!s_(Y@!ZHbcD
%hlih1fi`>-&hBHIZSlkqN6KMk,#4mq">]pr&&4;tA_o-M&1MCP]PBjLD/GI`lPLRsT<V\cc'#_mM:Zq<(\l$]BU6rh5lcm*YjL(1
%E3@</l<6pgX6$SE]T!*PS;(t5Z,Z"<_U.gr)dI`CB"`bNBNnUSA]GMG^];B`2]<9\@h%GB9>hS1$GMoa6kPhsIHO=*%aC,5gG*U1
%_]BdfB*@BT$p8c$c<<^,,CsXtm:o&T=;a1&*2+%Of'A?mNX-]l4)`Rmo"nSLg\r2EA,jDN"@R)6pg2725btS7i0ZNs"#1luGKr37
%oWP:ZF77'j@)U4Dq`?ftcmE<O.!e@=2`5a6EM:I=-%uIlhDnec;hlg^h(k"++lD<#3(1P[qKg346U[&_2=3AW#b^^\p[2PJ_SS[$
%3Cf:nDbtZ7--b0gX9@C*7JO"o%WQT3&a88skoF49,ccfg"ReAr:<<:Wqq)mMC_9s/c8\.O%<Y.\CG-<&G\,LA050"ILb/Eo!)4<Y
%Gjsg#bb1V;O&3Cu/egkl'V:@P'F>11ZG:n$U;0aLP&=g*87:Bkh&&[KX)h,^\DX)-"XXLSSdVS58>7tE-i?jb&Q[8On:@#0P:"Q.
%:.V9R@H(/aqqt8$lkM@KM\6bl8L_]I@Q92k8^K=Yn5LMdKc$J@:DFa@4OR1mP"!(okqqZh+7gs;R!<.Wqrh.EPsL&t3#XBhX>PC@
%Xh\ad3*mCgF7^fT+V6q]6+eC3Ql\Of([`d\Qpc)N#n2tc6B@Y'SIf7-A?6u&XHAGsdLh9X\u9.j<"AIM/pp7Z8g=DZ3>^j0$<UA#
%'Y9)KfeGcapt0:X+MEo&SL?!?O/+$\&JO30"^RbF(*C(=9%ZOF,8]AlOSXNonBp.qFtO6l:>E?-bFg//J@R)/TI"t6R]M@=-%+(N
%-t*f5<Th6R7G.ksi</%-Plr\t,3IAh5tUjuH@bg@P412NE[ud*nBlP;]Rl=9EW#rn(pntB!790t/`CaSA@;UmiNil%mfkB&o++9\
%Ya4d8MP>i.KJmj"N<0D7BF1=/+QG=m$(iOnl69mJT2;4.#[5*C?4&MuMEn[EdM-iKC;OV)aFOb7_WQ?)\d`DkB8FXY%r/uEP);^;
%,G0+Q75Ff.o2>hW-<:F*O&_h\==(J9=$c[4W!&G+UErr?K$0l'%?)EU@@qHgg-kRdbKL\QN$)YP>mcXOa^3ZBoG&rOTW75:"H-<P
%c"@QF[L@$2o8Ei6'ap7%8<R=O9,WNfQanBrM\\J6%kbh([(un9WR*DO%9++6S1/0P^fL6kC74.WiER/,9FB0d/mV+26o:FWld>hX
%)U9XZb61:2gNG?koKT)0>Y:F<-)rrL4dTk,3mK%N90af)j'4LS9Z7S6=mn,j7E;t2Gfc$OFI^OLds<E'c6_7[pkt/RRJATQ9?=%#
%9/6^(NcVc114plPGE;eC:%TRLoJq)fb[:]"jm4)ll7#SMN^bEQ(d^bW3c(Jm3Is'5o*o83KhH\&U<I!N<?5JAUqc48WBNgQOBs(F
%#<X1C(hG=CO=)o!R#m&T.Wn9PRDTNO9Qf\lRDTMLWX^7?O58jqE@_Fl6)*=#FHXNOicWu&.66afX:Jg_n\/#Zj]r5G5n#2&0W%B0
%_fYqt(d^Y-Zmip)nj#s$pFZ6W*?(#^_d&<KI#9EK`/XsE%iA8Hg*)3l$OCp;-]:Ta_+aJh!i[_Z#;KEs;5LRO*<\OjQmQ"g8J*4N
%#C\-7:1C'_.&i@FjIEIrLJsIL'h4VSY"E@4^1?<28sfu$[nm4<kfTXn*:[#q$an&F3]*q6"Z`MEa,lR^`0ss,1L\O#BY1]&,Et[7
%]85PSX+m#L($SjYP3Eo7Ws2ERcD7a\!6UHm4D&$P+DW6;U9#9r`l4P`<"7N7/FT<J0`GgtKq`=d$qj`p'ii/uXO8`$L(Bab,;<*!
%J/'DkL8&GT"")1a*3.#R\dqdk^t47_$)n+Z<2+>$WaY*-\iL.tL/`VaF\t"!>]a!sW^\b'nJJ<]"A+m"X;"^;LquVneW;Pk;(/La
%:Sal2Wc8e#(EcUX[=W\(n69JS&A1;fF3h++r/P2G2-,]IdQ`Vh'i=K&2cET`.o[\aRZ_D3'Ob+ON)V<+$ORcO<l.LlRjtF-%?X94
%^eclkI)J3)<"2,tBbWqbatb/SMQ1*><d>K]K>fD0R\=I%!QiD=<"8(0Ys/t'UW1^%1K:K>_"sWie^.c7@2l49D3cMWr@h31gFVuX
%Tk\6snb*Dl6^n6/9gCRRY[C*BW(%4sLn/+M)P$(R/1(S$eSsuo],IW&^n_h*#--5;jR?U_WZgLL&HW'b?lhtf_*Bkm*F6Ag<($!$
%_<s$S%<a$Xf.9isX[._sA]-hk=M_:F)5p#AOVYbe1f0/MK.Q.-;c'SFK;./mTGhY)2A=M46++]u=9bc__._WqS/T(R/jnDR[5PAL
%Cuj)r1pfOf7SXDiXYNDdWPL[#HRk9!#&F!C$F?7E*^VBs5RF;gB\$\>@;:V"E22b[9F[+!EY@KcJuKp#_K"-iLT)GSP1hhu;aV8<
%!$B20+Onrs@;>GuNGs(R;kn>3#_o%?)K+%/I:SQ\i]8!)1eJ4<RIsKnGY:aa(o>67-F%rX;FA?uV*I77WO6TIOnLo6L2<-l8Of[&
%SlR8$VN_u][7nT+;/0qd.3#&30SB"\8u[BM8`bX7;aZ@4/B*FE+dXT+V22)oi[MBIUsuW7p-EH_9#X%L8<"rJ=o*Q.=q0Xu7Z9WJ
%29'si&#mt;d_Tg_)P"*:pa_!H>ZrI@C<6#qb[Z`<'gq'm;T"F#I?5Au4Ahr;;Cf`[ht*'NeejtT7]BhDC@mraWAV\1)5K`?eqbCZ
%+Z1h474.)a6>E_SROWEJ6#([=AN35_[S05Fe2Yi'<2Dlq8/!JZ'HskBR'CuY8?EAAr&o\^&FF69<`DNt@DQ+^Jhh'H+<"B"+gjd@
%qT,VC86.VMPUW@sqCNA)0J[Ac^-nGY7#f\^<VJ:a[J<%L;8`/^opa+&@Jj2Q+(`r`MO2<,0l!q3Q$ZG!NTRR76'5$>)5-+^ACRQK
%NB/pdX\P9.f]sYpBI^]k+_nDfNKI)UHEN=3N#HM`;W(,Ve6kg<!5^I*eDIW85j0%BgdgRgaJb@>gPUq.*1TWH11esCQ)70F)5Dp(
%=8+Lc[EU/@W0-?V]-&kDn,Y%*a,ElJ_(NN&7+C-&'`Ehk'9^=]*CPlj0Gg\-&2i[s<$38Me<$n/"=#Wj%K:U@MU33J2R4V@;PSM@
%$g1o^>%pH^;JI(cpu%'"8e&=L@7Uf)UCVG-ocg6`o]glpN@&82(GnU@Sj*f&_B?6C%k5sj&#lC.pg_W;C=LO?I/m/\,>/^o2(WeH
%N*9qURUajojFYW*UP9AXaH@`^(lGnP3(0kX,@n!1W&5>hGDI/HH?r:Qe4S!%3(=>mYI'cSC7)*V?cK$Q+`85"f9B-"pei1s128Yj
%P,b-OUF.RtIRYol4cWAi_arSK5\d)FRS$sIK@CJ1P;bEk%G%YW9Hp9eBX#F&*2V4i(tVW"BMFoU7]FoRH&RtkFG:d3L>[5(?SkB7
%]"Cf7.CD8t&:5Ek/INW<T#]@G1uo#;4Ju4QFF14/W?Fn]QS_C<e`F\WC5iBF*Mu<pfSG-8Qs(4UTtLr5<X.,aYCigZq(#"(@;:KB
%(EKB=LHP'4#?-7I')`Ft[4JV^L8g:hQ+Tr3e>a@n0h`&SN%+tJe<$@9]/*o2YVEN<,GkYa6Zd:ce?DaQO[3`Ag$9,GCI41ocTu<*
%KqBB^<_"Dj;JNUBP7CNl/TBZ.24,jKd3>ImTHOpHb;cmZZ@S-:X))p&S/TYs>$`t)C6_r#N`.0rd#&E6X,LtWPZm0n2P\dW(Ca9K
%$T^a/hUsVunJN@B(>m+dC@St^UD=fi0l!sB*MXAhh*Ge\HQ8jt446u@Z-+/b(5GAteD_<cR$s$m#H>Zs)'LjrH6]6J`d*6egl.&N
%R[Z>BWOY%O+LO0J*MaJ6Xb5-_%!Re:e--=[Md""aC/M`681c;8#H:.WjWLt0g`3,%>0oQMVCa$fk1"-Ve=6T#OBU/`%T83Gh,.oa
%q`@D%XqQgnM^s[[eDep:.(-QS77o-aAs#u4b?i-:g]H^o[CDG^9J%m.%TA;/ZfBQp6LHh@\E#_H/K+kV;fcP=jOB^9&NM^]RQ+%o
%g+\Oc1LnIVC=+MOTN\^p*2jW)/HaP99kL&e1Ys=R(6(GsWC:mTEGB)E3_V+DQk<8<VJ*otSC&602.tc89J+u7N`1iOZfBQbZAt0<
%ZbRf_(/=HmWB$I);/4MPO-Ei?&KIY`]nsh03PQeZC<f2'TUPI`*2jXd*XA]6s!WJ6d?0<Z>4f<KVrh5?a/MKTc>dUHh/f)iF:9Cl
%k$6!KWB"V?EGElQFduWW?lc-\?/<T$3N"iWC<h6fS=9&U*N'Z9EX/U5h`ZR+dE.H>RYqA<:<g`e,,Z1Y%$"8EObh)X\X5hHe6I)?
%Eb[3:i]+=_0l`^eN3*qq(1T%\;ffdDaJl_SNoSV?raV=a%honZk!Mb\WO^Y[`7/7Lb$f$>Q5),3(\NZQRZ!4e9J&`^$r_3j[tq#o
%i*=4M>So,'C+eH-0K"as7S:pZ&<0S/Z,T>6\Ys&7e6Mq"@;7OF))3ub'9/BJMk3C3c,Eg1VWK).%TA:jgPDi>-u[&R>WauTC+aNH
%0f9bVG*n`;U*HKMA(D5iF2@5LWOX^-K[a8Bgehf@ZlUYR(P@d5RZ#`e9$P?J,GjNX!0L0#\H8PUHre'324o@p9$J_5N)K6r%AVF#
%o"uk5QR-X5>"khR81c/p$rZ[G)MQ[g0#o(lTCjp0c0'ij;Y-;%K@G:oaWNI5SYB7,P_;hB)7^O3?'/!*H*PGh\I;YPe6K..128El
%(E#)s^(Wsf-M\j[k-BOM;0.$#Lo@im@mngO.P`2_/nZ%624*)T7*R#D,GO>+V%HRGC"8$<\bp52e6J_+,&/a*)\FroqMg<"b7R64
%bpAPuU?8c,&Q*W6l%l:K4Ea-B/DD0G24##<J==ZQ7mP=qfd!0Po'm;gF,Bc"W4<>O!GW)ILk(p="sT`&d"2P%3<gW.C(=:#J=<5O
%,,")f#6WHq-4p89a&>Akc%-[n:ih:Z,h*gV&IGk$Hpg4OJg&.33IW7EBc])c50X`i`i"*(`V;:9\/:k#@2S%R3m`iTBcaE350["c
%#,lfP`rJ!Coba@a!2)l]3Dq7<C(VjL5g=:=&Q!P!;?YJhaV4b5LHJ!jc*:+X:id1J"OnE.AUp5EZ6GqWl)i%)3Q`lCBatB+I%'*8
%,+n#mZH/pmLpk?O>(Ud2$E6>91PtE?24!@+Co:c6%3h?0$E::(4YhT<+=f:W,ENgSH'WX]W^17/^P#L;N1;;956@[9V2;i?Z.9#R
%#+:mH6E*7?hKFteV$<?jliO-edB:Y^m)oC.6)K""'N0Q7WFaOPT[^2`<jlCjfaCs6-:11Wd8dtn/4I_hV$7f_7%udGV8eF7g4@`r
%,""Y0e,ZIV@;gh$%?)2NGq/Dm(cBqKZ@3+R"pkOQpEH:8F+P3k]h#*<mV&D;PYd!kI+1tQ9aETn/_lhBL8_qsWFU9T7L_g`.pG*#
%;1m*&2.>!B60YOMA^k+&d>A]A2IY*COsqf^N#HLk0tnB"K8iBIN1WiW2;!L#RG<^V)N7.sI:1"s;.DskP_C;rZtt99&*;+?;.J(^
%%:6(XC+s'f&q2<d)Jn6,$'q/,C2=Tn@<<un`n%KcZAPTcR9^.;-AWT,EU(232)Q6=*+mk[8.>cP&uN/oC@D\$^1(hr+uC"-N*=%I
%:4=^P)S7:],(plf]4U.QTiUZ#+7<qKeDLgV\8j5(C2g&k4q,ul"Aja&V3,0ieDR[@ZJAR_20SEA@,<<)"t))RlOKQl&$cQ9U[i-g
%1t?,64q2rj^WrG2dgE1N=oq4i1jHQrm#s@lXiPPkVAl1/+CqQAL]D0Y`n%QI9G9[n!9u1V8-@?KZ9@KMYE0\#mSjCG'iK[>?Int?
%6ES)?-Q?+-0u_]TP*>:qL92V>QYC_%`R`+D'377oCLl8c+H4egODif9*2tfUIn3urUXhE%+97X'CM@89J#(XdR)n.R8?Lj?\KHDl
%X`8MPbHNG("qt$RQADXD=)S_^VIF=c?tJI/>GGiS$DlSn>D!Y?!HH$.&2)(>7H"AR,C9T+PX&]0Xe@BU;)sB5U"@Jf9<AqSgtACN
%>!X5gQ,$!aXcX!FH-e.GL-_>@>/O(522l^iQ$cN/28i=)\9G289IX./74?q0js(+gp*-u#G_^m!MQIV`8!h)1MQJ&-dF>;J5ne&D
%W[9=*N1+-iLeSS3V:D6`lE$%M/(i'CN_ZN1kYY(YmQ#$ai13D)VU-5*#1SW!SI)Y-7F+0tSqGTR3hQYe'O&DS6_dr$.F9!!VcGf;
%J_%'4WHht")O="K:i4DpQJP6'=.(p($W9:IPZ`V@=t7FfbSiUb][?"V_Q:RVjM:V`A(KQSVG/[-(M4+/?rBWLZ,!HW!RqQK#-G/>
%Vl6^aCF.4H/U4/:)Z2WJ'Of?,>WB=.PVEhbNSV!3H<d.$G\./H.^]I.N3nD*7MBMG:0=P##F/JF_kfQ0;/>['a8uo<9rPH4#Yh<f
%e:_"X,F&Yn.F8u<-?XSC>(_$p'WEj'E/pBo'UVR]2>BI;-H5!Z>(b-g3i3:e_7dr'=V_]TA+ukN)[0oW7$=Van55l:\2%Wm2]$.e
%]p;j,0nIp6THmYeKU>#?E):4)$&U(V)OqD!S/AU;a!9."3!ue(nRrWY;J6M'L+WK2Xd)H3.R9`T=padlFJD-;ZiJO\Bu)U!ek.^Q
%15Qbc[8t/]Ws'FUBWX\D<%KeWek2#HM#q8jXcZ=fRlh-`UPVF#.1i+<CF/?+U?k3^,t;r+oTqgY,pI4nDZsaTCfkCqRC*[\U,qaD
%<\#-MIbJ[R[1_+]+_?3=>:XDA(;da5[8t/IWjLQM:hsV]djIVe;7G#,BtZBtek4fe0$KASCLml<<Q[i][8nJbVQ>P^CDCd='e2VV
%[0gEFe;@mjX]5Wqem3*oU=#4V;BJ]>[43U_n6sgM"oCiKo-q(J@5',SWRP)TN@0'0%9olp`(B$YJur%oiNuUoZs!V`U2%99e]@0b
%^klK8'oe\NG&82,<i)(HLJhlh9'aQL.^`<RfISZqOA]j/[KX+f^e1_k-D?,uhFFQQ$Mt>[:1;Wjkm,s:D:Db.Ts2+4>HNLb;X)L0
%[8qjaO=7S9CD@tM7*E.J[8t+)&m*V^2$hb#1hr#](hT/.?UCmBN,W@OKN]T$*kb4K<A9ihZ:h;cBVc"M>H;GqBq5[megaW9dHZ>+
%XjOW&%lS;76LsBPg_tH,[Z/hI[>Mu!g8N#n6!-]9"QS&_(hJE6O`G4K2Mo4Mb,nYL`G*:L_:B_RcWg`5_:C)hkOMS))6gLuQYbuZ
%_q$;jTp4D6C^i^RSIJf(0Gb'>[1lht:g$WVef_#9&1b4jnZ7lM"E"YmcB%<PD@JoaO'p`]KPd`u&T4_fPflK/.^oVUg=F9G6!3E8
%VVE)C<A!jHEbc6/2KH^d+DYOG2JfLIWLE#s"^>JFeZH!oZ;s4tjjkP"O/pI+Fh]B`R_,AHC]</pY5+tPE6Z(VEGPQeQ!<hhADEVl
%9&nKMUDp])]>qE=hiYp\q(=UDbmt9Ff)-@?DTrVK"5!IL1iU^#?N\pX82kM4cNs^*r8^^oc-J-IfA(I)DU$L3j4=,:2f?n+!oqkE
%ehD!dlPJ[6]HT+Kc)WDUf"?#ZDU#4J"4t3&1igjA<[65/&ls%tCMP0H]O!O;c*%+:Y5,KBa>L`4(qJdq+!]D83i1o+?dOa:o1P^<
%COVC&Em6887]uQ@f>oha6lW]!(NUhQgo>;NRPt`c>k<]'JSX-'0Q>8U-O-`!/&o@^DsnORjt.f&f=VQ(jI.m5$s`C)R=T/!HrG"/
%Rs>4@H%XJZ2/bMo\`SlF,M0RgC?1gB>`E"[-E`MIhA/"ibo+b1Y'K?eco#`s)nP/`G%9.:D/\d0Erct\o:CQ-CYksCFNo.SL9>ed
%`R$L2d29IWI31i.S<Kc0RWkWf>k;j"TkiLN1N^mREe^`BVpE^ImiECYjrI#\f=]:@kaH]j%:/RCXJ'FdiAG`%]>fT.Gph=m2=GB$
%]&rs36eAsUDs3Yaoo38K;#t1Y>kgS32'6EaFNoLaN*Pso$R=8NKYtkg*t'fDbstKe>k@J#-.dMe`m?RbZ8$IG#BpS^o3ibOf3Gu0
%cnunI13CcrTTiaROXakmHq_`92';cPG0S(LN*Z#e2$EE:"$qZ;b<dEPcccVlCK;*?M)HHe1SW.5p^Cj-_*A+V>h%,N2BQ7)TZtM#
%%;>>F9*<mqCt!nm(BcUebstEdBCg+Cj4Se_ep'(hW\p<ka)hc'o?gp_fmK=BE&JM/2O_kqSrI@R+_npJHna<"2BVWNT$7M]NG%jV
%FQ;&%d+rq)+.Y?^c%YZsBCkYB_qBEL^i23(6\m^kb;MbYc/g5[B6+B<LpOWk8&X(c;C(7</q"@X2OA*64I]!c7%VXLDiA=M=e<^@
%\U767fj*Yfnn]r!'R@-SN/BTab?@?)c)%l`BCgC&/&^R+Ad5gAgmUNH4pu"bS'T\(jQ87F#.aOD@"@$[VU-_MT2RShc"A,XEq=QK
%UYL5`djR/Apb^(:-V+tmo8-G!gjI,l+?,p]29=&*E"-jZa^0VT>Z02k2kN2j`\$>?NH"KgBHu;[cIrO_TA2?AbpC18E:^V\6em&e
%h%2N;I5f*hVs+Y1oD*c$gjJ,=&3!Aj.,sAT!^ka*EF=Tl7hZ;No*g6pDB<sT`6D3mL:B6i64#R]=W$,[Bac6A4LS[OS*)klE:Y3.
%&T40W0uV>#--E`C!lZ"c%]Z7^>DHoi`iT?X.-'G,)("'!.#ejW*TACGDB1E$!B1PY.,WSVI?\[9&4+IJH$%.&2U<3Xhr\&e"l)5H
%A:U/)Rga7W&<u^%*gSRqbu7W^[s@nopbpH4.Gs950&t\KpgnuF-c?F4o-g"-DOrjE^s03"#.PPh[autD`eGSV1<6i.XQU@+A!,>Q
%'=J@U,+#EK_R;aBQ10KEK?VV3&@RS+X&bl/[]P3]dHZ1M^pZP+e@_Gk&/Ddd#hfJcQH6KQ7GFKb`MunE%FN1kHW2D(RI1&O[#Gh-
%4g[K%2FK4K[TBhqA4`ifMP+g*XHYhIZjd"q(,8dqX[TTlWXC<2"uj;Y8YBl=>e3t8df?k.qiQc&b-o,*9P$O?h*ro0/\qaggKI!&
%V,F8?D(%lWeI.X[UICZT&P+gVgKK[p!VTR*%?>;0((G.s?seXkB5efE?5<B(KA.:S@rr'^@<1YI+bSN'Z\&WpCg2Olp`]-8E#\*@
%(0MGk,NZhDm@JsbTZn`SB5eeb&s/*n#.Gaa00[(cD09XS=Q).<!+LNsg]gY!9N,HUkj)aqn66aa`b-Y%V/0re()bfXBl%"5d8>#.
%Y@5i$P-i-8@E"En3!Qil\e3?:2Ek,-N[Ii6XfC`@!^k_H:5??`Z#*KYE?JcGYfSm3qU"0/.LAhZkMS6$f!:q`$uVgp8To'ON2CP5
%e7[.f`jXjaP?'Y$A_TiNr4?ba4K\*^`jV.h'k0&/NE;(5O)75c1)"]HfJ[QZOt^Z^gQ:W8Zm_BKD$Y=k5G;a0K(X7<1.Bs-.]o@X
%9"*i$)FUlj=*'KQfTp%<bB#2c#00CJ9Jim];=$VeX]ueHeqrl\`jHridcPsc)n`RXcQ#rh%?O]Ha0ib5OoSMCg>Kf4_?:b.L,0Sj
%aUl"k%#0m0K#Y2Ah9_4jASG6ppH7"rJ']r(#b#4>fK*5<IF[!.aHU_FX'ol;P'4WK`7c-aW9pgt(+tXJE/M%Hc(FZ=D=D,j<.p.:
%EU#lkT,H6]flm#/[F(AdZuhaVD(U@@njVZoYiOnk[i-4`Q86icE5o<%HBJLgXA&aSHQB0s/s.8m6F@tGYLTEmes;^)iioj8J.R&J
%X::ji+d+&#ej/guh)<<]OZF'+c+(25U1KI&.o7:s>E'*'9._.h[P^32f$UucB["&MEb`V%6/=!kB3\YTgKPZLf#5^F#.Ae`c+l5^
%jUsq)A/i+Sn&S>,P\hAjdn$oujcOOj?s>*XP<BGb+U"MC#n:^o\7C;@;o(A\/57?f9u&[JPqonXJSd4W[,Q94gCQDG*7r7i(lDKb
%d`=<p-umNVfp5^E%]#5(m%OkRB4MrZT"1FPWao=rgKG632HXZSfSs^B@?NLj^a[rk"[H>j8@BZSVoM1Ug4gGjXd.0GD*pukM-+9B
%au1;\CMXrkEEs<<D*nJf<_rKi[LK*/+tmJC)]L]0?^5J\&Yfc)U2BBl9<AAqBH+Nc0cWR8d&4:u.#,1\<d;[#2Y<1g&I,\;9+#+"
%$uB^`.CC76C[-.<VL`T#*0a>/:;OB)r=ul?Jo.W'mQD)h[AE:jMHh+[3/-9O#.Co\65-R4aYu@O`k]"iDq6E*-=@cjI'mcr1p@E,
%_Q$XE9u&[J'(sHb"l#,q,g4\=@m_/uVR6tJ6FJ&rWQ,\ifnOUJ'phk)%>iV)U+JjC+YR%I$H<D+`bF6el(W#0-Rno=2WU*dU^q<0
%p:8HPN`!.m)=:NT:!bfZ_c&/EA7uq1l*<iMZjfZoetY"-N>)4F\;Y:Bl;[GMD+G.M8MrrkYRoJBVM_e_WmLTTL:4q/.tuP/[&ka/
%RBl#&2M;ej!>X!?kRB\Jf$Lk"NJAi!g/^\,/u!31C5\#pA)#-g<hqLZ%9\6UW^dr]#('EYh:OVFCO/IPZ#+&^kLDu/%@P,FlrIYt
%8/WkMAS>;e)[5>]K!n[,VM>^uK!qr;YK)PNg4o*e*_r_G)o?YWrf(_]GV51e)qfu8SAJ5p[ahYfmWl)IiON!&3@!:/N_)8WP&4;(
%'a-=uNEnKj4%?Y%5Zd]DD2@7'pLn)A%F(uYSW[jZl'/5)ZE:8S0PY,;!d(s])'dlIU!j?S7^aK(07I7rgCU(-,)_2aiS]nfb2Xr)
%`oT7W8tr"r%?;hL_TU:a&mAj16eej$>Idd%gMfEL<dlj5XT<bpFkROHK4Cm:YFob-T1W^LTl"bq'<UGpBH)=qWN9`C)oqM[$l[g=
%)0j!RN,1kmU=MqN9"#m-WFZErCkH)aM1RLi%<b(;f2T*dYs?;&$uNoR9&))*D%LGn5%E=iloR26qaEs.ga+3"k&)6n2YWT$D0%?E
%iAUGq#.M-$MK#&#bm:ehG)pTHm%DG.\XnarS*T[e[^iYOCg.lH&T)TA/[B52=@TaD%H,=9\Y1(t2E*'/gZE+/Z#+BI7CLH8a9]8c
%W>jeS2p!<"k0u\MgRR8ZE19c\#.HTu']CsJ[3FDgoNR"'S0j26S(!c;DKFMh_JN$Y)r0QiG(eV?C6*>'>6H/*(0?F8[^frqZ>FLX
%M/8YcW/PSO$X,sQgr^G\2Rc.F[*>_M&T)UTDFE77$6@MP\!BOkc)pi)D0,D:AD<V#&_T'TF%!I]=XT>KF(S*VgRQ(nff!I]7CLGY
%;3>^RelH>9U/_uV2J9`AgZIk8aL4*ed+C6p3uZl9X\<6Z]KL"GS$uX^D=]ZgZ>JG82R^l"bm(Y&"5D`lDi,Lhk)FP:gUqfME1;%R
%P]$*\K$eGlYqWc6]-'SPH"Y+[2Xf3b]$36#O`#6CP2U9*V2BAao=Z@(k.J&l[lJpjdV[;$MfbH[&L6,o]ZE^R3PRAuD<@H[[a"WQ
%O_o.\De.UmD]IH=kX7qJbrOMjD0'T?7,+46+43"0l:85+"U-+(k/%AC[^e@bAD:?S,/S1LF:mIi(Z^BkRgY!>\BP1P,2D<I/-`So
%=A4D&>gt+;D(`O9iAMJYMK#&C)+D-]7@,4Sk2K3,\%-HXUt]-^/(/8e";^5[(G(Jd>E#Rr@5]3UEu8,?dm]5?7J%eEk(1"_Z,J,b
%"5.-G0nO3rn/+GL(SZ!oS&I-'`tj<!%V1LV;$XC<%\e"eRtb/ga;0E7Nb"&V>Xu*=J?L3N@V@`aCbCP1:c8\>4-D0bV&dZiiTgcT
%\N"d9fj$r#JS[&amQe2tATo8$%*(l"bm!M[alYqfO^rOT!(X?6["0IT@Y,bdCb?H2,b)t[7$>f+2^6B+nfX'*EuC04ZGk<c"PI#i
%-A$%d>@SeF9C#!-bp@laa;-R#O^iG]V9#pPjAQ37>ad-oCbD>k+Ic#O7?B*5a<JY?1MIG2F"+SSZ,PL'UtAob02cU@fd@?#9*n(D
%bp<lF`9,L,&RoefaU#/^b[lI[@YQ[*Cb?B9&=^k17YiX.<[5NE19cmLF/dm7Ydp9AACt/X2aV=59,o+`Qq`STS'*i_MTquq,K47t
%m)ZEAA9W^Z>Z*[NCbC&U+Z>[!Nt@f(a%(s1-13"r()-V.@<3QA0l2jdL^]aT$R3LN#_^:'3E..WClW4c%%Dkk,/`Ok$%pkS9G&.#
%#@0`Pc-[Dk@<38UACqmj&K/$uKg^U=i?O)]3Qr`mCn=-OK[#-"L9Ps?`=Oqg_AL5RO;VQ\3b448CnAEsLs;\U7^769a!`hVrtr`;
%.%s2:3LhKqC^rN^MTt*OO^`AO;l&%impm-%kG!oEo)P%QC_!g-Ls6$)$F+kqb9/]=GT"H^;)!XT4>UR\Rto/q@e1/"6#9#km4lO;
%Gor=*5+P?mrN?fPaBZY(KGFL]K&8Fon<n7A#qLs*h2j;)*[L>ArbpkiLElhH*Vnmla?T(&nVM=Jkat*/'R/b*kZcI[k7Si%1r,g%
%g4iog@5"8PQiI*510sk6eT3/H=dSdM<bW%[3@Kn@T%m9'Ss6+a)IBo\1]rp"r.i!?T+.L24X]<WduE)PlTm<+j+/k2r3oDJ9DZ*<
%ZU"Kc[l#&?Sk6_omfkn,k"aD$DA79/N8,PrHMj,)Yj]aRa6e9-K\\<!l-@ocFC1'Fm[(29Ka$&BT*`,:`gl1IDPuepf_mQ7[)q3!
%F7FAB5;?:RXY$n%l58MO"t%>ONG-2s0=^Qr&jco.,//%jf_l!5I,0AM`=':bL5!\Ln4r#2E59r?3[i^r?B)hi07lYq$e(#5_h^B@
%V$KlsAT/(XrtdIA^+JM(MEJO',8s]!p<<T5*g<\iIbBC&?Ue@Rq/lXJ'D?nnVp$8tf(lTYV9=<03Z7#aI0qZW)'NNe7%H!30FeBc
%!URCf%%b`T9\=Q3C_Ytuau`s2@GdC`S#g"7q(J5As3!sg+Xbk:Z3giD$4^V*GlO+ldqTdb`CY`#Y/Dq]O9@:>rsKM:R;Td<-.^uL
%KaJ(@"0%+i]9`@J9K;5W>]%&db3go^39VE&i0qC3:t_L'_"+929tNVd@=Jf_3X,Efs()l;J!hO^_6/T$<oK]a7n/#G4T>d&`o6_t
%?6VCRo/LgkFgQRA7jo>0*W)Pp'CLhWZQZe>Y*KrQ#=O!_]'>o\^JFDQfSEe*!XMl87kFPQ44J#Hb;VG3;7'W&rLAQ08,g'fP\]16
%I-5\us&:J[pi>;.P'Bf%?@7##4[-UXp"NPY1$lIf?d:;(ggBsRG5pU3YHNHTcac'W`p&ifIhV!Wn*^5Rq";P8nWfC$[r6bG\as\<
%282.lDAqD+&J6S:o\Af(h:I!qKC/Bfp6Y7*IdWh4q=a^O]3k1pqto9baOb_'H]]<<ofF6[r3n?:Y&KQDOVbe,mCRa)9E&nhS_a$d
%h95SSCZ!h,m52McqnMmqp;skuNM!hppV4H>L2ZZJ?[pbbrq^O,IuE7QrjSO"@tO(&/:P5/FoULf]oT@HTs[Eb2]9tZa1>:IJ*pA5
%WGWG_OA(b#ru]\m;0I-ZCW-)(YkTB`P&uA(:'a@ueT5*ik6$G;k6$G,bm$>!Tou\R?]Y_M+qdFo+:#mJIhfEL"trt#YN5Z6'n<Qs
%i\eBb'6Q:mOkSsk!b]=L%`P+fF_W(EN`s7Fe]9_e#fmf*bpf&SNo2'+"5d$9p(h]&'74/N-pt4%1gX0ak*n;XU,3kl>&qPa_%l4&
%$q3"b[9.b`RY31akU'VHNNmE."9I9l(2N*u,pb?;Os_[LE%VVu>tHAiRe\cV/p*46nHb@Ai=^^)M:r?2p(Un+8=ifsC?Him1l,a_
%3@J!MNPN\sCdS2o%fem^Y-b,iU36s2,,HX6fF!98b(_&6V5FKJqa(I?OuKsC+U/DuAgIi>>5!$r,agD\3CBah9Yk#M,lt@1-L?Gb
%49IY^k'C>:KPc`).*.2+(9,?WJ$)P08<6i8gP/Nt_M#9'f-`jh/Oo2-`+_jS1WssIWg:F(GTDVd,HlnA'1e*p\TA@[Y-F`3891ak
%MDc0j8%Fmi')@@^ZaJ%8=Cg00/I*7="^>XJ+X+YfY+ec;jMX*4E>*^8&q^b<B$GqRgqsD8L$'.YKBO-7Ir/CP+7]UJF8d@oC4ZXf
%fWZYg'R>51e@k9q8?G0iR8%5DlTA^L'2<0AFQ$aZ#rrD?6:U2_X9sAp6jte(YZE6r@O<>YU,b[+,nX03-Qt%JF9^a72-83TXRHF5
%*+Up!%M$&ZrFf1:1Wu.b@7qbsAYhoMd)a!/C7JTHoE)lljP3U'7$J@.o[[::Vm97Z+D_XYKM]jIE<6a5#)#+#79IFhJ?d4<OU.EZ
%K,)sLXaSUfFs"fj6I$&C%p1"(M_J[Fg(u9ZqqEI_d(0[Cb*!;,P>VYl=/X7H1h#Eq#g4J)#[5<,dlfs*+k6'^Lhe@Qo!`HuGmV$2
%*(e$FJgGEb&2ZeKUpN`G=k$&$:#5`+TK"<h.g>0*aJgQnmJ$\rO9/O:fOUlRcGOXM&1Y0j+_SG;`pcr,i?TVsG=p<Y@g5IHb\F+f
%_oFh?)G-"kQ.a'/OMK?)1bq4t%FeY!F[1!U0lfU=l.%&?V,hOrABMkW_90k6LJhTm$OEEVUqeuT289ZR)cC_[R]>BA.0?@j6<`Pm
%(2E8i2a_6U7]u@lBTP%W7Bh#<U'NP%KTe/d<8K4JDcC2TY0$f#QBZRT>/Rn5MJI(nRAdd;)7`WNXaieQ.`O_S\M(6HJ[!Na+AN=q
%!`tTNF18t'JW02E+q2[Y!$".+W^WL:r0[/KaGPYoHo4dI\$G*46D^_*jO.*@l7j0L?*Kk1Z:7XN+sERA;XoKsf(+Xp"UHn5O+<1E
%Pq>q$*^WmR&D!ju8][n7_H+"ofMYifTbLZWLg\'_/(\#nZsOK*.";L0'?N*pL6,9*]Oi=*=(3<^.-u$\iadJWB7t:?3/%"%GEL`5
%5q[^EW@H):ntoh$lUFXWK1ZSQ@T3$j-0H">n4h>k&CmInCo1bTOb7(:!a1f-U*$I/+>dI0qD=PMEdA][KK,nGZ:qeG<i8MS]<kHC
%Zmj;nK<.[eCgafW.MeJD"Ehj$(Wt@[68W)N%Z'DW#j.GoWjE,M4Lad!jqY1"3&fo:3:HpA_I>s7pa;5kC(Pr#&t.JCaOMPpKVi\n
%-,Y<TXslp+Zj`XC&TV;9#V?jF<"J7-6!+JgKPV#<J-fX9.h?93Yg!YEL!h(P6n,$49DLT4-au-Z?5^)q]WR"cJ6L\Q$]5E\Sk('d
%]OSp-:*gd74>jJ/.1jeEKY0Q8W0p"lFBXGrE<lj)2@h*j.kU!`K[U0/-FNr.A]](PX,uc`+YWI=/G.1qR)g(trIM$U<=D_Z8*e:<
%2W,]om+5.hd!rA/VK;L#<A2R9IrEsc;IMRLAK?#On34AhF6:L<`H.;EaC'`<dZOdA(5K%Z'Pf?ImBaIMV9u,]#Ljis-LMpXO<AA&
%1A!t8kkh`=SYO@9D>#k=,Wn&nX@33&U^1J2NGq.=Vl.oK/6UF.X'&G'p8.u^bsPToW_;#&%7=5*ZA&Eq8[o4JM@q*.G2YW.1_kfK
%hV3X]QJ/OQ!%h`hPc/$X"jB"Zm#5?Yq.smReb*<TJSB)[EnqY:OH`>(d7LJGe`?fD#Kos-=`H,hlCbK52MR=B`iR77[05j3-eblK
%e&07)!@q;3(+S=`c0WA6+;%2:"oVZ%H9E)kAPg24A]es73J:Y>5_OM9+00ZM%?+r3X9Z<09dP/VQr)<'6WN%W+Nt`U<)eVk58D6%
%,c?U$UFe,rM4Gq!TbJtNQsC=B>;qXXNA&WuBdd;VKZ.#G>VZN,CK!g=R#c;`_j[W!%tn2[W8_fu#6qVfi8aC'\TV,6RV69:%3!WG
%fT:V2J[!;)r(t8<^"D%PU5Y/LB"LGr0aPZD&m-hKW'PZZ,%+>>aVnP7]X%_J5ccLBGpa4D:Wfc7>!BYU-k(J1o*0#l-%`r5=p\ed
%A`b:lX?.T4K+5)pYmd//S<XJlKb',qbYD\:"gY382Bs0T,366AK\#6f+Y\*a2*"(GL(8=6Pdc=I.]X]Ad^0R?*?Vp&86[d!)U.JM
%<C%tR<!WqNai\Qq#^%'kBUbemK;65oL.02H*^WuZ1'&6aX+R0DLm8,eUWa9)=O"]D>bA!6Z*b`cLBU"57j6sd!Q&)Q:"Y)*0rRqe
%lr0bYm"r]"!;g`^#`b:HYY5%^_6q`D%KM#=VuRpD:$$rsJCLl/W<J+K//4_1"00'^^`5O$&5eBYcMfC_9nBO&\<[S&#YB'YV6[(0
%[4;q.72I'r@o`S+fS$<K(6OV+TK*Qli.P!DAYXJoQb7=:Lql_($INTY!ec7rMeEf7Je2DcAVe73Jc9/QE%)'><I$\WO[EL^OK!F>
%.%DJLbqrBuEZ-tHa),M;=U=hF7mu?=-*jc9@kA:uj$f)AOue:nCXO@9MBF>J:qLk0C+LY9$_'PqVej6'V@`=l<=uY_?mhGj=GVJ@
%?Sf)fi[#BnVup)(LE88(_e3`b?>X7J_*OrG[K_>P8elpN_5/:(,A.U.brL_[2<OE`!ebD>&>mUN!A)1''SKGnJ7:e9>F$^>O4Z"q
%+UH/TC3?9;&BFJUq(#ED[7r(,Wu4Re#f)QcS6hcM>q/.'YQ7a@,"-Sl8]!9^H3<Jk$HW.PH3Q"=]c>bdA$X("!W^HVnuK9e-o>!D
%l3+S"rsQf&1G0=`4**g2r&oonAPrpG-Y@E:%l%1ca]m?-E<.f`<(qO%OW:#]5Kc(0(d:O5"VP?6Llff+Q*N8AA1]QR&6_f?>(UT.
%H"NGnEdTG,L!W_L.$)Eb['C$lL^4r[Rpgi:YR6sPAqGW75Y*GW:pg=LmN`?'AhFLt,nT@c*Zud@n050/0.%5a"3"r1#mA2`S&k(X
%AJqAV\]`'kE$YhW)jF/)$D66qDl=?RiK-CIb#!B"@VeIRC'g4HZdN(\U4-)JAb3LY_H(hn!:H'b:`6SEJ./i"iC3)Fce>%"1\!l<
%D2i=J+<[Fl7U'&i_2(co0j9)8&DGgn>\L\U6"Vub+Dg,O*SVB_1=[6q/6R(*_%1"k0:@rgkS]*iK"2l%/L=k_@[*t+J?*@+h+G*b
%+u1(SlSSH`D#fNod8nWnGngtc[A`heCd>d7RY,ea1g5Yt*mH;b!5\2k=J@,bY^@d$P#W/,*/W2!UmchlW+2h4VM5K^YNMA.dL67Z
%IOc\G)$mYt.LB$h#(iV$!^p2rJud<m:ML)cNMAnM[V,jHAsD[8d0p.^Au-OL0,Y%_E9^RnaCS,W9R^/go+E`"[<acD*EtHnb/LFb
%Hh\0;SmP,jK]lWUom1n%.pKQ--GAIn+LK%!Z#mCi**/-POr=mh?"Z/,NjFRPD-7=.ZY?@1ZPmZOb?<MeeR7P_f@[g52)q>-W>!Bg
%E'UOj'$H`oi..7r+-ru4q__AgBaM5`f`N]TJ&1h%A;uibQD=^H>"N-_&Pd(+W4oBF2;!3'r1.FW+Cs23KUgQu5qu)u86,i019k[=
%+VKY,<uoa3+VL3S1nuBT6EEgtUUsA8ek-ShE__8)>)hs"OdlW2Yc>q<(Pr9\MHk41P1/?N5cVpKa_>_\^f"3re)5J(*5?>N%1[dL
%XsM2(5fPZ;6mdIUCf!_T.j:%rg4e-WNC;>\$`%Q5"9)r&gDAOgK)8\B0#quNE'H5G@lY".T/rGnW<)`l*0Zc>JGZ=BZ7W$VpJ\N:
%a0Z%Cf#T1kR+B?'1Uq!M6<XJ&Um&_P(a6#4h0>2sDD\Hr(ak6`MNHC3\'c$,95A&NBb=cECS9UTQ@63K#/&C<EYTau!N/npUh)F9
%.8;AD&[E<o8dinCBNB`nmZa%&#[%UW2Dl6fZPqJP+XDVM2+XSKD+n`<>Yg[ZV);'k5`;%G=p)ArZE,^]_2t;s26W.]4g$NEJULr>
%/%3)[<ef%L&8GO(A5t(8)p<#ipmm^-[CesE"*--"!Va"LA;;Kii4`fdpT_Y+<k/?j-8tX@)i\0>@KY^%[!9;22L%l.gR$QC:MX*q
%OOeqTWs:di=sJ)7i%;'^$4:p*=p*'RAdU,lOhm=5XGE`2\AFk%\u%>],H9%fe?fE.a%D![Rb!#XXEd*+CS2<OP[9AqN?#Z1C70pO
%:>f]!3n+c]..j1SE_C608V@C,Z&pE]:p\(EHuqMD__N0V)W"MJ+gZaR&Z+>S1E1UueQHK/:T^Ru,rY><Q,2"p#%@UuW%H2/TO=!*
%6suDl&sfOB1p_b%!\muCkWqs\,,$;UCg^&9eg%ZB"prbe11<^ij;_He4Feb:Eq[t`i-S"2jN.;@4ss!>E6X=c<e9GP##<=&@glgU
%K7p@sJe/S7GnE"X&Ve4.%^E&+R[VkoH"HZd/[:Gu]EF(8=_7cd(kgk(R>p!e,e)8-KM#$DC'-?(FN^,L2BZfnXWj_RCkgKcd*)\q
%$cssU&Mb:N,fO3H"@Hc'69-ADAi=m`XmRs/bQ_Uh1X7`p/.<`ICTsc*bA60-9Fb06K:aNrDhc17KVcV-/@!%.`3LC,Z&s+\P$E\a
%Z,'3gT"QF.+O%68^EtkcPeo;u`("'8;4Es+i9j/g@1b76gl].D4$m\7]3HTBRbGR8OS(H-2DC*N!3MXB^jrIsGG_2p0Jqlj\sV6f
%+;R3d-9!X6"fmO&%870N*gYTs'[d,R,r\X<Y)iXK-9(_@2Mm/lEW]6?LQ!N<0WFB^Oqo4OJa$MeG"+bgDWFq/?q>SGqP5Sm57u<_
%W/[#*R0f>=J;OujlMp8=>^@^,MBKQ%i]kZ,9;Hm(="TEm"k"MqYd4lZM31(B&!ee4r-KnK1EoWFo[qsRBNAW>X)E3qc6L)_aM]%[
%h3rH(nHQW:F>3l9lm]G?]Wn6N^pr>4%'G^#'&C>O*!R<Q2_\RY"u5A^4pgY12te,L&9$on)UB\cYi[Mud-6:1$5F]pV]2"f@YR[i
%Ja$t>+XGmr([_G?DHPem\;u:^eiW=12dd%mg$O?0@lrbKODn^I.i3\tCh"D6,SJkaU1,idc8O%@L1tA,%?pT&!=rf^d-?O_ODR7+
%VAt)iN@d8k/4R.#KamLGi5X=q>XGq$X%)5p"ZJ[M3.VWYCsC44,N`qI>2L7p=2BkJeMToWYg<bNJYX5e&m#!TdLH+EJ1n_JI%jHY
%9Xk+E%Djs<NNKc53e@i#m&*i,$\o[6n/S2<FL\T@9Z7?Vi"?UiM/H^H*LfV'/b*ZcnV*S26loI9+'$,Zm*aJYYt#K56'*OYC:7?6
%WO=t_XoV%sLS24#E5_7Rm5A\`m3eAd;9>I_.hH4ubJ_rK3^mqL:lqg3p1G6U>Xu!;E3k@.hegJr6)$u*D=@_FPm%.U1YAQ2b$sHi
%<o:MXFr$ihM;=g=ZP_]Rh057H?l'J-/e6c4ZHa(K'0RSME3)!n:YU%&frqs,N.Lfm-?'_?Nps[k,T_/s@%$6qk-cM+3-[k68(]E4
%lB,>l!,AGZ_/O4CA=4kJ4u+*fR*i>K%*(NnQDo>K/2XV8>#NNi>[t0d/:e+4K,>F!aC_oeGb7O3#kSNELSI!")oZD?ECdAAB2,^$
%6]*UAFM]_tN9&<$Ml0FRqN@7i!!=aK#.KL'V'IZqd;qD_EB1VSC6H*"-0<hq1ua+GlbZG]\6t*/5!U;E8D%rc-g#GKH'fn!3NDG^
%P.;Qp9!BG+$T;X55\`$?1FOk+joUG@I[\=]`Ps,,G9Idh2G%_<>YroiM?"e9ltL5t`'Q(gA.TEAONXo?]n6KF>g-M8-;Pd$#h1j%
%&\/la.rVe5=Q]V(66FU?Oc$'4/''@pn]6NhTN_iVPbKZQ.itZu'4U2sh811[7P#Qqqk[RU)BG:V-K^.eqQagi&n:+XP-HnZ7_C."
%CPT<j$8ollAO[,)*cm6OM1ekA*iMV*J-4h_CY5"E:SD5mH5M$l(?fQNf\ILN*TgoHKZ4fAc0bo"'8neiBu&9X!*QsM$g]6r^HE>@
%S,s;m3OD70E!h1)/R2PW!BWt5/sT$2esCdoSHMq2E4P<sYtM#P?t`-P:oQ;*=Cct+Pm5G_8$m)q8d"q<F,Lh7+B075Y@J#EWAMi3
%EZpSOE72tMW\\62%JWonSOl9Pfa0g1?j?s(#kQ386m`H3;LoHg?<Q8"7BjB4(2"N,T%7/7gT9r*,41+rDI?dRoTOURMmgN/H7_+(
%%RP-h2?AqpP$qHrf$Pec=OAV2@5),p/6m_q:*Y"t;dpgY7)3OI2Z*sX@8MaTIW>qFT03f165jg]=`srh?SnNq4+kg3E*^BF2,T')
%Wd_hui)qUN(4lNXVTkM?7"^QG,-p,4!]HNa-Rf8Iegt)BK4nLA,_<`5<>KQX-P0[/XC`6!5`6dd8;fak+cRO\8KbeLkrpEs;273r
%-A$aY#np-%&9,H*]?#R[#]sV@r:+;/2?$>RSO!6Y[o>g6K>=P?(3'Xn&D!)4k#c.*B"&J2821C_hGK]1%&-M^&MaVKo1K`K2]Aku
%DP%'+g;7#q_Gc1()2;Ee3eDm^NoH$@&1Bs*h%>3gh<DZ1<#+Uc7BMXW7,?<O:]piW5&)hY+Nt`VDPI2"`=eQT#Qffs<=b5a-@c*;
%0'ktt!)_@laU19u8lt&5#s\KNMu+&N?qo9u0aSsP/7j`9K`_UF"c\0E:*AKE:*2G-LiQ1^KEM>ibfXiOJUf_!>8;5]!DE3YN/.V2
%N9Pm:Jgg=72[!!:YY&fl#f>06$lORD?+-a>+H#-(kp7<7'V*cu!ta\M67sVe!NWPhg'Ao7<hI?92@0N;nH;6(&-^U4Rok@XLlrXi
%,S6@CQQk)?"9R"GJjp=X'Ost#+p%d(Vh5$^&dV]TYl('q!ZFp.OMi8<ot^\B0aN$?W@KD8"Is`.5XuAs9.>i36s2/aEK20g^NW6]
%Kd-lpP.V)O@%")h9EO2?H`dJQIIgKS8k:'34RRs6Je'5@brioZJj<_eQ[4Q4&/aTA54/R5R'*7k`0(%l8K`c3YpTTm5,)lRS-/m/
%(JVEU$%t00]P/m(f"$t!#XP+KLF4MRdFFIB#t4M?5nWGq9-68>LlN6IG6H=+*EN@G6(BSCEs[[GRRAG8K!5ht0Gk(iV9N3gLhqZ)
%+c)$-pnk/IhsS?`&;[@<Hm0,!881@%LamE"6m/KgQ&B#]Laql2M*TQA^J"]+-aQ&M#\7D^rbWtnPiU*m6H*^rJl&<70-^a70kUVD
%\FlI*`/"cNR6VbNd!fC7#7K^,#/PHRPsHD>4Nn5.;fONJLiC_U0Sgqh&efnrQqHADMa>j7a@HMt]uVQ*J[ImE0Gm1mTq*#gPu%7p
%+KBW'MI8,o$;XifKjYJ5,n_DX6""T,V4nf[R2G82?k=nQ'pCqj8JWEQJWck*'u;#]\cPP6U1N%U%&.H#3\^o-4<@C+"G>pp!R$((
%&D`l^,8^i`UH,!_KO*P#8KYknHKn+U+GTVNN*mb6/8+iS@BkH/8,9J&"C)iO0SCR'"J-9Y0O8.8Nu/"Aqn*SO&BN2hWej"]hHD%R
%_&s66,[$3;U+G`&)*qmH,oVP-clke[Z2qEW6ijE_d"W++^jLa38I0l=E@7D'KdaK6'SV&DA7JB&'E[BfUZt+B&7s<S4t-V<'C]QF
%L4HgUFP7:\^^>Y>8f5Fr&iU/K7E:^'$E"F`L_'C_U_"gkBS]!J-,;iP5mi0\HopR#.7>o%XIrJteCY;opIQOPl&qqX'V\9rOXL@t
%>fV/c&Fe"JP:\bJ^p9'?J.TS`O%eUJ6=?K)ds4gsl`W.@]5S)X9+Iic#pDD3,h[l=#V:BS"Xes7=<U=,63r.MZudRH&?sZ%lqpL`
%JY^^[+@HJ9PP.0%$UG'ap_4C/+@NK45/)icTg[0B6*UUCrN]6b(]bQkWp*%_TNKjFcl`Rth,6?@b3rET"%TTl_@N+s;.$tY^:1!>
%$!^Afd+`_.\h6OH@AsHs,M6:]9Ek;Y+D8IAYACWMp(OnucL<q&?$2RU7oH:k+*e,KOCV51"pGo9dEhk>PPaPj_-1jd1m%EF>_l4L
%JHX@\oL:M;)V,m>gD0@>5I/'dZhomTmusXu"WGsFL!,3IBHZ8VY5bX3%82\cfmFgC0XG@EXDndT5d>%^8KPTN7Z`L\`N.s[Wag)a
%JH5n[-[:.BAGT>aM;T,`%W>:`i`H=8$O$\AkPSp$A3Hlh!7'hr)4T_pW-g""HY\U^et`JePBnJ89h:GLhMXms*M$^lrr@7_$>(IH
%n<QB'oMK)%`ngBT6's)Z"e4WGcq0X'^_Tp[#W@\sW0+NYhUoJt[07'WbTRfB<5bka(,>5bXNAD$G],0OJBT@E2t*k+H7V3@;Amju
%aXX\MkdktRWmp&9UR?i'_FJ1;gXJBpha[(3a:_+&@BH01WtN>H7Zm8*'j04iK*3<!5r6]QQk[UK&>YA]=98!Mlh7:jUSCk8h6*!X
%N!H(D0.F`rq.'kj&p,mA5_:$<[iLW!Q:7Nf"gX$d&*LqUNndm<hG*_\^.Z))r-)s]8n8K*.-CUUp>4m!A@md1l.co:M$;*"V&>uZ
%p>\mXNm)Lki!FRAN>7[WB/Ff9N(j0_DLg*PdApV:!A("/&qoRL!s`U]lKGH[K,KgQI?eE^$At=`$8-o=*K'/p#!6?0\6p/tOR`Z&
%C0pBfQm%I+_THW8,+oK);h2Sp2b%e#g/#ci;^,9(;mOf03`0d8NnCtW6-ur9F@#JJHksm:WT-6?-.ULbGl+khk`\J$l9_*fl8\9F
%N.q3J6H<N<d)bnjc7&$jMqVM%3(D<<2g$+U1GR*E`rX40-Cpsm5[nh.EJNj>i".Gb#'CpD3,CJtDD>0D*g9gD)2fhQ;Knf*#k87)
%#5XcC&M06!]X+st<.#fU*>gj=#NUj`o`LG05fpq\:t4MFZ`P$c"C235+_3[;.)\UQa<aC_!gEQWDW)2O(MagCE>_;+:UQZ#`#:1<
%ct"94k?fK(!PV`mNcU.gDIuk;:^5@sc61dIk/:B-9*PIC_9NML/\U;CPR[iW6s:<l(ei#'DGGj=h(j6s,D1QsPMK*S?ne6HZU"fE
%c1,O&kS+4cXn$g0@H&7Njq%_Eg[6hY1UtDU59UG]=nXq1_>L\3&eW!2jpdnB+Umd;Tr/_NN8;m-'7q(qUY:D5jp]fmoc46FHMR[g
%KY`%?B]2AcK4g<m.mY"7[5<=VK>HT]V;[[o(q^*+5"VP(TSnNT6DQ:`+^!u\71*PJLRYafhTX''Lr,h"ca)FV9H02<J/"l3&<n,f
%_0ST1&5j@GM!0F@Na\Rt@hMo]#$T_P*9%gt%,,*,6"64YSejt,:nt;XJPKXX5YE1LLG7YrPmiEZVTi^LKJ6O"dA0PL##un=[U+V@
%(lUI&$,QZo;e@-X@o?W2.70D&UcV?X@tcIuq%1DNIb50Z4Sg3:f61>Z&-fNsb?YA4G1;L;)c!J+9$B-/0UT*pIjQmDK81g?(GSUQ
%gl@%rSGoO@NF<Z;MqR>d(oE]-["=<HY]h$CZQb-<ZZd';%&W-c.?7mTCXGZi5n!i1Ge[`*9_C7('8?NamR9YBG_/skqBBAclu</t
%Lge)e8'F370[MmobV9N,,V,]%`%^CV6,tTU)!I^_3Y8B4\5X,q3J.^+Y+dUm9WTWj%$jUlqHsKV*U7g9'F'h1rD$c$Ze&2CV_I>f
%`M*];(_h^$Rk"hu]r':<UbF.::"q1r0W7_#aJ;@8WXT5m)2(<58_ulkR#3X95$2>L&:&?8'SEBKQrFWo@c/B@$4)9L.Z5#F@Bd]\
%U\'3nkTq"qB*huHh!+VW#ZIX#ZQMrdMPc%\5kAer6jA9,s-Bffc<tB]-O;FD/A4F0SIhY"XkXae9aOlV(t8f@<C(7OFa!:!K0bS<
%@5/U7\!G_XB/""<g;IPB_'$2DrN-W9H%c@:=RudO1_IPH8?P8\@kjur87:Q^$",B80`]GZRn7#S2ptW`"NF2+=N(<"Sb9.Y!uSX6
%r<?Zr9(F,JJ?`nH(j#[c2s7]=>M3:--R+&VrFXbOquok#q[&+oi#15t?m1$9_oBVRnVaedcZWEN?h"!A9LSZp8kW:J:]+]#p#u<A
%r.;CJY_2]Sn(u1i4n4FFY6J2RIDMCGoo&#A?Mmp%-%3%%)4E=C^=8RC"FWS09rGFOoEBl2/A+M\:o?\K7/15FE0>N,Hbm5%?.fUo
%Z3RM1aBgRK2M)mb(E8QP#tF]!UGiJ^iJ[MBUo\(fI)$A+_3]JH&h2dt=fh,`'#)k*@Q/rnR'i;>(OSL`E"f'fp2\0]QLMiG$T?e"
%=,?2HXt;4o+jODU.O8CGH9qM]?2fC9_.16B(G#r[W["(I?idN1Zk2<;ZGbEEc,g@E,d`4:GsS8^4h*md+sCYTJetMDQFOX303C22
%La2D@,o42c6se*;A\%%iX>r.t[7FW.^>"GnK"PJ78@M$M(G$F1QO$no$HWl_i!$[<SISEu03GF7e/qfE-Alg0@^\/$eKT1AN&fPp
%Z&9o+#t`3D:j'IRJhbPVOB\(BK\U.=FA2+3XY/?;]HG0Z+t2qi7GGId"><<kZBRZ5"o3IZ1<<a/!OU;RMqeKH&.q'GQ`6Q4\I2<I
%!d3QV-j4I>!$qQZL2Gn3KJ<q<RX$8Jr6_BXZiH(s9d53>nOK3TrJB69s1--lQhUY^+c;F]k[E=@6h1\!3L1j<!^&*m^b2*c(]b\n
%L<'q%JA[?*UI$%(_\NAA-rjH1?F5MW(I$T(=VaFQ=s:>ZX?#ACi]bGQ7?/q,)K8oanZnDK3^A;bI,3o$jZUR[;S=&JE&cppmYa[s
%FNF#6l]Fd@.6+P3)Gsjm(7CO^RX([OKPU&(!H(^3`Wh!4ZS'mMLG7B_[N^3I%T)GOGAOd+fRYRV5NFh::u5cdjZEd[#RXIcEt2u;
%)"<6RNlat"hHIu5mjlY]aDR)8hW&NPeBuM94/Ek@C!cF'oNn$lRZK[5S`2J.N"]BOdi@&dR@FHfEkR%b1fi4(\K<g@o'>$rq+#Cm
%^._jCj>9ERZgG=`9t/,?mE0.)h*77nna4/,&8XGA]`Q]*o>Rk1FVq&3@*k_"0MV_UT_X20#!m8!i&%<ZTO/Kq9t)H[1tN(2e'5'W
%*^YGsTT8WOO?Jnl)WMnEjWE$>G9+lT\r"p=4_6S,RmdC='g#u:.U4ime0%:,Xgp)'>6Y,a/Clg%<OZ(dTT;Y4mdmL;LFLl\N$HZ*
%:Hs`]+9)<69/POsc!(JADIBSuYOABQT<#c)^2@UgmQDfA8@,DH3L;UU+/U1+YL)*n++G,t5Q:/R?f*_P54.L8@.S)._6j+@S\r6W
%?t;G\K9q5\J68H#/W:#.JIGlb3`(@'M<9FHGWco2>IW@lMHp_2*\CpBe"+bAp#'\04oFF"$sjH6iS+5@.s=)JS;=c<WomkJGWcmG
%C%U/@aPc1<=7sR2T<G)FD.\d,_6-K8404@Ug"sHWcPIY3o&f\]pe=k9m.KUa>3r;a;^<J@d\H^e^^ltL?:n`e<dQ8sak,u'rpZAZ
%?]Rs*$I9O^f(H*=hg!Zd^jt[KcH@&JGjBART=gZ?bTb=(DnE3Fq9BUgMX.eJbd/5^(80pEgc*5XfKVAb>.WjY6dDR$I/4ZJmUpjL
%Tgn0LYoUU3HS*s=4a9L=?9*+7HZ6ad+o+A$P^M'I.sd<--[Uq<eW"ZsJ^B-t`#sYjbdjHHcl]^:QRa\?r?]WjO"eS2^LZ_c']]\>
%K?a"0frbQ93$5fD;..EK>mL*Q3$%@o`Pogqo*Hjj58Yo"CeHAc1[#(YkbbeTh,L".T'Kt>^KfO+n`@LMpk!o!^LWDC0A,@Tg^-.$
%jmZjQbDU_6U,iLejW-?PCc/u"K%;mqL-Ok2rEDt<S#="C*j":PKA"XR_.rXN9=l:IDu?#qnY1C"gb!cu=-]\tlCY7ba)!Z%Cp#'S
%^L56/gMk:X$?4W$n-If'#L>-u>C[=HW;5nSQT'Em2/4SAg.FliVPe`!YPXs]O'&ifDV'rBcjrhFnl$7`O605ho\uCGpoj^'*f[Vs
%VK\L/DF%`NW,qI;[uV4[VCq94&ZfWs9b,>>UZ^RuYDO(EjK[T470Il)r=AZ.GgY]8kk<4BaWQ*(cWu_sH:'WRrOC^-ZguHoH<Uee
%)=#!)_0U!IoCWX.b.g/-[]]N"G.tYCF[g:&J)iEElQ>r$<Sb$/^or%.*ob#/o'f/`H4PQ>dIXV.o&7u?0sqE1^i?;/qR>tI#-6n$
%rfld.m-F@0@GP8&j^kEHMYQeRZ9`SLDp3\.(nZ;n+5[#fGQ-QHI.l,t[X7CumG=a.rPLSTM-C/D+lr(;_=HQ/=haE2R9TEF>q(VK
%@3,U;b('B/1X(Vd*q8g]6jRF;:j&#4f#U&@?Ie7qB8+7-/,J$4n3>g1LZe3\fBmUZp=Cj-Snm$WZL<*W.Xfuo4gtlJflt,KGOj7-
%IDKdBq??U>lPJ?DCsQrl?8WF7-pf^eKJf3#D,OFHWB:PP0bjWb2h83]n`@0(XrVo0KFfgD6O>Q`!>^eYL[uHClOlAO^^lJirS#a:
%at]63ZmSaU%klKJSo;]rV7'_,;f],1r_q[F4.i^jra#KG2]r(rp>(5Ts7i)@S:RmCq!PcgJ,8]kh`ndRn^kPPm\b:/HN3-`a,g"Z
%msd=sf:25XI/h[k"M]HXe)1/pDaa(<IGh00^A5\B)#Y9(DY%l~>
%AI9_PrivateDataEnd
